<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/6.5.3" created="2024-05-16 10:23" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>小木蕊</title>
	<link>https://www.xiaomurui.cn</link>
	<description>一个双非成长之路</description>
	<pubDate>Thu, 16 May 2024 10:23:46 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://www.xiaomurui.cn</wp:base_site_url>
	<wp:base_blog_url>https://www.xiaomurui.cn</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[ll]]></wp:author_login><wp:author_email><![CDATA[Ll15934715895@126.com]]></wp:author_email><wp:author_display_name><![CDATA[小木蕊]]></wp:author_display_name><wp:author_first_name><![CDATA[刘林]]></wp:author_first_name><wp:author_last_name><![CDATA[刘]]></wp:author_last_name></wp:author>

		<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Bug记录]]></wp:cat_name>
<wp:category_description><![CDATA[这里是小木蕊的个人笔记]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>9</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:category_parent>
		<wp:cat_name><![CDATA[博客搭建]]></wp:cat_name>
<wp:category_description><![CDATA[在小白搭建博客中一些常见的坑和对应的解决方案]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>28</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%ad%97%e7%ac%a6%e4%b8%b2]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:category_parent>
		<wp:cat_name><![CDATA[字符串]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[技术小demo]]></wp:cat_name>
<wp:category_description><![CDATA[个人学习的所有的框架的笔记]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>35</wp:term_id>
		<wp:category_nicename><![CDATA[zaoping]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[招聘]]></wp:cat_name>
<wp:category_description><![CDATA[招聘专用数据]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>31</wp:term_id>
		<wp:category_nicename><![CDATA[%e6%a0%88%e5%92%8c%e9%98%9f%e5%88%97]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:category_parent>
		<wp:cat_name><![CDATA[栈和队列]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>37</wp:term_id>
		<wp:category_nicename><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[算法]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>23</wp:term_id>
		<wp:category_nicename><![CDATA[%e9%93%be%e8%a1%a8]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:category_parent>
		<wp:cat_name><![CDATA[链表]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>32</wp:term_id>
		<wp:category_nicename><![CDATA[docker%e5%ae%b9%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:category_parent>
		<wp:cat_name><![CDATA[docker合集]]></wp:cat_name>
<wp:category_description><![CDATA[docker容器的使用方法，日常使用中的技巧，一些普遍性问题的解决方案]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>29</wp:term_id>
		<wp:category_nicename><![CDATA[git%e7%ac%94%e8%ae%b0]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:category_parent>
		<wp:cat_name><![CDATA[Git笔记]]></wp:cat_name>
<wp:category_description><![CDATA[git常用技巧以及对应的日常生产问题的解决方案]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>36</wp:term_id>
		<wp:category_nicename><![CDATA[mysql]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:category_parent>
		<wp:cat_name><![CDATA[MySQL]]></wp:cat_name>
	</wp:category>
		<wp:category>
		<wp:term_id>38</wp:term_id>
		<wp:category_nicename><![CDATA[erchashu]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[二叉树]]></wp:cat_name>
<wp:category_description><![CDATA[二叉树算法经验合集，包含题解总结]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>30</wp:term_id>
		<wp:category_nicename><![CDATA[shuangzhizheng]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[双指针]]></wp:cat_name>
<wp:category_description><![CDATA[双指针相关的技巧]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>24</wp:term_id>
		<wp:category_nicename><![CDATA[hash]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[哈希表]]></wp:cat_name>
<wp:category_description><![CDATA[当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。
但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找]]></wp:category_description>
	</wp:category>
		<wp:category>
		<wp:term_id>39</wp:term_id>
		<wp:category_nicename><![CDATA[shuzu]]></wp:category_nicename>
		<wp:category_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:category_parent>
		<wp:cat_name><![CDATA[数组]]></wp:cat_name>
<wp:category_description><![CDATA[ 数组相关联的算法问题]]></wp:category_description>
	</wp:category>
			<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[component]]></wp:tag_slug>
		<wp:tag_name><![CDATA[component]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[hash]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Hash]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[n-%e5%ad%97%e5%bd%a2%e5%8f%98%e6%8d%a2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[N 字形变换]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>42</wp:term_id>
		<wp:tag_slug><![CDATA[redis]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Redis]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[springboot]]></wp:tag_slug>
		<wp:tag_name><![CDATA[SpringBoot]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>7</wp:term_id>
		<wp:tag_slug><![CDATA[vue]]></wp:tag_slug>
		<wp:tag_name><![CDATA[vue]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[wordpress]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wordpress]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>41</wp:term_id>
		<wp:tag_slug><![CDATA[yml]]></wp:tag_slug>
		<wp:tag_name><![CDATA[yml]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>3</wp:term_id>
		<wp:tag_slug><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[个人笔记]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8a%9b%e6%89%a3]]></wp:tag_slug>
		<wp:tag_name><![CDATA[力扣]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%8f%8c%e6%8c%87%e9%92%88]]></wp:tag_slug>
		<wp:tag_name><![CDATA[双指针]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%9b%ba%e5%ae%9a%e9%93%be%e6%8e%a5]]></wp:tag_slug>
		<wp:tag_name><![CDATA[固定链接]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[%e5%ad%97%e7%ac%a6%e4%b8%b2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[字符串]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>6</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%99%e7%a8%8b]]></wp:tag_slug>
		<wp:tag_name><![CDATA[教程]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%95%b0%e7%bb%84]]></wp:tag_slug>
		<wp:tag_name><![CDATA[数组]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%96%87%e7%ab%a0%e5%8f%91%e5%b8%83]]></wp:tag_slug>
		<wp:tag_name><![CDATA[文章发布]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>44</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%a8%a1%e5%9d%97%e8%ae%be%e8%ae%a1]]></wp:tag_slug>
		<wp:tag_name><![CDATA[模块设计]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[%e6%b6%88%e6%81%af%e4%bc%a0%e9%80%92]]></wp:tag_slug>
		<wp:tag_name><![CDATA[消息传递]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>43</wp:term_id>
		<wp:tag_slug><![CDATA[%e7%99%bb%e5%bd%95]]></wp:tag_slug>
		<wp:tag_name><![CDATA[登录]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%b7%af%e7%94%b1]]></wp:tag_slug>
		<wp:tag_name><![CDATA[路由]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[%e8%b7%b3%e8%bd%ac]]></wp:tag_slug>
		<wp:tag_name><![CDATA[跳转]]></wp:tag_name>
	</wp:tag>
		<wp:tag>
		<wp:term_id>4</wp:term_id>
		<wp:tag_slug><![CDATA[%e9%81%bf%e5%9d%91%e6%8c%87%e5%8d%97]]></wp:tag_slug>
		<wp:tag_name><![CDATA[避坑指南]]></wp:tag_name>
	</wp:tag>
			<wp:term>
		<wp:term_id>2</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Bug记录]]></wp:term_name>
		<wp:term_description><![CDATA[这里是小木蕊的个人笔记]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>18</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[component]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[component]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>26</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hash]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Hash]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>16</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[n-%e5%ad%97%e5%bd%a2%e5%8f%98%e6%8d%a2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[N 字形变换]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>33</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_format]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[post-format-aside]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[日志]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>34</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_format]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[post-format-image]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[图片]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>42</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[redis]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Redis]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>40</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[springboot]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[SpringBoot]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>7</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[vue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[vue]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>10</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wordpress]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wordpress]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>41</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[yml]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[yml]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>3</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[个人笔记]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>22</wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e4%b8%bb%e9%a1%b5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[主页]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>14</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8a%9b%e6%89%a3]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[力扣]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>9</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:term_parent>
		<wp:term_name><![CDATA[博客搭建]]></wp:term_name>
		<wp:term_description><![CDATA[在小白搭建博客中一些常见的坑和对应的解决方案]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>27</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%8f%8c%e6%8c%87%e9%92%88]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[双指针]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>11</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%9b%ba%e5%ae%9a%e9%93%be%e6%8e%a5]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[固定链接]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>15</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ad%97%e7%ac%a6%e4%b8%b2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[字符串]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>28</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%ad%97%e7%ac%a6%e4%b8%b2]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:term_parent>
		<wp:term_name><![CDATA[字符串]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>1</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[技术小demo]]></wp:term_name>
		<wp:term_description><![CDATA[个人学习的所有的框架的笔记]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>35</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[zaoping]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[招聘]]></wp:term_name>
		<wp:term_description><![CDATA[招聘专用数据]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>6</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%99%e7%a8%8b]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[教程]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>20</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%95%b0%e7%bb%84]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[数组]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>12</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%96%87%e7%ab%a0%e5%8f%91%e5%b8%83]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[文章发布]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>31</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a0%88%e5%92%8c%e9%98%9f%e5%88%97]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:term_parent>
		<wp:term_name><![CDATA[栈和队列]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>44</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%a8%a1%e5%9d%97%e8%ae%be%e8%ae%a1]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[模块设计]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>19</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e6%b6%88%e6%81%af%e4%bc%a0%e9%80%92]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[消息传递]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>43</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%99%bb%e5%bd%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[登录]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>37</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[算法]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>8</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b7%af%e7%94%b1]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[路由]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>21</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e8%b7%b3%e8%bd%ac]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[跳转]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>4</wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%81%bf%e5%9d%91%e6%8c%87%e5%8d%97]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[避坑指南]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>23</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%e9%93%be%e8%a1%a8]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86]]></wp:term_parent>
		<wp:term_name><![CDATA[链表]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>32</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[docker%e5%ae%b9%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:term_parent>
		<wp:term_name><![CDATA[docker合集]]></wp:term_name>
		<wp:term_description><![CDATA[docker容器的使用方法，日常使用中的技巧，一些普遍性问题的解决方案]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>29</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[git%e7%ac%94%e8%ae%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:term_parent>
		<wp:term_name><![CDATA[Git笔记]]></wp:term_name>
		<wp:term_description><![CDATA[git常用技巧以及对应的日常生产问题的解决方案]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>36</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mysql]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6]]></wp:term_parent>
		<wp:term_name><![CDATA[MySQL]]></wp:term_name>
	</wp:term>
		<wp:term>
		<wp:term_id>38</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[erchashu]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[二叉树]]></wp:term_name>
		<wp:term_description><![CDATA[二叉树算法经验合集，包含题解总结]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>30</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[shuangzhizheng]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[双指针]]></wp:term_name>
		<wp:term_description><![CDATA[双指针相关的技巧]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>24</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hash]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[哈希表]]></wp:term_name>
		<wp:term_description><![CDATA[当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。
但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找]]></wp:term_description>
	</wp:term>
		<wp:term>
		<wp:term_id>39</wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[shuzu]]></wp:term_slug>
		<wp:term_parent><![CDATA[%e7%ae%97%e6%b3%95]]></wp:term_parent>
		<wp:term_name><![CDATA[数组]]></wp:term_name>
		<wp:term_description><![CDATA[ 数组相关联的算法问题]]></wp:term_description>
	</wp:term>
			<wp:term><wp:term_id>22</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[%e4%b8%bb%e9%a1%b5]]></wp:term_slug><wp:term_name><![CDATA[主页]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=6.5.3</generator>

<image>
	<url>http://www.xiaomurui.cn/wp-content/uploads/2023/12/cropped-logo-32x32.jpg</url>
	<title>小木蕊</title>
	<link>https://www.xiaomurui.cn</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title><![CDATA[53796877_p0]]></title>
		<link>https://www.xiaomurui.cn/53796877_p0/</link>
		<pubDate>Thu, 30 Nov 2023 05:53:19 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/11/53796877_p0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date><![CDATA[2023-11-30 13:53:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-11-30 05:53:19]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-11-30 13:53:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-11-30 05:53:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[53796877_p0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/11/53796877_p0.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/11/53796877_p0.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:717;s:6:"height";i:1000;s:4:"file";s:23:"2023/11/53796877_p0.png";s:8:"filesize";i:574738;s:5:"sizes";a:3:{s:6:"medium";a:5:{s:4:"file";s:23:"53796877_p0-215x300.png";s:5:"width";i:215;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:80504;}s:9:"thumbnail";a:5:{s:4:"file";s:23:"53796877_p0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:35605;}s:14:"post-thumbnail";a:5:{s:4:"file";s:23:"53796877_p0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:35605;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[bg1]]></title>
		<link>https://www.xiaomurui.cn/bg1/</link>
		<pubDate>Sat, 02 Dec 2023 06:30:37 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/bg1.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date><![CDATA[2023-12-02 14:30:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-02 06:30:37]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-02 14:30:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-02 06:30:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bg1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/bg1.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/bg1.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:2560;s:4:"file";s:16:"2023/12/bg1.webp";s:8:"filesize";i:490374;s:5:"sizes";a:7:{s:6:"medium";a:5:{s:4:"file";s:16:"bg1-225x300.webp";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:16496;}s:5:"large";a:5:{s:4:"file";s:17:"bg1-768x1024.webp";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:109902;}s:9:"thumbnail";a:5:{s:4:"file";s:16:"bg1-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:7236;}s:12:"medium_large";a:5:{s:4:"file";s:17:"bg1-768x1024.webp";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:109902;}s:9:"1536x1536";a:5:{s:4:"file";s:18:"bg1-1152x1536.webp";s:5:"width";i:1152;s:6:"height";i:1536;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:211618;}s:9:"2048x2048";a:5:{s:4:"file";s:18:"bg1-1536x2048.webp";s:5:"width";i:1536;s:6:"height";i:2048;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:338666;}s:14:"post-thumbnail";a:5:{s:4:"file";s:16:"bg1-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:7236;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[bg2]]></title>
		<link>https://www.xiaomurui.cn/bg2/</link>
		<pubDate>Sat, 02 Dec 2023 06:40:46 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/bg2.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date><![CDATA[2023-12-02 14:40:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-02 06:40:46]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-02 14:40:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-02 06:40:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[bg2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/bg2.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/bg2.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:836;s:6:"height";i:1243;s:4:"file";s:16:"2023/12/bg2.webp";s:8:"filesize";i:95774;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:16:"bg2-202x300.webp";s:5:"width";i:202;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:17870;}s:5:"large";a:5:{s:4:"file";s:17:"bg2-689x1024.webp";s:5:"width";i:689;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:87926;}s:9:"thumbnail";a:5:{s:4:"file";s:16:"bg2-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:8726;}s:12:"medium_large";a:5:{s:4:"file";s:17:"bg2-768x1142.webp";s:5:"width";i:768;s:6:"height";i:1142;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:99584;}s:14:"post-thumbnail";a:5:{s:4:"file";s:16:"bg2-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:8726;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203121342269]]></title>
		<link>https://www.xiaomurui.cn/image-20231203121342269/</link>
		<pubDate>Sun, 03 Dec 2023 04:53:42 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121342269.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:53:42]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:53:42]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203121342269]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121342269.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203121342269.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:370;s:6:"height";i:328;s:4:"file";s:35:"2023/12/image-20231203121342269.png";s:8:"filesize";i:21785;s:5:"sizes";a:3:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203121342269-300x266.png";s:5:"width";i:300;s:6:"height";i:266;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:21418;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203121342269-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7683;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203121342269-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7683;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203121752679]]></title>
		<link>https://www.xiaomurui.cn/image-20231203121752679/</link>
		<pubDate>Sun, 03 Dec 2023 04:53:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121752679.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:53:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:53:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203121752679]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121752679.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203121752679.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1314;s:6:"height";i:733;s:4:"file";s:35:"2023/12/image-20231203121752679.png";s:8:"filesize";i:112727;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203121752679-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:14917;}s:5:"large";a:5:{s:4:"file";s:36:"image-20231203121752679-1024x571.png";s:5:"width";i:1024;s:6:"height";i:571;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:123311;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203121752679-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:8291;}s:12:"medium_large";a:5:{s:4:"file";s:35:"image-20231203121752679-768x428.png";s:5:"width";i:768;s:6:"height";i:428;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:75327;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203121752679-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:8291;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203122531193]]></title>
		<link>https://www.xiaomurui.cn/?attachment_id=53</link>
		<pubDate>Sun, 03 Dec 2023 04:53:45 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122531193.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:57:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:57:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203122531193]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>59</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122531193.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203122531193.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1314;s:6:"height";i:733;s:4:"file";s:35:"2023/12/image-20231203122531193.png";s:8:"filesize";i:112727;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203122531193-300x167.png";s:5:"width";i:300;s:6:"height";i:167;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:14917;}s:5:"large";a:5:{s:4:"file";s:36:"image-20231203122531193-1024x571.png";s:5:"width";i:1024;s:6:"height";i:571;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:123311;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203122531193-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:8291;}s:12:"medium_large";a:5:{s:4:"file";s:35:"image-20231203122531193-768x428.png";s:5:"width";i:768;s:6:"height";i:428;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:75327;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203122531193-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:8291;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203122708399]]></title>
		<link>https://www.xiaomurui.cn/image-20231203122708399/</link>
		<pubDate>Sun, 03 Dec 2023 04:53:47 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122708399.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:53:47]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:53:47]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203122708399]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122708399.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203122708399.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1644;s:6:"height";i:198;s:4:"file";s:35:"2023/12/image-20231203122708399.png";s:8:"filesize";i:29849;s:5:"sizes";a:6:{s:6:"medium";a:5:{s:4:"file";s:34:"image-20231203122708399-300x36.png";s:5:"width";i:300;s:6:"height";i:36;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:3502;}s:5:"large";a:5:{s:4:"file";s:36:"image-20231203122708399-1024x123.png";s:5:"width";i:1024;s:6:"height";i:123;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:24457;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203122708399-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:5243;}s:12:"medium_large";a:5:{s:4:"file";s:34:"image-20231203122708399-768x92.png";s:5:"width";i:768;s:6:"height";i:92;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:15342;}s:9:"1536x1536";a:5:{s:4:"file";s:36:"image-20231203122708399-1536x185.png";s:5:"width";i:1536;s:6:"height";i:185;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:45119;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203122708399-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:5243;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203122951597]]></title>
		<link>https://www.xiaomurui.cn/image-20231203122951597/</link>
		<pubDate>Sun, 03 Dec 2023 04:53:52 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122951597.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:53:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:53:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203122951597]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122951597.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203122951597.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1170;s:6:"height";i:758;s:4:"file";s:35:"2023/12/image-20231203122951597.png";s:8:"filesize";i:641583;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203122951597-300x194.png";s:5:"width";i:300;s:6:"height";i:194;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:51734;}s:5:"large";a:5:{s:4:"file";s:36:"image-20231203122951597-1024x663.png";s:5:"width";i:1024;s:6:"height";i:663;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:530254;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203122951597-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:29753;}s:12:"medium_large";a:5:{s:4:"file";s:35:"image-20231203122951597-768x498.png";s:5:"width";i:768;s:6:"height";i:498;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:308147;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203122951597-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:29753;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203123042822]]></title>
		<link>https://www.xiaomurui.cn/image-20231203123042822/</link>
		<pubDate>Sun, 03 Dec 2023 04:53:57 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123042822.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:53:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:53:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203123042822]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123042822.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203123042822.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1534;s:6:"height";i:545;s:4:"file";s:35:"2023/12/image-20231203123042822.png";s:8:"filesize";i:73711;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203123042822-300x107.png";s:5:"width";i:300;s:6:"height";i:107;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:6092;}s:5:"large";a:5:{s:4:"file";s:36:"image-20231203123042822-1024x364.png";s:5:"width";i:1024;s:6:"height";i:364;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:48308;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203123042822-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7192;}s:12:"medium_large";a:5:{s:4:"file";s:35:"image-20231203123042822-768x273.png";s:5:"width";i:768;s:6:"height";i:273;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:29410;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203123042822-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7192;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203123110194]]></title>
		<link>https://www.xiaomurui.cn/image-20231203123110194/</link>
		<pubDate>Sun, 03 Dec 2023 04:53:58 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123110194.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:53:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:53:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:53:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:53:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203123110194]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123110194.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203123110194.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1458;s:6:"height";i:564;s:4:"file";s:35:"2023/12/image-20231203123110194.png";s:8:"filesize";i:86570;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203123110194-300x116.png";s:5:"width";i:300;s:6:"height";i:116;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7338;}s:5:"large";a:5:{s:4:"file";s:36:"image-20231203123110194-1024x396.png";s:5:"width";i:1024;s:6:"height";i:396;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:61301;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203123110194-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7968;}s:12:"medium_large";a:5:{s:4:"file";s:35:"image-20231203123110194-768x297.png";s:5:"width";i:768;s:6:"height";i:297;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:37543;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203123110194-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:7968;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[image-20231203123703457]]></title>
		<link>https://www.xiaomurui.cn/image-20231203123703457/</link>
		<pubDate>Sun, 03 Dec 2023 04:54:02 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123703457.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date><![CDATA[2023-12-03 12:54:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-03 04:54:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-03 12:54:02]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-03 04:54:02]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[image-20231203123703457]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123703457.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/image-20231203123703457.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:718;s:6:"height";i:629;s:4:"file";s:35:"2023/12/image-20231203123703457.png";s:8:"filesize";i:71558;s:5:"sizes";a:3:{s:6:"medium";a:5:{s:4:"file";s:35:"image-20231203123703457-300x263.png";s:5:"width";i:300;s:6:"height";i:263;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:27819;}s:9:"thumbnail";a:5:{s:4:"file";s:35:"image-20231203123703457-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:10483;}s:14:"post-thumbnail";a:5:{s:4:"file";s:35:"image-20231203123703457-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:10483;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[head]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/06/63/head/</link>
		<pubDate>Wed, 06 Dec 2023 12:00:51 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/head.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date><![CDATA[2023-12-06 20:00:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-06 12:00:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-06 20:00:51]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-06 12:00:51]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[head]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>63</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/head.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/head.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:963;s:6:"height";i:778;s:4:"file";s:16:"2023/12/head.png";s:8:"filesize";i:926534;s:5:"sizes";a:4:{s:6:"medium";a:5:{s:4:"file";s:16:"head-300x242.png";s:5:"width";i:300;s:6:"height";i:242;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:113176;}s:9:"thumbnail";a:5:{s:4:"file";s:16:"head-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:39219;}s:12:"medium_large";a:5:{s:4:"file";s:16:"head-768x620.png";s:5:"width";i:768;s:6:"height";i:620;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:634753;}s:14:"post-thumbnail";a:5:{s:4:"file";s:16:"head-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:39219;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[logo]]></title>
		<link>https://www.xiaomurui.cn/logo/</link>
		<pubDate>Tue, 19 Dec 2023 01:13:16 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/logo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date><![CDATA[2023-12-19 09:13:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-19 01:13:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-19 09:13:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-19 01:13:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[logo]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/logo.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/logo.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:670;s:6:"height";i:501;s:4:"file";s:16:"2023/12/logo.jpg";s:8:"filesize";i:46173;s:5:"sizes";a:3:{s:6:"medium";a:5:{s:4:"file";s:16:"logo-300x224.jpg";s:5:"width";i:300;s:6:"height";i:224;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:6184;}s:9:"thumbnail";a:5:{s:4:"file";s:16:"logo-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:3491;}s:14:"post-thumbnail";a:5:{s:4:"file";s:16:"logo-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:3491;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[logo2]]></title>
		<link>https://www.xiaomurui.cn/logo2/</link>
		<pubDate>Tue, 19 Dec 2023 01:18:49 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/logo2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2023-12-19 09:18:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-19 01:18:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-19 09:18:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-19 01:18:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[logo2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/logo2.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/logo2.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:42;s:6:"height";i:42;s:4:"file";s:17:"2023/12/logo2.jpg";s:8:"filesize";i:4901;s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[89217834_p0]]></title>
		<link>https://www.xiaomurui.cn/89217834_p0/</link>
		<pubDate>Thu, 21 Dec 2023 09:21:34 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/89217834_p0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date><![CDATA[2023-12-21 17:21:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-21 09:21:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-21 17:21:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-21 09:21:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[89217834_p0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/89217834_p0.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/89217834_p0.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:3000;s:6:"height";i:4000;s:4:"file";s:23:"2023/12/89217834_p0.png";s:8:"filesize";i:25969479;s:5:"sizes";a:7:{s:6:"medium";a:5:{s:4:"file";s:23:"89217834_p0-225x300.png";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:126764;}s:5:"large";a:5:{s:4:"file";s:24:"89217834_p0-768x1024.png";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:1357992;}s:9:"thumbnail";a:5:{s:4:"file";s:23:"89217834_p0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:47277;}s:12:"medium_large";a:5:{s:4:"file";s:24:"89217834_p0-768x1024.png";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:1357992;}s:9:"1536x1536";a:5:{s:4:"file";s:25:"89217834_p0-1152x1536.png";s:5:"width";i:1152;s:6:"height";i:1536;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:3098449;}s:9:"2048x2048";a:5:{s:4:"file";s:25:"89217834_p0-1536x2048.png";s:5:"width";i:1536;s:6:"height";i:2048;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:5586961;}s:14:"post-thumbnail";a:5:{s:4:"file";s:23:"89217834_p0-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:47277;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[wp_editor_md_927b7cc23bd11516f076c22668443281]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/02/27/138/wp_editor_md_927b7cc23bd11516f076c22668443281/</link>
		<pubDate>Sun, 24 Dec 2023 14:15:33 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/wp_editor_md_927b7cc23bd11516f076c22668443281-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date><![CDATA[2023-12-24 22:15:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-24 14:15:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-24 22:15:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-24 14:15:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[wp_editor_md_927b7cc23bd11516f076c22668443281]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>138</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/wp_editor_md_927b7cc23bd11516f076c22668443281-1.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/wp_editor_md_927b7cc23bd11516f076c22668443281-1.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:180;s:6:"height";i:64;s:4:"file";s:59:"2023/12/wp_editor_md_927b7cc23bd11516f076c22668443281-1.jpg";s:8:"filesize";i:2095;s:5:"sizes";a:2:{s:9:"thumbnail";a:5:{s:4:"file";s:58:"wp_editor_md_927b7cc23bd11516f076c22668443281-1-150x64.jpg";s:5:"width";i:150;s:6:"height";i:64;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:2730;}s:14:"post-thumbnail";a:5:{s:4:"file";s:58:"wp_editor_md_927b7cc23bd11516f076c22668443281-1-150x64.jpg";s:5:"width";i:150;s:6:"height";i:64;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:2730;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[head1]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/07/235/head1/</link>
		<pubDate>Thu, 07 Mar 2024 07:56:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/head1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date><![CDATA[2024-03-07 15:56:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-07 07:56:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-07 15:56:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-07 07:56:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[head1]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>235</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/head1.png]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/head1.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:1024;s:4:"file";s:17:"2024/03/head1.png";s:8:"filesize";i:923359;s:5:"sizes";a:4:{s:6:"medium";a:5:{s:4:"file";s:17:"head1-300x300.png";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:102577;}s:9:"thumbnail";a:5:{s:4:"file";s:17:"head1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:29410;}s:12:"medium_large";a:5:{s:4:"file";s:17:"head1-768x768.png";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:592482;}s:14:"post-thumbnail";a:5:{s:4:"file";s:17:"head1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";s:8:"filesize";i:29410;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[img-Hxtzq4Q9o4qtDsOgN8sjq]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/17/240/img-hxtzq4q9o4qtdsogn8sjq/</link>
		<pubDate>Mon, 18 Mar 2024 14:10:21 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/img-Hxtzq4Q9o4qtDsOgN8sjq.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date><![CDATA[2024-03-18 22:10:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-18 14:10:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-18 22:10:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-18 14:10:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[img-hxtzq4q9o4qtdsogn8sjq]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>240</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/img-Hxtzq4Q9o4qtDsOgN8sjq.jpeg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/img-Hxtzq4Q9o4qtDsOgN8sjq.jpeg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1024;s:6:"height";i:1024;s:4:"file";s:38:"2024/03/img-Hxtzq4Q9o4qtDsOgN8sjq.jpeg";s:8:"filesize";i:148419;s:5:"sizes";a:4:{s:6:"medium";a:5:{s:4:"file";s:38:"img-Hxtzq4Q9o4qtDsOgN8sjq-300x300.jpeg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:27216;}s:9:"thumbnail";a:5:{s:4:"file";s:38:"img-Hxtzq4Q9o4qtDsOgN8sjq-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:8731;}s:12:"medium_large";a:5:{s:4:"file";s:38:"img-Hxtzq4Q9o4qtDsOgN8sjq-768x768.jpeg";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:116963;}s:14:"post-thumbnail";a:5:{s:4:"file";s:38:"img-Hxtzq4Q9o4qtDsOgN8sjq-150x150.jpeg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:8731;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[46718715_p0]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/19/251/46718715_p0/</link>
		<pubDate>Tue, 19 Mar 2024 14:11:59 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/46718715_p0.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date><![CDATA[2024-03-19 22:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-19 14:11:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-19 22:11:59]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-19 14:11:59]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[46718715_p0]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/46718715_p0.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/46718715_p0.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1500;s:6:"height";i:2000;s:4:"file";s:24:"2024/03/46718715_p0.webp";s:8:"filesize";i:101982;s:5:"sizes";a:6:{s:6:"medium";a:5:{s:4:"file";s:24:"46718715_p0-225x300.webp";s:5:"width";i:225;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:13778;}s:5:"large";a:5:{s:4:"file";s:25:"46718715_p0-768x1024.webp";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:60370;}s:9:"thumbnail";a:5:{s:4:"file";s:24:"46718715_p0-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:6426;}s:12:"medium_large";a:5:{s:4:"file";s:25:"46718715_p0-768x1024.webp";s:5:"width";i:768;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:60370;}s:9:"1536x1536";a:5:{s:4:"file";s:26:"46718715_p0-1152x1536.webp";s:5:"width";i:1152;s:6:"height";i:1536;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:93114;}s:14:"post-thumbnail";a:5:{s:4:"file";s:24:"46718715_p0-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:6426;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2024-3-23]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/23/255/2024-3-23/</link>
		<pubDate>Sat, 23 Mar 2024 15:07:16 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/2024-3-23.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2024-03-23 23:07:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-23 15:07:16]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-23 23:07:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-23 15:07:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[2024-3-23]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>255</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/2024-3-23.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/2024-3-23.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:778;s:6:"height";i:1200;s:4:"file";s:22:"2024/03/2024-3-23.webp";s:8:"filesize";i:44670;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:22:"2024-3-23-195x300.webp";s:5:"width";i:195;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:9144;}s:5:"large";a:5:{s:4:"file";s:23:"2024-3-23-664x1024.webp";s:5:"width";i:664;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:44138;}s:9:"thumbnail";a:5:{s:4:"file";s:22:"2024-3-23-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:5578;}s:12:"medium_large";a:5:{s:4:"file";s:23:"2024-3-23-768x1185.webp";s:5:"width";i:768;s:6:"height";i:1185;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:52686;}s:14:"post-thumbnail";a:5:{s:4:"file";s:22:"2024-3-23-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:5578;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[隐私政策]]></title>
		<link>https://www.xiaomurui.cn/?page_id=3</link>
		<pubDate>Thu, 23 Nov 2023 09:24:33 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/?page_id=3</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading --><h2>我们是谁</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>我们的站点地址是：http://www.xiaomurui.cn。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>评论</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>由您的电子邮箱地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>媒体</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Cookies</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>如果您在我们的站点上留下评论，您可以选择用cookies保存您的名字、电子邮箱地址和网站地址。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您注销登陆了您的账户，用于登录的cookies将会被移除。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>来自其他网站的嵌入内容</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>此站点上的文章可能会包含嵌入的内容（如视频、图片、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们与谁共享您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>若您请求重置密码，您的IP地址将包含于密码重置邮件中。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们保留多久您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您对您的信息有什么权利</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您的数据将发送到何处</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class="privacy-policy-tutorial">推荐的文本： </strong>访客评论可能会被自动垃圾评论监测服务检查。</p><!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date><![CDATA[2023-11-23 17:24:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-11-23 09:24:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-11-23 17:24:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-11-23 09:24:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[privacy-policy]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[MyBatiesPlus分页插件使用注意事项]]></title>
		<link>https://www.xiaomurui.cn/?p=27</link>
		<pubDate>Thu, 30 Nov 2023 06:18:01 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>MybtisPlus 分页插件使用及注意实现</h4>

<h6>1.原理</h6>

分页插件的原理是在 sql语句后追加<code>limit</code>关键字自动帮我们自动计算好分页的大小和每页的数据，<strong>不能在sql语句后加;</strong>号

<h6>2.使用方法</h6>

<ol>
<li>准备IPage分页实体类

<pre><code class="language-java line-numbers">IPage<Map> page = new Page<>();
</code></pre>

Page的构造方法如下：

<pre><code class="language-java line-numbers">  public Page() {
        this.records = Collections.emptyList();
        this.total = 0L;
        this.size = 10L;
        this.current = 1L;
        this.orders = new ArrayList();
        this.optimizeCountSql = true;
        this.searchCount = true;
        this.optimizeJoinOfCountSql = true;
    }
</code></pre>

当然可以我们自定义传入一些参数比较常见的有<code>current：当前查询页数size：每页的大小</code>这里会有一个很大的坑，当我们使用这个构造函数时

<pre><code class="language-java line-numbers"> public Page(long current, long size) {
        this(current, size, 0L);
    }
</code></pre>

如果将参数传错的话会造成接收到的数据为空或者传的<strong>测试接口的时候</strong></p></li>
</ol>

​   直接使用size 为0的话就会造成 <code>recodes=[]</code>情况

<ol start="2">
<li>编写mapper的方法，编写sql语句

在这一步要注意一个问题一般来讲我们会使用一个Map来接收查询的数据

<strong>mapper方法</strong>

<pre><code class="language-java line-numbers">IPage<Map> selectAllUserPageMap(IPage<Map> page, @Param("recoderVo") RecoderVo recoderVo);
</code></pre>

<strong>mapper.xml</strong>

</li>
</ol>

<pre><code class="language-api line-numbers"><select id="selectAllUserPageMap" resultType="map">
            select u.name, u.phone,r.type
            from t_recodr_from as r
            left join t_user as u on r.user = u.id
            <where>
                <if test="recoderVo.user!=null">
                    and r.user = #{recoderVo.user}
                </if>

                <if test="recoderVo.department !=null">
                    and u.department = #{recoderVo.department}
                </if>

                <if test="recoderVo.selectTimeStart != null">
                    and r.in_time > #{recoderVo.selectTimeStart}
                </if>

    <!--            <if test="selectTimeEnd != null">-->
    <!--                and r.out_time < #{selectTimeEnd}-->
    <!--            </if>-->
            </where>
        </select>
</code></pre>

<ol start="3">
<li><p>接收数据

我们在取数据时直接在page对象上读取即可

<pre><code class="language-java line-numbers">HashMap<String, Object> pageInfo = new HashMap<>();
pageInfo.put("pageData",page.getRecords());
pageInfo.put("pageNum",page.getCurrent());
pageInfo.put("pageSize",page.getSize());
pageInfo.put("totalPage",page.getPages());
pageInfo.put("totalSize",page.getTotal());
HashMap<String, Object> pageInfoMap = new HashMap<>();
pageInfoMap.put("pageInfo",pageInfo);
</code></pre></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date><![CDATA[2023-11-30 14:18:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-11-30 06:18:01]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mybatiesplus%e5%88%86%e9%a1%b5%e6%8f%92%e4%bb%b6%e4%bd%bf%e7%94%a8%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e9%81%bf%e5%9d%91%e6%8c%87%e5%8d%97"><![CDATA[避坑指南]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Vue 路由]]></title>
		<link>https://www.xiaomurui.cn/?p=39</link>
		<pubDate>Sat, 02 Dec 2023 07:01:59 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>路由</h2>

<ol>
<li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li>
<li>前端路由：key是路径，value是组件。</li>
</ol>

<h3>1.基本使用</h3>

<ol>
<li>安装vue-router，命令：
```npm i vue-router```
</p></li>
<li>应用插件：
```Vue.use(VueRouter)```
</p></li>
<li>编写router配置项:

<pre><code class="language-js line-numbers">//引入VueRouter
import VueRouter from 'vue-router'
//引入Luyou 组件
import About from '../components/About'
import Home from '../components/Home'

//创建router实例对象，去管理一组一组的路由规则
const router = new VueRouter({
    routes:[
        {
            path:'/about',
            component:About
        },
        {
            path:'/home',
            component:Home
        }
    ]
})

//暴露router
export default router
</code></pre></li>
<li>实现切换（active-class可配置高亮样式）

<pre><code class="language-vue line-numbers"><router-link active-class="active" to="/about">About</router-link>
</code></pre></li>
<li>指定展示位置

<pre><code class="language-vue line-numbers"><router-view></router-view>
</code></pre></li>
</ol>

<h3>2.几个注意点</h3>

<ol>
<li>路由组件通常存放在
```pages```文件夹，一般组件通常存放在```components```文件夹。
</li>
<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>
<li>每个组件都有自己的
```$route```属性，里面存储着自己的路由信息。
</li>
<li>整个应用只有一个router，可以通过组件的
```$router```属性获取到。
</li>
</ol>

<h3>3.多级路由（多级路由）</h3>

<ol>
<li>配置路由规则，使用children配置项：

<pre><code class="language-js line-numbers">routes:[
    {
        path:'/about',
        component:About,
    },
    {
        path:'/home',
        component:Home,
        children:[ //通过children配置子级路由
            {
                path:'news', //此处一定不要写：/news
                component:News
            },
            {
                path:'message',//此处一定不要写：/message
                component:Message
            }
        ]
    }
]
</code></pre></li>
<li>跳转（要写完整路径）：

<pre><code class="language-vue line-numbers"><router-link to="/home/news">News</router-link>
</code></pre></li>
</ol>

<h3>4.路由的query参数</h3>

<ol>
<li>传递参数

<pre><code class="language-vue line-numbers"><!-- 跳转并携带query参数，to的字符串写法 -->
<router-link :to="/home/message/detail?id=666&title=你好">跳转</router-link>

<!-- 跳转并携带query参数，to的对象写法 -->
<router-link 
    :to="{
        path:'/home/message/detail',
        query:{
           id:666,
            title:'你好'
        }
    }"
>跳转</router-link>
</code></pre></li>
<li>接收参数：

<pre><code class="language-js line-numbers">$route.query.id
$route.query.title
</code></pre></li>
</ol>

<h3>5.命名路由</h3>

<ol>
<li>作用：可以简化路由的跳转。</p></li>
<li><p>如何使用

<ol>
<li>给路由命名：

<pre><code class="language-js line-numbers">{
    path:'/demo',
    component:Demo,
    children:[
        {
            path:'test',
            component:Test,
            children:[
                {
                      name:'hello' //给路由命名
                    path:'welcome',
                    component:Hello,
                }
            ]
        }
    ]
}
</code></pre></li>
<li>简化跳转：

<pre><code class="language-vue line-numbers"><!--简化前，需要写完整的路径 -->
<router-link to="/demo/test/welcome">跳转</router-link>

<!--简化后，直接通过名字跳转 -->
<router-link :to="{name:'hello'}">跳转</router-link>

<!--简化写法配合传递参数 -->
<router-link 
    :to="{
        name:'hello',
        query:{
           id:666,
            title:'你好'
        }
    }"
>跳转</router-link>
</code></pre></li>
</ol></li>
</ol>

<h3>6.路由的params参数</h3>

<ol>
<li>配置路由，声明接收params参数

<pre><code class="language-js line-numbers">{
    path:'/home',
    component:Home,
    children:[
        {
            path:'news',
            component:News
        },
        {
            component:Message,
            children:[
                {
                    name:'xiangqing',
                    path:'detail/:id/:title', //使用占位符声明接收params参数
                    component:Detail
                }
            ]
        }
    ]
}
</code></pre></li>
<li>传递参数

<pre><code class="language-vue line-numbers"><!-- 跳转并携带params参数，to的字符串写法 -->
<router-link :to="/home/message/detail/666/你好">跳转</router-link>

<!-- 跳转并携带params参数，to的对象写法 -->
<router-link 
    :to="{
        name:'xiangqing',
        params:{
           id:666,
            title:'你好'
        }
    }"
>跳转</router-link>
</code></pre>

<blockquote>
  特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！
</blockquote></li>
<li>接收参数：

<pre><code class="language-js line-numbers">$route.params.id
$route.params.title
</code></pre></li>
</ol>

<h3>7.路由的props配置</h3>

<p>​   作用：让路由组件更方便的收到参数

<pre><code class="language-js line-numbers">{
    name:'xiangqing',
    path:'detail/:id',
    component:Detail,

    //第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件
    // props:{a:900}

    //第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件
    // props:true

    //第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件
    props(route){
        return {
            id:route.query.id,
            title:route.query.title
        }
    }
}
</code></pre>

<h3>8.
```<router-link>```的replace属性
</h3>

<ol>
<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>
<li>浏览器的历史记录有两种写入方式：分别为
```push```和```replace```，```push```是追加历史记录，```replace```是替换当前记录。路由跳转时候默认为```push```
</li>
<li>如何开启
```replace```模式：```<router-link replace .......>News</router-link>```
</li>
</ol>

<h3>9.编程式路由导航</h3>

<ol>
<li>作用：不借助
```<router-link> ```实现路由跳转，让路由跳转更加灵活


</li>
<li>具体编码：

<pre><code class="language-js line-numbers">//$router的两个API
this.$router.push({
    name:'xiangqing',
        params:{
            id:xxx,
            title:xxx
        }
})

this.$router.replace({
    name:'xiangqing',
        params:{
            id:xxx,
            title:xxx
        }
})
this.$router.forward() //前进
this.$router.back() //后退
this.$router.go() //可前进也可后退
</code></pre>

</li>
</ol>

<h3>10.缓存路由组件</h3>

<ol>
<li>作用：让不展示的路由组件保持挂载，不被销毁。</p></li>
<li>具体编码：

<pre><code class="language-vue line-numbers"><keep-alive include="News"> 
    <router-view></router-view>
</keep-alive>
</code></pre></li>
</ol>

<h3>11.两个新的生命周期钩子</h3>

<ol>
<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>
<li>具体名字：

<ol>
<li>
```activated```路由组件被激活时触发。
</li>
<li>
```deactivated```路由组件失活时触发。
</li>
</ol></li>
</ol>

<h3>12.路由守卫</h3>

<ol>
<li>作用：对路由进行权限控制</p></li>
<li><p>分类：全局守卫、独享守卫、组件内守卫</p></li>
<li><p>全局守卫:

<pre><code class="language-js line-numbers">//全局前置守卫：初始化时执行、每次路由切换前执行
router.beforeEach((to,from,next)=>{
    console.log('beforeEach',to,from)
    if(to.meta.isAuth){ //判断当前路由是否需要进行权限控制
        if(localStorage.getItem('school') === 'atguigu'){ //权限控制的具体规则
            next() //放行
        }else{
            alert('暂无权限查看')
            // next({name:'guanyu'})
        }
    }else{
        next() //放行
    }
})

//全局后置守卫：初始化时执行、每次路由切换后执行
router.afterEach((to,from)=>{
    console.log('afterEach',to,from)
    if(to.meta.title){ 
        document.title = to.meta.title //修改网页的title
    }else{
        document.title = 'vue_test'
    }
})
</code></pre></li>
<li>独享守卫:

<pre><code class="language-js line-numbers">beforeEnter(to,from,next){
    console.log('beforeEnter',to,from)
    if(to.meta.isAuth){ //判断当前路由是否需要进行权限控制
        if(localStorage.getItem('school') === 'atguigu'){
            next()
        }else{
            alert('暂无权限查看')
            // next({name:'guanyu'})
        }
    }else{
        next()
    }
}
</code></pre></li>
<li>组件内守卫：

<pre><code class="language-js line-numbers">//进入守卫：通过路由规则，进入该组件时被调用
beforeRouteEnter (to, from, next) {
},
//离开守卫：通过路由规则，离开该组件时被调用
beforeRouteLeave (to, from, next) {
}
</code></pre></li>
</ol>

<h3>13.路由器的两种工作模式</h3>

<ol>
<li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li>
<li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li>
<li>hash模式：

<ol>
<li>地址中永远带着#号，不美观 。</li>
<li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li>
<li>兼容性较好。</li>
</ol></li>
<li>history模式：

<ol>
<li>地址干净，美观 。</li>
<li>兼容性和hash模式相比略差。</li>
<li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li>
</ol></li>
</ol>

<p>​]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date><![CDATA[2023-12-02 15:01:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-02 07:01:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[router]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="vue"><![CDATA[vue]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e6%95%99%e7%a8%8b"><![CDATA[教程]]></category>
		<category domain="post_tag" nicename="%e8%b7%af%e7%94%b1"><![CDATA[路由]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[vue-%e8%b7%af%e7%94%b1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[props数据传递]]></title>
		<link>https://www.xiaomurui.cn/?p=69</link>
		<pubDate>Sun, 10 Dec 2023 11:39:52 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>🌏问题Bug解决与技巧分享</strong></h3>

<blockquote>
  作者 小木蕊      创建于 2023年12月10日    最后一次修改 2023年12月10日
</blockquote>

<strong>component与page联系与区别</strong>

<ol>
<li>component是组件不需要注册路由，而page是页面需要注册路由</li>
<li>page由若干个component组成</p></li>
<li>component的拆分一般按照功能点来拆分，一个功能点对应一个组件<code>component</code>,从而实现了代码的复用，page一般不具备复用的情况</p></li>
</ol>

<strong>🚩组件的通信方式</strong>

<strong>props</strong> 适用于 父组件向<sup id="fnref-69-亲儿子组件"><a href="#fn-69-亲儿子组件" class="footnote-ref" role="doc-noteref">1</a></sup>发送数据，只做一层数据传递，多层传递很麻烦不推荐

使用方法：

父组件：直接 :需要传递的数据

<pre><code class="language-vue line-numbers"><template>
    <div>
                <!-- 直接 :需要传递的数据 -->
        <Student name="李四" sex="女" :age="18"/>
    </div>
</template>

<script>
    import Student from './components/Student'

    export default {
        name:'App',
        components:{Student}
    }
</script>

</code></pre>

子组件：直接声明<code>props</code>后直接当作自己的数据使用

<pre><code class="language-vue line-numbers"><template>
    <div>
        <h1>{{msg}}</h1>
        <h2>学生姓名：{{name}}</h2>
        <h2>学生性别：{{sex}}</h2>
        <h2>学生年龄：{{myAge+1}}</h2>
        <button @click="updateAge">尝试修改收到的年龄</button>
    </div>
</template>

<script>
    export default {
        name:'Student',
        data() {
            console.log(this)
            return {
                msg:'我是一个尚硅谷的学生',
                myAge:this.age
            }
        },
        methods: {
            updateAge(){
                this.myAge++
            }
        },
        //简单声明接收
        // props:['name','age','sex'] 

        //接收的同时对数据进行类型限制
        /* props:{
            name:String,
            age:Number,
            sex:String
        } */

        //接收的同时对数据：进行类型限制+默认值的指定+必要性的限制
        props:{
            name:{
                type:String, //name的类型是字符串
                required:true, //name是必要的
            },
            age:{
                type:Number,
                default:99 //默认值
            },
            sex:{
                type:String,
                required:true
            }
        }
    }
</script>
</code></pre>

<div class="footnotes" role="doc-endnotes">
<hr />
<ol>

<li id="fn-69-亲儿子组件" role="doc-endnote">
直接后代直接的子组件，不存在间接关系&#160;<a href="#fnref-69-亲儿子组件" class="footnote-backref" role="doc-backlink">&#8617;&#xFE0E;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2023-12-10 19:39:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-10 11:39:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[props%e6%95%b0%e6%8d%ae%e4%bc%a0%e9%80%92]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="component"><![CDATA[component]]></category>
		<category domain="post_tag" nicename="vue"><![CDATA[vue]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e6%b6%88%e6%81%af%e4%bc%a0%e9%80%92"><![CDATA[消息传递]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[69]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[从列表页到详情页思路分析]]></title>
		<link>https://www.xiaomurui.cn/?p=77</link>
		<pubDate>Mon, 11 Dec 2023 12:30:29 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>🧀 从列表页到详情页思路分析</strong></h3>

<blockquote>
  作者：小木蕊 2023年12月11日
</blockquote>

<strong>🍔使用场景：</strong>  从列表页到详情页很常见如，

<ul>
<li>查询出所有的用户名单后点击用户的信息来到个人信息主页</li>
<li>点开文章链接来到文章详情页</li>
</ul>

<strong>下面统一用文章模型来指代</strong>

当前页面(列表页)已经缓存了文章列表的所有文章信息，一般只展示一部分信息，如文章标题和简介，首先抛出第一个需要解决的问题，点击某一个文章时需要知道点击的是哪一篇文章，这样有了唯一的标识才可以准确的跳转。最好在点击时获取到文章的id(数据库中真实的)。

在获取到唯一的id后要考虑怎么把根据这个Id跳转，文章详情页有两种选择

<ol>
<li>每次都是根据传入的文章id动态的向后端请求拿到需要展示的文章</li>
<li>不接收任何参数，每次都到 <code>sessionStorage</code>或者其他全局能够存储且访问得到的地方去区文章详情页</li>
</ol>

如果是第一种那么在任何想要通过文章标题跳转到详情页的时候将id传入即可如

<pre><code class="language-js line-numbers">this.$router.push(
    name:"articlePage",
    params:{
    id:articleId
    }
)
</code></pre>

而文章详情页就根据id发送<code>Ajax</code>请求即可

如果是第二种，这每次需要跳转的地方发送 <code>ajax请求</code>，并且将其存储到<code>sessionStroge</code>

<pre><code class="language-js line-numbers">  axios.post("/article/article", {
        id: row.articleId
      }).then((response) => {
        if (response.status === 200) {
          sessionStorage.setItem("article", JSON.stringify((response.data.data.article)))
          this.$router.push("/articleItemPage")
        }
      })
    }
</code></pre>

所以在设计详情页的时候需要考虑好，在接收的时候不推荐使用 props通信，原因如下：在列表页到详情页(一般时父子结构)的时候可以跳转，但是如果从其他页面跳转时就失效了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2023-12-11 20:30:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-11 12:30:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bb%8e%e5%88%97%e8%a1%a8%e9%a1%b5%e5%88%b0%e8%af%a6%e6%83%85%e9%a1%b5%e6%80%9d%e8%b7%af%e5%88%86%e6%9e%90]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e8%b7%b3%e8%bd%ac"><![CDATA[跳转]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[首页]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/02/27/91/</link>
		<pubDate>Mon, 18 Dec 2023 15:21:55 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/index.php/ll/2023/12/18/91/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 16:27:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-18 15:21:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:27:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:27:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%a6%96%e9%a1%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb%e9%a1%b5"><![CDATA[主页]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[91]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://www.xiaomurui.cn]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-18]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/06/94/</link>
		<pubDate>Mon, 18 Dec 2023 15:24:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/index.php/ll/2023/12/18/94/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2024-03-06 13:25:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-18 15:24:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 13:25:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 05:25:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[94]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb%e9%a1%b5"><![CDATA[主页]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-18]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-24]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-01-10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-02-27]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Gitee]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/06/95/</link>
		<pubDate>Mon, 18 Dec 2023 15:24:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/index.php/ll/2023/12/18/95/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date><![CDATA[2024-03-06 13:28:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-18 15:24:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 13:28:09]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 05:28:09]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[github]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb%e9%a1%b5"><![CDATA[主页]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[95]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://gitee.com/poxiao02]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-18]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-21]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023-12-24]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-01-10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-02-27]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/02/27/217/</link>
		<pubDate>Tue, 27 Feb 2024 08:16:27 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/index.php/ll/2024/02/27/217/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 16:27:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-27 08:16:27]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:27:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:27:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[217]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb%e9%a1%b5"><![CDATA[主页]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[个人简历]]></title>
		<link>https://www.xiaomurui.cn/index.php/%e4%b8%aa%e4%ba%ba%e7%ae%80%e5%8e%86/</link>
		<pubDate>Tue, 27 Feb 2024 08:18:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?page_id=218</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="https://s2.loli.net/2024/03/18/3ORIwFEKMzP8Wy2.jpg" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 16:18:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-27 08:18:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-18 22:19:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-18 14:19:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ae%80%e5%8e%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
														<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[101]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
		<wp:meta_value><![CDATA[page-links.php]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[158]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/02/27/219/</link>
		<pubDate>Tue, 27 Feb 2024 08:18:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/index.php/ll/2024/02/27/219/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 16:27:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-27 08:18:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:27:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:27:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[219]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb%e9%a1%b5"><![CDATA[主页]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[218]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[递归]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/24/260/%e9%80%92%e5%bd%92/</link>
		<pubDate>Sun, 24 Mar 2024 14:53:50 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/递归.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2024-03-24 22:53:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-24 14:53:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-24 22:53:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-24 14:53:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%92%e5%bd%92]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>260</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/递归.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/递归.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:814;s:6:"height";i:931;s:4:"file";s:19:"2024/03/递归.webp";s:8:"filesize";i:44722;s:5:"sizes";a:4:{s:6:"medium";a:5:{s:4:"file";s:19:"递归-262x300.webp";s:5:"width";i:262;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:11102;}s:9:"thumbnail";a:5:{s:4:"file";s:19:"递归-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:4842;}s:12:"medium_large";a:5:{s:4:"file";s:19:"递归-768x878.webp";s:5:"width";i:768;s:6:"height";i:878;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:46630;}s:14:"post-thumbnail";a:5:{s:4:"file";s:19:"递归-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:4842;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[MySQL行锁]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/25/265/mysql%e8%a1%8c%e9%94%81/</link>
		<pubDate>Mon, 25 Mar 2024 14:08:53 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/MySQL行锁.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2024-03-25 22:08:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-25 14:08:53]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-25 22:08:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-25 14:08:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e8%a1%8c%e9%94%81]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>265</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/MySQL行锁-scaled.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/MySQL行锁-scaled.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:7:{s:5:"width";i:2560;s:6:"height";i:1434;s:4:"file";s:31:"2024/03/MySQL行锁-scaled.webp";s:8:"filesize";i:189478;s:5:"sizes";a:7:{s:6:"medium";a:5:{s:4:"file";s:24:"MySQL行锁-300x168.webp";s:5:"width";i:300;s:6:"height";i:168;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:11626;}s:5:"large";a:5:{s:4:"file";s:25:"MySQL行锁-1024x573.webp";s:5:"width";i:1024;s:6:"height";i:573;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:58718;}s:9:"thumbnail";a:5:{s:4:"file";s:24:"MySQL行锁-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:5524;}s:12:"medium_large";a:5:{s:4:"file";s:24:"MySQL行锁-768x430.webp";s:5:"width";i:768;s:6:"height";i:430;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:41636;}s:9:"1536x1536";a:5:{s:4:"file";s:25:"MySQL行锁-1536x860.webp";s:5:"width";i:1536;s:6:"height";i:860;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:98422;}s:9:"2048x2048";a:5:{s:4:"file";s:26:"MySQL行锁-2048x1147.webp";s:5:"width";i:2048;s:6:"height";i:1147;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:143720;}s:14:"post-thumbnail";a:5:{s:4:"file";s:24:"MySQL行锁-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:5524;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:14:"original_image";s:16:"MySQL行锁.webp";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_is_custom_background]]></wp:meta_key>
		<wp:meta_value><![CDATA[sakura]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[左叶子节点之和]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/28/273/%e5%b7%a6%e5%8f%b6%e5%ad%90%e8%8a%82%e7%82%b9%e4%b9%8b%e5%92%8c/</link>
		<pubDate>Thu, 28 Mar 2024 09:05:18 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/03/左叶子节点之和.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date><![CDATA[2024-03-28 17:05:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-28 09:05:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-28 17:05:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-28 09:05:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a6%e5%8f%b6%e5%ad%90%e8%8a%82%e7%82%b9%e4%b9%8b%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>273</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/03/左叶子节点之和.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/03/左叶子节点之和.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:849;s:4:"file";s:34:"2024/03/左叶子节点之和.webp";s:8:"filesize";i:77762;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:34:"左叶子节点之和-300x212.webp";s:5:"width";i:300;s:6:"height";i:212;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:16232;}s:5:"large";a:5:{s:4:"file";s:35:"左叶子节点之和-1024x724.webp";s:5:"width";i:1024;s:6:"height";i:724;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:77676;}s:9:"thumbnail";a:5:{s:4:"file";s:34:"左叶子节点之和-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:7596;}s:12:"medium_large";a:5:{s:4:"file";s:34:"左叶子节点之和-768x543.webp";s:5:"width";i:768;s:6:"height";i:543;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:55372;}s:14:"post-thumbnail";a:5:{s:4:"file";s:34:"左叶子节点之和-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:7596;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[支付设计-接入支付宝沙箱支付]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/05/277/%e6%94%af%e4%bb%98%e8%ae%be%e8%ae%a1-%e6%8e%a5%e5%85%a5%e6%94%af%e4%bb%98%e5%ae%9d%e6%b2%99%e7%ae%b1%e6%94%af%e4%bb%98/</link>
		<pubDate>Fri, 05 Apr 2024 14:29:55 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/04/支付设计-接入支付宝沙箱支付.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date><![CDATA[2024-04-05 22:29:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-05 14:29:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-05 22:29:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-05 14:29:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%94%af%e4%bb%98%e8%ae%be%e8%ae%a1-%e6%8e%a5%e5%85%a5%e6%94%af%e4%bb%98%e5%ae%9d%e6%b2%99%e7%ae%b1%e6%94%af%e4%bb%98]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>277</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/04/支付设计-接入支付宝沙箱支付.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/04/支付设计-接入支付宝沙箱支付.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1000;s:6:"height";i:1000;s:4:"file";s:53:"2024/04/支付设计-接入支付宝沙箱支付.webp";s:8:"filesize";i:89564;s:5:"sizes";a:4:{s:6:"medium";a:5:{s:4:"file";s:53:"支付设计-接入支付宝沙箱支付-300x300.webp";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:23528;}s:9:"thumbnail";a:5:{s:4:"file";s:53:"支付设计-接入支付宝沙箱支付-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:8614;}s:12:"medium_large";a:5:{s:4:"file";s:53:"支付设计-接入支付宝沙箱支付-768x768.webp";s:5:"width";i:768;s:6:"height";i:768;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:79250;}s:14:"post-thumbnail";a:5:{s:4:"file";s:53:"支付设计-接入支付宝沙箱支付-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:8614;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[个人算法积累]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/11/283/</link>
		<pubDate>Thu, 11 Apr 2024 13:15:24 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/index.php/ll/2024/04/11/283/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date><![CDATA[2024-04-11 21:15:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-11 13:15:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 21:15:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 13:15:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%aa%e4%ba%ba%e7%ae%97%e6%b3%95%e7%a7%af%e7%b4%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="nav_menu" nicename="%e4%b8%bb%e9%a1%b5"><![CDATA[主页]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[37]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redis单点登录]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/13/286/redis%e5%8d%95%e7%82%b9%e7%99%bb%e5%bd%95/</link>
		<pubDate>Sat, 13 Apr 2024 13:55:33 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/04/Redis单点登录.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date><![CDATA[2024-04-13 21:55:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-13 13:55:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-13 21:55:33]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-13 13:55:33]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[redis%e5%8d%95%e7%82%b9%e7%99%bb%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>286</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/04/Redis单点登录.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/04/Redis单点登录.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:707;s:6:"height";i:1000;s:4:"file";s:29:"2024/04/Redis单点登录.jpg";s:8:"filesize";i:491642;s:5:"sizes";a:3:{s:6:"medium";a:5:{s:4:"file";s:29:"Redis单点登录-212x300.jpg";s:5:"width";i:212;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:17340;}s:9:"thumbnail";a:5:{s:4:"file";s:29:"Redis单点登录-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:7771;}s:14:"post-thumbnail";a:5:{s:4:"file";s:29:"Redis单点登录-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:7771;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[SpringBoot启动打印配置的yml]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/13/288/springboot%e5%90%af%e5%8a%a8%e6%89%93%e5%8d%b0%e9%85%8d%e7%bd%ae%e7%9a%84yml/</link>
		<pubDate>Sat, 13 Apr 2024 13:57:35 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/04/SpringBoot启动打印配置的yml.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date><![CDATA[2024-04-13 21:57:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-13 13:57:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-13 21:57:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-13 13:57:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[springboot%e5%90%af%e5%8a%a8%e6%89%93%e5%8d%b0%e9%85%8d%e7%bd%ae%e7%9a%84yml]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>288</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/04/SpringBoot启动打印配置的yml.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/04/SpringBoot启动打印配置的yml.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:822;s:6:"height";i:1200;s:4:"file";s:46:"2024/04/SpringBoot启动打印配置的yml.jpg";s:8:"filesize";i:998966;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:46:"SpringBoot启动打印配置的yml-206x300.jpg";s:5:"width";i:206;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:15346;}s:5:"large";a:5:{s:4:"file";s:47:"SpringBoot启动打印配置的yml-701x1024.jpg";s:5:"width";i:701;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:98667;}s:9:"thumbnail";a:5:{s:4:"file";s:46:"SpringBoot启动打印配置的yml-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:6689;}s:12:"medium_large";a:5:{s:4:"file";s:47:"SpringBoot启动打印配置的yml-768x1121.jpg";s:5:"width";i:768;s:6:"height";i:1121;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:111344;}s:14:"post-thumbnail";a:5:{s:4:"file";s:46:"SpringBoot启动打印配置的yml-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:6689;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[规则引擎]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/24/297/%e8%a7%84%e5%88%99%e5%bc%95%e6%93%8e/</link>
		<pubDate>Wed, 24 Apr 2024 05:01:17 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2024/04/规则引擎.webp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2024-04-24 13:01:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-24 05:01:17]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-24 13:01:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-24 05:01:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%84%e5%88%99%e5%bc%95%e6%93%8e]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>297</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2024/04/规则引擎.webp]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024/04/规则引擎.webp]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:788;s:6:"height";i:1200;s:4:"file";s:25:"2024/04/规则引擎.webp";s:8:"filesize";i:68170;s:5:"sizes";a:5:{s:6:"medium";a:5:{s:4:"file";s:25:"规则引擎-197x300.webp";s:5:"width";i:197;s:6:"height";i:300;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:12406;}s:5:"large";a:5:{s:4:"file";s:26:"规则引擎-672x1024.webp";s:5:"width";i:672;s:6:"height";i:1024;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:64654;}s:9:"thumbnail";a:5:{s:4:"file";s:25:"规则引擎-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:5962;}s:12:"medium_large";a:5:{s:4:"file";s:26:"规则引擎-768x1170.webp";s:5:"width";i:768;s:6:"height";i:1170;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:76310;}s:14:"post-thumbnail";a:5:{s:4:"file";s:25:"规则引擎-150x150.webp";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/webp";s:8:"filesize";i:5962;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[cropped-logo.jpg]]></title>
		<link>https://www.xiaomurui.cn/logo/cropped-logo-jpg/</link>
		<pubDate>Sat, 27 Apr 2024 09:58:44 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">http://www.xiaomurui.cn/wp-content/uploads/2023/12/cropped-logo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/cropped-logo.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date><![CDATA[2024-04-27 17:58:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-27 09:58:44]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-27 17:58:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-27 09:58:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[cropped-logo-jpg]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>101</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
						<wp:attachment_url><![CDATA[http://www.xiaomurui.cn/wp-content/uploads/2023/12/cropped-logo.jpg]]></wp:attachment_url>
											<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
		<wp:meta_value><![CDATA[2023/12/cropped-logo.jpg]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_context]]></wp:meta_key>
		<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:24:"2023/12/cropped-logo.jpg";s:8:"filesize";i:16728;s:5:"sizes";a:7:{s:6:"medium";a:5:{s:4:"file";s:24:"cropped-logo-300x300.jpg";s:5:"width";i:300;s:6:"height";i:300;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:8197;}s:9:"thumbnail";a:5:{s:4:"file";s:24:"cropped-logo-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:3449;}s:14:"post-thumbnail";a:5:{s:4:"file";s:24:"cropped-logo-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:3449;}s:13:"site_icon-270";a:5:{s:4:"file";s:24:"cropped-logo-270x270.jpg";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:7302;}s:13:"site_icon-192";a:5:{s:4:"file";s:24:"cropped-logo-192x192.jpg";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:4493;}s:13:"site_icon-180";a:5:{s:4:"file";s:24:"cropped-logo-180x180.jpg";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:4297;}s:12:"site_icon-32";a:5:{s:4:"file";s:22:"cropped-logo-32x32.jpg";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:10:"image/jpeg";s:8:"filesize";i:939;}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[wrodpress固定链接]]></title>
		<link>https://www.xiaomurui.cn/?p=59</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>WordPress避坑指南</h4>

作为新手在使用WordPress进行博客管理的时候，常常会手忙脚乱，下面是博主总结的一些问题，也是博主自己曾经困扰的问题，不定时的补充~

<blockquote>
  作者：小木蕊 最后一次修改时间 2023-12-2
</blockquote>

<h6><strong>♻1.固定连接</strong></h6>

<strong>♻1.1 介绍</strong>

固定连接是WrodPress用来优化文章链接结构的一个选项，有利于网站的seo，对网站在搜索引擎中的排名有帮助，设置界面在<code>设置 -&gt;下拉菜单</code><img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121342269.png" alt="image-20231203121342269" />

<strong>♻1.2 选项参数</strong>

有如下几种结构，在设置类型时遵循两个原则<code>语义化</code>就是你链接结构尽量有意义，<code>唯一性</code>每一篇文章都是有一个唯一的链接，这项很重要，可以说决定了你的文章能不能正常访问的问题(下面给大家看一个错误示范)，这里推荐自定义类型，

<img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121752679.png" alt="image-20231203121752679" />

<strong>♻1.3</strong> <strong>文章链接不唯一后果</strong>

这里使用的是<code>作者\日期</code>会有什么Bug呢

<img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203121752679.png" alt="image-20231203122531193" />

如下有两篇文章博客主页如下

<img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203122951597.png" alt="image-20231203122951597" />

详情页如下

<img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123042822.png" alt="image-20231203123042822" />

<img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123110194.png" alt="image-20231203123110194" />

有什么问题呢，答案是无法点击查看文章详情，这就是详情页，详情页应该是这个样子，造成这一问题的原因是，<span class="text-highlighted-inline" style="background-color: #fffd38;">详情页的链接和文章列表页的链接相同</span>这也就是为什么上文提到文章链接要唯一的原因。

<img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/image-20231203123703457.png" alt="image-20231203123703457" />

<strong>♻解决方案</strong>

将固定链接修改为如下结构保证其唯一

<img src="" alt="image-20231203124341771" />

现在就可以正常访问啦，博主最开始折腾了很久甚至还怀疑是不是没有装相应的插件导致的😅

<img src="" alt="image-20231203124305535" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date><![CDATA[2023-12-19 08:27:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-19 08:27:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-19 00:27:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[gdlj]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba"><![CDATA[博客搭建]]></category>
		<category domain="post_tag" nicename="%e9%81%bf%e5%9d%91%e6%8c%87%e5%8d%97"><![CDATA[避坑指南]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[44]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[博客搭建]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/06/61/</link>
		<pubDate>Wed, 06 Dec 2023 05:02:21 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>WordPress避坑指南</h4>

作为新手在使用WordPress进行博客管理的时候，常常会手忙脚乱，下面是博主总结的一些问题，也是博主自己曾经困扰的问题，不定时的补充~

<blockquote>
  作者：小木蕊 最后一次修改时间 2023-12-2
</blockquote>

<h4><strong>♻1.固定连接</strong></h4>

<strong>♻1.1 介绍</strong>

固定连接是WrodPress用来优化文章链接结构的一个选项，有利于网站的seo，对网站在搜索引擎中的排名有帮助，设置界面在<code>设置 -&gt;下拉菜单</code><img src="https://s2.loli.net/2023/12/06/TNFC7bcBdE34aD1.png" alt="image-20231203121342269" />

<strong>♻1.2 选项参数</strong>

有如下几种结构，在设置类型时遵循两个原则<code>语义化</code>就是你链接结构尽量有意义，<code>唯一性</code>每一篇文章都是有一个唯一的链接，这项很重要，可以说决定了你的文章能不能正常访问的问题(下面给大家看一个错误示范)，这里推荐自定义类型，

<img src="https://s2.loli.net/2023/12/06/LNsPQpV1rXa8Wl5.png" alt="image-20231203121752679" />

<strong>♻1.3</strong> <strong>文章链接不唯一后果</strong>

这里使用的是<code>作者\日期</code>会有什么Bug呢

<img src="https://s2.loli.net/2023/12/06/LNsPQpV1rXa8Wl5.png" alt="image-20231203122531193" />

如下有两篇文章

<img src="https://s2.loli.net/2023/12/06/QAdiCtBIoDYJwkZ.png" alt="image-20231203122708399" />

博客主页如下

<img src="https://s2.loli.net/2023/12/06/NsGh1ZTmJeFQpoD.png" alt="image-20231203122951597" />

详情页如下

<img src="https://s2.loli.net/2023/12/06/HSduKa3GinLP51c.png" alt="image-20231203123042822" />

<img src="https://s2.loli.net/2023/12/06/CwMvBpFTSUdL8Js.png" alt="image-20231203123110194" />

有什么问题呢，答案是无法点击查看文章详情，这就是详情页，详情页应该是这个样子，造成这一问题的原因是，<span class="text-highlighted-inline" style="background-color: #fffd38;">详情页的链接和文章列表页的链接相同</span>这也就是为什么上文提到文章链接要唯一的原因。

<img src="https://s2.loli.net/2023/12/06/kjLUTpSH8R6OZQ5.png" alt="image-20231203123703457" />

<strong>♻解决方案</strong>

将固定链接修改为如下结构保证其唯一

<img src="https://s2.loli.net/2023/12/06/T63AMjCGnZloJD9.png" alt="image-20231203124341771" />

现在就可以正常访问啦，博主最开始折腾了很久甚至还怀疑是不是没有装相应的插件导致的😅

<img src="https://s2.loli.net/2023/12/06/3HhfFtAyYG1zc5w.png" alt="image-20231203124305535" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date><![CDATA[2023-12-06 13:02:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-06 05:02:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-06 13:02:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-06 05:02:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="category" nicename="%e5%8d%9a%e5%ae%a2%e6%90%ad%e5%bb%ba"><![CDATA[博客搭建]]></category>
		<category domain="post_tag" nicename="%e5%9b%ba%e5%ae%9a%e9%93%be%e6%8e%a5"><![CDATA[固定链接]]></category>
		<category domain="post_tag" nicename="%e6%96%87%e7%ab%a0%e5%8f%91%e5%b8%83"><![CDATA[文章发布]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[力扣6. N 字形变换]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/06/63/</link>
		<pubDate>Wed, 06 Dec 2023 12:01:48 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>ヾ(≧▽≦*)o力扣每日一题</strong></h3>

<blockquote>
  作者 小木蕊 2023年12月6日
</blockquote>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/zigzag-conversion/">6. N 字形变换</a>

中等

将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以从上往下、从左到右进行 Z 字形排列。

比如输入字符串为 <code>"PAYPALISHIRING"</code> 行数为 <code>3</code> 时，排列如下：

<pre><code class="line-numbers">P   A   H   N
A P L S I I G
Y   I   R
</code></pre>

之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>"PAHNAPLSIIGYIR"</code>。

请你实现这个将字符串进行指定行数变换的函数：

<pre><code class="language-java line-numbers">string convert(string s, int numRows);
</code></pre>

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：s = "PAYPALISHIRING", numRows = 3
输出："PAHNAPLSIIGYIR"
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：s = "PAYPALISHIRING", numRows = 4
输出："PINALSIGYAHRPI"
解释：
P     I    N
A   L S  I G
Y A   H R
P     I
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：s = "A", numRows = 1
输出："A"
</code></pre>

<strong>解放思路</strong>

观察字符串特别是索引的规律 <code>i</code>,利用 <code>flag = -flag</code>来模拟z字遍历并使用<code>List</code>来保存每一行的字符，最后拼接即可

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public String convert(String s, int numRows) {
        if (numRows&lt;2) return s;
        //使用一个List分别将每一行的字符保存下来
        ArrayList&lt;StringBuilder&gt; rows = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; numRows; i++) {
            rows.add(new StringBuilder());
        }

        //利用flag模拟z字扫描
        int i = 0,flag = -1;
        for (char c:s.toCharArray()) {
            rows.get(i).append(c);
            if (i==0 || i == numRows -1){
                flag = -flag;
            }
            i+=flag;
        }
        StringBuilder res = new StringBuilder();
        for (StringBuilder row:rows) {
            res.append(row);
        }
        return res.toString();
    }
}

</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date><![CDATA[2023-12-06 20:01:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-06 12:01:48]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 21:01:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 13:01:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[63]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="n-%e5%ad%97%e5%bd%a2%e5%8f%98%e6%8d%a2"><![CDATA[N 字形变换]]></category>
		<category domain="post_tag" nicename="%e5%8a%9b%e6%89%a3"><![CDATA[力扣]]></category>
		<category domain="category" nicename="shuangzhizheng"><![CDATA[双指针]]></category>
		<category domain="post_tag" nicename="%e5%ad%97%e7%ac%a6%e4%b8%b2"><![CDATA[字符串]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ヾ(≧▽≦*)o每日力扣一题 [380. O(1) 时间插入、删除和获取随机元素]]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/10/74/</link>
		<pubDate>Sun, 10 Dec 2023 14:01:32 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[<h5><strong>ヾ(≧▽≦*)o每日力扣一题 <a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/insert-delete-getrandom-o1/">380. O(1) 时间插入、删除和获取随机元素</a></strong></h5>

<blockquote>
  作者 小木蕊 2023年12月10日
</blockquote>

实现<code>RandomizedSet</code> 类：

<ul>
<li><code>RandomizedSet()</code> 初始化 <code>RandomizedSet</code> 对象</li>
<li><code>bool insert(int val)</code> 当元素 <code>val</code> 不存在时，向集合中插入该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
<li><code>bool remove(int val)</code> 当元素 <code>val</code> 存在时，从集合中移除该项，并返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
<li><code>int getRandom()</code> 随机返回现有集合中的一项（测试用例保证调用此方法时集合中至少存在一个元素）。每个元素应该有 <strong>相同的概率</strong> 被返回。</li>
</ul>

你必须实现类的所有函数，并满足每个函数的 <strong>平均</strong> 时间复杂度为 <code>O(1)</code> 。

<strong>示例：</strong>

<pre><code class="line-numbers">输入
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
输出
[null, true, false, true, 2, true, false, 2]

解释
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // 向集合中插入 1 。返回 true 表示 1 被成功地插入。
randomizedSet.remove(2); // 返回 false ，表示集合中不存在 2 。
randomizedSet.insert(2); // 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。
randomizedSet.getRandom(); // getRandom 应随机返回 1 或 2 。
randomizedSet.remove(1); // 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。
randomizedSet.insert(2); // 2 已在集合中，所以返回 false 。
randomizedSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>-231 &lt;= val &lt;= 231 - 1</code></li>
<li>最多调用 <code>insert</code>、<code>remove</code> 和 <code>getRandom</code> 函数 <code>2 * ``105</code> 次</li>
<li>在调用 <code>getRandom</code> 方法时，数据结构中 <strong>至少存在一个</strong> 元素。</li>
</ul>

<strong>思路：</strong>

变长数组可以在 O(1)O(1)O(1) 的时间内完成获取随机元素操作，但是由于无法在 O(1)O(1)O(1)

的时间内判断元素是否存在，因此不能在 O(1)O(1)O(1) 的时间内完成插入和删除操作。哈希表

可以在 O(1)O(1)O(1) 的时间内完成插入和删除操作，但是由于无法根据下标定位到特定元素，因

此不能在 O(1)O(1)O(1) 的时间内完成获取随机元素操作。为了满足插入、删除和获取随机元素操

作的时间复杂度都是 O(1)O(1)O(1)，需要将变长数组和哈希表结合，变长数组中存储元素，哈希

表中存储每个元素在变长数组中的下标。

故使用<sup id="fnref-74-变长数组"><a href="#fn-74-变长数组" class="footnote-ref" role="doc-noteref">1</a></sup>加<sup id="fnref-74-哈希表"><a href="#fn-74-哈希表" class="footnote-ref" role="doc-noteref">2</a></sup>

<pre><code class="language-java line-numbers">class RandomizedSet {
    List&lt;Integer&gt; nums;
    Map&lt;Integer,Integer&gt; indices;
    Random random;
    public RandomizedSet() {
        nums=new ArrayList&lt;Integer&gt;();//可变长数组，即链表，即使后面删除了元素，链表中的元素也是紧挨着的，像数组一样
        indices=new HashMap&lt;Integer,Integer&gt;();
        random=new Random;
    }

    public boolean insert(int val) {
        if(indices.containsKey(val)){
            return false;
        }
        int index=nums.size();
        nums.add(val);//链表存入数据
        indices.put(val,index);//哈希表中存入该数据和它在链表中的下标
        return true;
    }

    public boolean remove(int val) {
        if(!indices.containsKey(val)){
            return false;
        }

        //总体思路：用链表最后一个元素覆盖要删除的元素，然后把链表最后一个元素删掉，更新哈希表中的数据
        int index=indices.get(val);//在哈希表中查找该数据在链表中的下标
        int last=nums.get(nums.size()-1);//获取链表中最后一个元素
        nums.set(indext,last);//把最后一个元素移到需要删除的元素处，替换掉
        indices.put(last,index);//把替换后的元素和它的新下标一起存入哈希表
        nums.remove(nums.size()-1);//删掉链表最后一个元素
        indices.remove(val);//删掉哈希表中要删除的元素
        return true;
    }

    public int getRandom() {
        int randomIndex=random.nextInt(nums.size());//获取一个范围为[0,nums.size())的随机整数
        return nums.get(randomIndex);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
</code></pre>

<div class="footnotes" role="doc-endnotes">
<hr />
<ol>

<li id="fn-74-变长数组" role="doc-endnote">
链表也就是ArrayList&#160;<a href="#fnref-74-变长数组" class="footnote-backref" role="doc-backlink">&#8617;&#xFE0E;</a>
</li>

<li id="fn-74-哈希表" role="doc-endnote">
HashMap&#160;<a href="#fnref-74-哈希表" class="footnote-backref" role="doc-backlink">&#8617;&#xFE0E;</a>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date><![CDATA[2023-12-10 22:01:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-10 14:01:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-10 22:01:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-10 14:01:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%83%be%e2%89%a7%e2%96%bd%e2%89%a6o%e6%af%8f%e6%97%a5%e5%8a%9b%e6%89%a3%e4%b8%80%e9%a2%98-380-o1-%e6%97%b6%e9%97%b4%e6%8f%92%e5%85%a5%e3%80%81%e5%88%a0%e9%99%a4%e5%92%8c%e8%8e%b7%e5%8f%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e7%bb%84"><![CDATA[数组]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[ヾ(≧▽≦*)o力扣每日一题[977. 有序数组的平方]]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/16/82/</link>
		<pubDate>Sat, 16 Dec 2023 13:54:52 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><strong>ヾ(≧▽≦*)o力扣每日一题<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></strong></h2>

<blockquote>
  作者：小木蕊 2023年12月16日
</blockquote>

给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums = [-4,-1,0,3,10]
输出：[0,1,9,16,100]
解释：平方后，数组变为 [16,1,0,9,100]
排序后，数组变为 [0,1,9,16,100]
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums = [-7,-3,2,3,11]
输出：[4,9,9,49,121]
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= nums.length &lt;= 104</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li>
</ul>

<strong>进阶：</strong>

<ul>
<li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li>
</ul>

<strong>思路</strong>

常规的想法是取出每一个元素后再进行一个快速排序，但是这样的时间复杂度就是O(nlogn)

利用双指针，从数组的两端开始遍历，两端取出的值一定是最大的值，将两者中最大的值放到结果数组的末尾，重后向前更新即可得到从小到大排序的新数组且时间复杂度是O(n)

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] res = new int[nums.length];
        //从小到大则res重后面更新
        int k = res.length -1;
        //首尾指针
        int i = 0,j = nums.length -1;
        while (i&lt;=j){
            if (nums[i]* nums[i]&gt; nums[j]*nums[j]){
                res[k--] = nums[i]*nums[i];
                i++;
            } else {
                res[k--] = nums[j]*nums[j];
                j--;
            }
        }
        return res;
    }
}

</code></pre>

结果：

<img src="https://s2.loli.net/2023/12/16/f61b5sZzI3YU2hu.png" alt="image-20231216215121786" style="zoom: 80%;" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date><![CDATA[2023-12-16 21:54:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-16 13:54:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 21:00:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 13:00:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%83%be%e2%89%a7%e2%96%bd%e2%89%a6o%e5%8a%9b%e6%89%a3%e6%af%8f%e6%97%a5%e4%b8%80%e9%a2%98977-%e6%9c%89%e5%ba%8f%e6%95%b0%e7%bb%84%e7%9a%84%e5%b9%b3%e6%96%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="shuangzhizheng"><![CDATA[双指针]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[specs_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[(^_^)力扣每日一题209. 长度最小的子数组]]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/16/85/</link>
		<pubDate>Sat, 16 Dec 2023 14:25:49 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>(^_^)力扣每日一题209. 长度最小的子数组]</h2>

<blockquote>
  作者：小木蕊 2023年12月16日
</blockquote>

给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong>

找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[nums1, nums+1, ..., nums-1, nums]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：target = 4, nums = [1,4,4]
输出：1
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= target &lt;= 109</code></li>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>1 &lt;= nums[i] &lt;= 105</code></li>
</ul>

在本题中实现滑动窗口，主要确定如下三点：

<ul>
<li>窗口内是什么？</li>
<li>如何移动窗口的起始位置？</li>
<li>如何移动窗口的结束位置？</li>
</ul>

窗口就是 满足其和 ≥ target 的长度最小的 连续 子数组。

窗口的起始位置如何移动：如果当前窗口的值大于target了，窗口就要向前移动了（也就是该缩小了）。

窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。

解题的关键在于 窗口的起始位置如何移动，如图所示：

<img src="https://s2.loli.net/2023/12/16/ruW2o5xekwClFPA.png" alt="leetcode_209" />

<strong>所以fast指针是滑动窗口的结束位置 slow是起始位置</strong>

可以发现滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int len = nums.length;
        int slow = 0;
        int fast = 0;
        int sum = 0;
        int minLen = len;
        while ( fast &lt;len) {
            sum+= nums[fast];
            while (sum &gt;= target){
                minLen = Math.min(minLen,fast -slow+1);
                sum-=nums[slow++];
            }
            fast++;
        }

        if (fast - slow &gt;= len){
            return 0;
        }
        return  minLen;
    }
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2023-12-16 22:25:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-16 14:25:49]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-16 22:25:49]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-16 14:25:49]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[_%e5%8a%9b%e6%89%a3%e6%af%8f%e6%97%a5%e4%b8%80%e9%a2%98209-%e9%95%bf%e5%ba%a6%e6%9c%80%e5%b0%8f%e7%9a%84%e5%ad%90%e6%95%b0%e7%bb%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[specs_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[(～￣▽￣)～每日力扣[707. 设计链表]]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/18/87/</link>
		<pubDate>Mon, 18 Dec 2023 14:25:57 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>(～￣▽￣)～每日力扣[707. 设计链表]</strong></h3>

<blockquote>
  作者：小木蕊 2023年12月18日
</blockquote>

你可以选择使用单链表或者双链表，设计并实现自己的链表。

单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。

如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。

实现 <code>MyLinkedList</code> 类：

<ul>
<li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li>
<li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li>
<li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>
<li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li>
<li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>
<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li>
</ul>

<strong>示例：</strong>

<pre><code class="line-numbers">输入
["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]
[[], [1], [3], [1, 2], [1], [1], [1]]
输出
[null, null, null, null, 2, null, 3]

解释
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList.addAtTail(3);
myLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3
myLinkedList.get(1);              // 返回 2
myLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3
myLinkedList.get(1);              // 返回 3
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>0 &lt;= index, val &lt;= 1000</code></li>
<li>请不要使用内置的 LinkedList 库。</li>
<li>调用 <code>get</code>、<code>addAtHead</code>、<code>addAtTail</code>、<code>addAtIndex</code> 和 <code>deleteAtIndex</code> 的次数不超过 <code>2000</code> 。</li>
</ul>

这是一个典型的链表操作类型题目,有增删查

<ol>
<li>使用虚拟头节点,即链表集合中的第一个节点不做数据的存储</li>
<li>addAtHead(),addAtTail(),只要调用自身的addAtIndex()传入响应的索引0,size即可</li>
<li>在经行操作时遍历到上一个位置即可</li>
<li>删除头节点时 head = head.next</li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">//单链表
class ListNode {
    int val;
    ListNode next;

    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}

class MyLinkedList {
    int size;
    ListNode head;


    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
    }

    public int get(int index) {
        if (index&lt;0||index &gt;= size) {
            return -1;
        }
        ListNode currentNode = head;
        //包含一个虚拟头节点，所以查找第 index+1 个节点
        for (int i = 0; i &lt;= index; i++) {
            currentNode = currentNode.next;
        }
        return currentNode.val;
    }

    public void addAtHead(int val) {
        addAtIndex(0,val);
    }

    public void addAtTail(int val) {
       addAtIndex(size,val);
    }

    public void addAtIndex(int index, int val) {
        if (index &gt; size) {
            return;
        }
        if (index&lt;0){
            index=0;
        }
        size++;
        ListNode pred = head;
        for (int i = 0; i &lt; index; i++) {
            pred = pred.next;
        }
        ListNode toAdd = new ListNode(val);
        toAdd.next=pred.next;
        pred.next=toAdd;
    }

    public void deleteAtIndex(int index) {
        if (index&lt;0||index &gt;= size) {
            return;
        }
        size--;
        if (index == 0){
            head=head.next;
            return;
        }
        ListNode pred = head;
        for (int i = 0; i &lt; index; i++) {
            pred = pred.next;
        }
        pred.next = pred.next.next;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date><![CDATA[2023-12-18 22:25:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-18 14:25:57]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 21:00:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 13:00:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%ef%bd%9e%ef%bf%a3%e2%96%bd%ef%bf%a3%ef%bd%9e%e6%af%8f%e6%97%a5%e5%8a%9b%e6%89%a3707-%e8%ae%be%e8%ae%a1%e9%93%be%e8%a1%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%93%be%e8%a1%a8"><![CDATA[链表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redis学习笔记]]></title>
		<link>https://www.xiaomurui.cn/?p=105</link>
		<pubDate>Wed, 20 Dec 2023 12:22:45 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=105</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><strong>Redi常用命令</strong></h1>

<h6><strong>Redis 启动</strong></h6>

<pre><code class="language-shell line-numbers"> #1先启动server
 redis-server /myredis/redis7.conf

 #2启动客户端 cli
 redis-cli -a password

 #解决中文乱码问题
 redis-cli -a password --raw
</code></pre>

<h6><strong>关机</strong></h6>

<pre><code class="language-shell line-numbers">#redis内
shutdown

#远程
redis-cli -a password shutdown
</code></pre>

<h6><strong>获取当前配置文件详细</strong></h6>

<pre><code class="language-shell line-numbers">#获取配置文件
config get

#设置配置信息
config set

# reqirepass 密码
# port 端口号
# dir 备份文件
</code></pre>

<h6><strong>常用的Linux指令</strong></h6>

<pre><code class="language-shell line-numbers">:set nu #显示行号
yy #复制当前行
p #黏贴
tab #文件名、路径名补全
gg #去到首行
G #去尾行
num G #去到第num行
/str #搜索字符串str
:wq #保存退出
</code></pre>

<h6><strong>保存机制</strong></h6>

<ul>
<li>rdb</li>
<li>aof</li>
</ul>

rbd是定时的保存全部数据，而aof是记录操作步骤

<h6><strong>AOF机制的变更</strong></h6>

aof只记录写操作，不会记录操作，且最多丢失1秒中的数据

<ul>
<li>在redis6之前aof文件有且只有一份</li>
<li>redis7之后 aof文件由三部分组成，

<ul>
<li>aof.base 基础文件</li>
<li>aof.incr 增量文件</li>
<li>aof.manfest 文件清单</li>
</ul></li>
<li>redis7之后aof备份文件由与rdb文件路径分开保存，</li>
</ul>

<h6><strong>aof日志重写</strong></h6>

aof日志重写，可以把已记录的操作文件瘦身将一些可以合并的写操作合并

并将base文件和incr文件更新，aof重写日志文件有两种方式

<ol>
<li>自动触发：默认触发条件为 <code>100 64mb</code>日志文件达到上一个的100%即一倍且大小大于 64mb 可在配置文件中修改</li>
<li>手动触发 <code>BGREWRITEAOF</code></li>
</ol>

<h6><strong>aof和rdb的混合使用</strong></h6>

<ol>
<li>aof和rdb是可以共同使用的，并且推荐使用</li>
<li>aof优先级是高于rdb，有aof的前提下优先加载aof</li>
<li>aof做增量备份，rdb做全量备份</li>
<li>混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。----》AOF包括了RDB头部+AOF混写</li>
</ol>

<img src="https://s2.loli.net/2023/12/16/8W9FZXpyYRmsvHz.png" alt="image-20231216194753508" style="zoom:50%;" />

<ol start="5">
<li>aof与rdb可同时关闭让redis只做缓存不做持久化但是可以手动持久化

<ul>
<li>aof appendonlyfile no</li>
<li>rdb save “”</li>
</ul></li>
</ol>

<h6><strong>检查备份文件操作</strong></h6>

<pre><code class="language-shell line-numbers"># /usr/local/bin 目录下
#修复aof文件只用修复 incr增量文件即可
redis-check-aof --fix appendonly.aof.1.incr.aof
#修复rdb文件
redis-check-rdb dump6379.rdb
</code></pre>

<img src="https://s2.loli.net/2023/12/16/SM1bg7FfRUDVoHp.png" alt="image-20231216165756842" style="zoom:50%;" />

<h6><strong>Redis事务管理</strong></h6>

<ol>
<li>redis事务是一组需要连续执行的命令，不会被其他的命令加塞</li>
<li>MULTI开启事务后将之后的命令全部放在一个队列，顺序的序列化执行</li>
<li>具备原子性执行中分为两种情况

<ul>
<li>全部失败，遇到编译错误</li>
<li>成功的成功，失败的失败，遇到运行时错误</li>
</ul></li>
<li>开启监视的属性持有乐观锁，在修改之前先去检查，看当前的数据是否是最新的，不是最新的失败</li>
</ol>

<h6><strong>Redis管道</strong></h6>

<ol>
<li>管道解决什么问题

<ul>
<li>优化频繁往返的命令带来的性能瓶颈，俗称RTT</li>
</ul></li>
<li>管道怎么解决

<ul>
<li>将多条命令打包一次处理。类似原生命令<code>mset mget</code></li>
</ul></li>
<li>格式

<ol>
<li>准备命令集xxx.txt</li>
<li>在linux中执行<code>cat xxx.txt | redis-cli -a password --pipe</code></li>
</ol></li>
<li>注意事项

<ol>
<li>不可批处理太多命令最好是10k左右</p></li>
<li>不具备原子性</p></li>
</ol></li>
</ol>

<h6><strong>Redis主从复制</strong></h6>

<ol>
<li>主从复制解决了什么干了什么操作

<ul>
<li>将读写操作分离，master Redis可写可读 salove Redis只可读</li>
</ul></li>
<li>同步机制

<ul>
<li>每次master的数据 slave都会同步</li>
<li>slave无论是什么时候加入master的管理下都会保持和master的数据同步</li>
<li>master挂掉后slave保持slave的身份也可以使用，并且等待Master重启</li>
</ul></li>
<li>如何建立主从复制

<ol>
<li>添加配置文件主从关系一直都在</li>
<li>使用<code>slave</code>只存在于本次启动</li>
</ol></li>
<li>关闭主机防火墙 <code>systemctl stop firewalld</code>，先启动master再启动slave</li>
</ol>

<p>注意事项

<blockquote>
  <ol>
  <li>虚拟机必须能够连接外网,需要打开网络连接

</li>
  <li>在本地使用虚拟机搭建redis 尽量不要关机,每次重启会导致虚拟机ip变化</p></li>
  </ol>
</blockquote>

<h6><strong>Redis哨兵</strong></h6>

<ol>
<li>有什么作用，解决什么问题

<ul>
<li>监控Master、Slave，当master节点挂掉后，根据投票算法，选取合适的Slave继任</li>
</ul></li>
<li>怎么使用哨兵

<ol>
<li>配置sentinal.conf文件,</li>
<li>先启动主从复制</li>
<li><code>redis-sentinel sentinel26379.conf  --sentinel</code>启动监视哨兵</li>
</ol></li>
<li>哨兵干预后的结果

<ul>
<li>一个新的master产生代替原来的master工作,原来的master回来后降级为slave</li>
</ul></li>
<li><strong>master发生宕机时哨兵工作的流程</strong>

<ol>
<li>单个哨兵向master ping发出心跳包,没有接收到master的回应后,认为master <code>SDown</code>主观下线</p></li>
<li><p>向其他的哨兵询问master是否<code>SDown</code>,当得到的回复数超过一半后,判定master <code>ODown</code>客观下线</p></li>
<li><p>哨兵中通过<code>Raft算法</code>选出一个leader对其余的slave进行选举</p></li>
<li><p>哨兵中的leader根据

<ol>
<li><code>slave-priorty\replica-priorty</code>最小</li>
<li><code>复制偏移位置offset</code>最大</li>
<li><code>Run ID</code>字典顺序 ASCII码</li>
</ol>

选出新的master</p></li>
<li><p>将新的master 执行 slaveof no one,其余通过slaveof命令成为从节点,并修改其配置文件</p></li>
<li><p>当原来的master上线时 leader 让其成为 slave</p></li>
</ol></li>
<li><p>整个过程无须人工干预</p></li>
<li>缺陷:

<ul>
<li>在哨兵选出新master期间服务端无法写入数据,会有一定的数据丢失</li>
</ul></li>
</ol>

<p>注意事项:

<blockquote>
  <ol>
  <li>所有Redis的防火墙必须关闭,否则哨兵无法修改配置文件,可能有以下问题
  
  <ul>
  <li>master 下线后哨兵选票通过后但未完成数据迁移,产生新的maste</li>
  <li></li>
  </ul></li>
  <li>一个哨兵可监视多个master</li>
  </ol>
</blockquote>

<h6><strong>Redis集群</strong></h6>

<ol>
<li>什么是Redis集群

<ul>
<li>一个提供在多个Redis节点之间的共享数据程序集</li>
<li>可支持多个Master节点</li>
<li>无须使用哨兵功能</li>
<li>由槽位slot负责分配到各个物理节点,每个物理节点自己维护</li>
<li>理论最多值16438个节点,但最大推荐1000个</li>
</ul></li>
<li>集群分片算法

<ol>
<li>哈希取余分区

<ul>
<li>固定哈希分母为真实的节点数</li>
<li>简单粗暴,但是动态扩容时,会导致全部数据集重新hash</li>
</ul></li>
<li>一致性哈希算法

<ul>
<li>将所有的hash组成一个hash环解决扩容时,全部数据重新哈希问题</li>
<li>在节点数量较少时,存在数据倾斜问题</li>
</ul></li>
<li>哈希槽分区

<ul>
<li>在节点和数据之间在加一层槽,数据->槽->节点</li>
<li>集群里记录节点和槽之间的对应关系</li>
<li>一个集群只有16383个槽</li>
<li><strong>为什么最大槽数是16383</strong>

<ol>
<li>如果槽位为65536，发送心跳信息的消息头达8k，发送的心跳包过于庞大。</li>
<li>redis的集群主节点数量基本不可能超过1000个。</li>
<li>槽位越小，节点少的情况下，压缩比高，容易传输</li>
</ol></li>
</ul></li>
</ol></li>
<li>怎么保证数据一致

<ol>
<li>建立路由之后读写写入数据时需要路由到位</li>
<li>启动cli时加入参数<code>-c</code></li>
<li>cluster nodes 查看集群信息</li>
<li>写入数据分配到的数据槽是其他redis节点时自动重定向到相应的redis节点</li>
</ol></li>
<li>集群容错切换

<ol>
<li>中master挂掉后对应的slave自动补位，</li>
<li>原来的master恢复时以slave加入集群</li>
<li>可进行手动的主从结点交换<code>cluster failover</code></li>
</ol></li>
<li>集群扩容

<ol>
<li>将新的节点启动</li>
<li>master申请加入集群</li>
<li>重新分派槽号，其余master匀出一部分数据槽给新的master</li>
<li>将新的slave 加入集群并指定成为哪个master的slave</li>
</ol></li>
<li>集群缩容

<ol>
<li>移除slave节点</li>
<li>将master节点上的数据槽移交给其他master</li>
<li>移除master</li>
</ol></li>
</ol>

注意事项

<blockquote>
  <ol>
  <li>集群不保证强一致性</li>
  <li>集群是否完整才向外提供服务 由配置<code>cluster-require-full-coverage</code> 默认 yes 但是只有正常的小集群才可提供服务</li>
  <li>默认情况下 mset、mget 无法在集群中使用 需要{}加组 <code>mset k1{x} v1 k2{x} v2</code></li>
  <li>linux 有时候无法输入0 需要先按下 ins键</li>
  <li>集群启动后，在这期间即使节点的ip改变了，也不会影响集群的连接</li>
  </ol>
</blockquote>

画图网址

https://excalidraw.com

<h6><strong>Java整合Redis</strong></h6>

<ol>
<li>有哪些客户端工具类可以选择

<ul>
<li>Jedis：老项目使用的连接工具，没有连接池技术</li>
<li>lettuce：在Jedis的基础上改进，提供连接池等技术</li>
<li>RedisTemplate：springBoot整合的，默认有lettcue，推荐使用的主流的</li>
</ul></li>
<li>为什么序列化产生redis乱码问题

<ul>
<li>原因：RedisTemplate使用JDK序列化问题</li>
<li>解决方案：

<ul>
<li>使用StringTemplate</li>
<li>修改RedisConfig</li>
</ul></li>
</ul></li>
<li></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date><![CDATA[2023-12-20 20:22:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-20 12:22:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redis%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_61c1b2ecb9acb8b49352ec882fbb917c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[链表知识总结学习]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/21/112/</link>
		<pubDate>Thu, 21 Dec 2023 09:23:22 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>链表知识总结学习</strong></h3>

<blockquote>
  作者: 小木蕊 2023年12月18日
</blockquote>

在内存上是不连续的

<table>
<thead>
<tr>
  <th></th>
  <th>插入/删除</th>
  <th>查询</th>
  <th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
  <td>数组</td>
  <td>O(n)</td>
  <td>O(1)</td>
  <td>数据量固定,多查询</td>
</tr>
<tr>
  <td>链表</td>
  <td>O(1)</td>
  <td>O(n)</td>
  <td>数据量不固定,频繁删除</td>
</tr>
</tbody>
</table>

<strong>链表定义</strong>

<pre><code class="language-java line-numbers">public class ListNode {
    // 结点的值
    int val;

    // 下一个结点
    ListNode next;

    // 节点的构造函数(无参)
    public ListNode() {
    }

    // 节点的构造函数(有一个参数)
    public ListNode(int val) {
        this.val = val;
    }

    // 节点的构造函数(有两个参数)
    public ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}
</code></pre>

<strong>链表的删除与添加</strong>

方式一:

<ol>
<li>需要使用一个临时的指针<code>cur</code>来帮助遍历

<ul>
<li>直接使用head的话,改变了head指向的值,最终返回的时候无法返回head</li>
</ul></li>
<li>链表分为两种情况处理</p></li>
</ol>

<ul>
<li>头节点

<ul>
<li>因为头节点没有上一个节点故需要 <code>head = head.next</code></li>
</ul></li>
<li>非头节点

<ol>
<li>找到该节点的上一个节点 pre</li>
<li>将上一个节点的next指向当前节点的下一个节点<code>pre.next = cur.next</code></li>
</ol></li>
</ul>

<ol start="3">
<li>返回头节点head</li>
</ol>

<p>方式二:使用虚拟头节点统一处理

<ol>
<li>准备虚拟头节点<code>dummgHead = new ListNode()</code></li>
<li>初始化 dummyHead.next = head</li>
<li>需要使用一个临时的指针<code>cur</code>来帮助遍历</li>
<li>返回dummyHead.next</li>
</ol>

<strong>题目练习</strong>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a>

给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。

<strong>示例 1：</strong>

<img src="https://s2.loli.net/2023/12/21/jX7FMwC5HGdzSRh.jpg" alt="img" />

<pre><code class="line-numbers">输入：head = [1,2,3,4]
输出：[2,1,4,3]
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：head = []
输出：[]
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：head = [1]
输出：[1]
</code></pre>

<strong>提示：</strong>

<ul>
<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
</ul>

<strong>思路分析</strong>

整体思路上模拟节点之间的交换就好常规写代码步骤：

<ol>
<li>链表先创建 <code>虚拟头节点</code>来统一化处理</li>
<li>链表操作当前节点需要获得上一个，即遍历指针指向当前节点，实际处理的是下一个节点</p></li>
<li><p>找出此题的循环规律,模拟交换过程</p></li>
</ol>

<p><strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public ListNode swapPairs(ListNode head) {
        //创建虚拟头节点
        ListNode dummyHead = new ListNode(-1);
        dummyHead.next = head;
        ListNode temp;
        ListNode firstNode ;
        ListNode secondNode ;
        //指向操作节点的前一个
        ListNode cur = dummyHead;
        //使用一个cur来遍历，并且遍历的结束条件为 cur.next = null则是偶数个节点
        // cur.next.next = null,则说明是奇数个节点
        while (cur.next != null &amp;&amp; cur.next.next != null) {
            //需要提前保存第二个节点的.next值,不然交换后( secondNode.next =firstNode;)无法找到
            temp = cur.next.next.next;
           //first的值也要提前保存，不然(cur.next =secondNode)后无法找到
            firstNode = cur.next;
            secondNode = cur.next.next;
            cur.next =secondNode;
            secondNode.next =firstNode;
            firstNode.next=temp;
            //移动两步
            cur=firstNode;
        }
        //头节点依然是虚拟头节点的next
        return dummyHead.next;
    }
}
</code></pre>

<strong>总结</strong>

<ol>
<li>处理链表问题一定要先建立<code>虚拟头节点</code> 这样方便遍历</li>
<li>确认好返回结果的头节点在哪</li>
<li>指向的是当前前节点处理的是cur.next</li>
</ol>

<hr />

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/"><strong>19. 删除链表的倒数第 N 个结点</strong></a>

给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。

<strong>示例 1：</strong>

<img src="https://s2.loli.net/2023/12/21/kdEVYhW38FZ6pxC.jpg" alt="img" />

<pre><code class="line-numbers">输入：head = [1,2,3,4,5], n = 2
输出：[1,2,3,5]
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：head = [1], n = 1
输出：[]
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：head = [1,2], n = 1
输出：[1]
</code></pre>

<strong>思路</strong>

需要解决的问题是<code>倒数第n个是正数的几个，怎么定位到这个节点的位置</code>

最简单的方式是

<ol>
<li>遍历一下链表得到链表的size</li>
<li>根据size得到需要删除的节点位于正序的第几个直接删除</li>
</ol>

使用双指针fast slow

<ol>
<li>先让fast走n+1步</li>
<li>fast和slow同时走，直达fast道null此时slow指向需要删除的节点的上一个</li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummyHead = new ListNode(-1);
                dummyHead.next=head;
        ListNode fast = dummyHead;
        ListNode slow = dummyHead;
        //使用两个指针，在让fast先走n+1步
        for (int i = 0; i &lt;= n; i++) {
            fast=fast.next;
        }

        //随后fast，slow同时走，这样slow就指向就是导数第n个的上一个
        while (fast!=null){
            fast=fast.next;
            slow=slow.next;
        }

        slow.next=slow.next.next;
        return dummyHead.next;
    }
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date><![CDATA[2023-12-21 17:23:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-21 09:23:22]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-21 18:56:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-21 10:56:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%93%be%e8%a1%a8%e7%9f%a5%e8%af%86%e6%80%bb%e7%bb%93%e5%ad%a6%e4%b9%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%93%be%e8%a1%a8"><![CDATA[链表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[( •̀ ω •́ )✧力扣[面试题 02.07. 链表相交]]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/23/124/</link>
		<pubDate>Sat, 23 Dec 2023 13:30:29 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>( •̀ ω •́ )✧力扣<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></h3>

<blockquote>
  作者：小木蕊 2023年12月23日
</blockquote>

给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。

图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong>

<a class="wp-editor-md-post-content-link" href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><img src="https://s2.loli.net/2023/12/23/mRh5VWBvbcKSP6d.png" alt="img" /></a>

题目数据 <strong>保证</strong> 整个链式结构中不存在环。

<strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。

<strong>示例 1：</strong>

<a class="wp-editor-md-post-content-link" href="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><img src="https://s2.loli.net/2023/12/23/bqZnNQFRcWDi8EV.png" alt="img" /></a>

<strong>分析</strong>

<ol>
<li>需要将链表对齐即，同样的遍历规则然后判断指向A的指针和B的指针是否是同一个即可</li>
<li>怎么对齐怎么问题的关键

<ol>
<li>将A、B的长度求出，将其尾部对齐将长度长的先走 两条链表的长度差值</li>
<li>AB的交点只会出现在这个区间</li>
</ol></li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode curA = headA;
        ListNode curB = headB;
        int lenA = 0, lenB = 0;
        //求A的长度
//        while (curA.next != null) { A =[] 时无法通过
        while (curA != null) {
            lenA++;
            curA = curA.next;
        }
        //求B的长度
//        while (curB.next != null) {
        while (curB != null) {
            lenB++;
            curB = curB.next;
        }
        curA = headA;
        curB = headB;

        //保证A是最长的链表
        if (lenB &gt; lenA) {
            //交换长度
            int tmpLen = lenA;
            lenA = lenB;
            lenB = tmpLen;

            //交换指针的值
            ListNode tmeNode = curA;
            curA = curB;
            curB = tmeNode;
        }

        int gap = lenA - lenB;
        while (gap-- &gt; 0) {
            curA = curA.next;
        }

        while (curA != null) {
            if (curA == curB) {
                return curA;
            }
            curA = curA.next;
            curB = curB.next;
        }
        return null;
    }
}
</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/23/toSXsJcRKPmYqHk.png" alt="image-20231223212747221" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date><![CDATA[2023-12-23 21:30:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-23 13:30:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-23 21:31:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-23 13:31:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%cf%89-%e2%9c%a7%e5%8a%9b%e6%89%a3%e9%9d%a2%e8%af%95%e9%a2%98-02-07-%e9%93%be%e8%a1%a8%e7%9b%b8%e4%ba%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e9%93%be%e8%a1%a8"><![CDATA[链表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[哈希表 学习笔记]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/24/128/</link>
		<pubDate>Sun, 24 Dec 2023 12:43:59 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>哈希表 学习笔记</h3>

<blockquote>
  作者：小木蕊 2023年12月24日
</blockquote>

<ol>
<li>哈希表解决什么问题

<ul>
<li>快速判断一个元素是否在一个集合中</li>
</ul></li>
<li>常见使用场景

<ul>
<li>判断两个集合的交集，统计元素的出现次数</li>
</ul></li>
<li>判断是否需要去重和选择需要使用set还是array

<ul>
<li>set 可以快速定位，但是耗费的空间大，在数据量巨大的情况下 hash操作会耗费巨大时间</li>
<li>array 定位稍慢不取模</li>
</ul></li>
</ol>

<h6><strong>经典题目</strong></h6>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a>

给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。

<strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。

<strong>示例 1:</strong>

<pre><code class="line-numbers">输入: s = "anagram", t = "nagaram"
输出: true
</code></pre>

<strong>示例 2:</strong>

<pre><code class="line-numbers">输入: s = "rat", t = "car"
输出: false
</code></pre>

<strong>提示:</strong>

<ul>
<li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li>
<li><code>s</code> 和 <code>t</code> 仅包含小写字母</li>
</ul>

<strong>进阶:</strong> 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？

<strong>分析</strong>

<ol>
<li>典型的统计单词出现次数，使用 哈希表来完成</li>
</ol>

<strong>代码</strong>：

<pre><code class="language-java line-numbers">class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length()!=t.length()){
            return false;
        }
        //统计s 中字符出现的次数
        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; s.length(); i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }

        //若t中也有该字符，则将 map中的该字符的次数减一
        for (int i = 0; i &lt; t.length(); i++) {
            map.put(t.charAt(i), map.get(t.charAt(i)) != null ? map.get(t.charAt(i)) - 1 : -1);
            //次数小于0 移除该元素
            if (map.get(t.charAt(i)) &lt;= 0) {
                map.remove(t.charAt(i));
            }
        }

        //size 不为 0 则说明不是 字母已构成
        if (map.size() != 0) {
            return false;
        } else {
            return true;
        }
    }
}
</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/24/jGsFvfhgZR6mMST.png" alt="image-20231224204244593" />

<hr />

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a>

给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：

<ul>
<li><code>0 &lt;= i, j, k, l &lt; n</code></li>
<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>
</ul>

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
输出：2
解释：
两个元组如下：
1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
输出：1
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>n == nums1.length</code></li>
<li><code>n == nums2.length</code></li>
<li><code>n == nums3.length</code></li>
<li><code>n == nums4.length</code></li>
<li><code>1 &lt;= n &lt;= 200</code></li>
<li><code>-228 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 228</code></li>
</ul>

<strong>分析</strong>

和上题一样的思路

<ol>
<li>先填充HashMap 遍历 nums1，nums2的和入map key = a+b,value = 出现的次数</li>
<li>遍历 nums3 ，nums4 在map中查找 0 - (c+d )的值，即为  a + b = 0-(c+d)</li>
<li>找到 count += value 出现几次即 可以组成几个元组</li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        int count = 0;
        // map&lt;a+b,count&gt;
        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        for (int a : nums1) {
            for (int b : nums2) {
                map.put(a + b, map.getOrDefault(a + b, 0) + 1);
            }
        }

        for (int c : nums3) {
            for (int d : nums4) {
                if (map.containsKey(0 - (c + d))) {
                    count += map.get(0 - (c + d));
                }
            }
        }

        return count;
    }
}
</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/25/SqmQGwoMWtax4HO.png" alt="image-20231225161219456" />

<hr />

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a>

给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2]
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[9,4]
解释：[4,9] 也是可通过的
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>
<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>
</ul>

<strong>分析</strong>

<ol>
<li>遍历nums1 将 nums1使用set去重</li>
<li>遍历 nums2 求交集</li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set&lt;Integer&gt; set1 = new HashSet&lt;&gt;();
        for (int i = 0; i &lt; nums1.length; i++) {
            set1.add(nums1[i]);
        }

        ArrayList&lt;Integer&gt; res = new ArrayList&lt;&gt;();

        //求交集
        for (int i = 0; i &lt; nums2.length; i++) {
            if (set1.contains(nums2[i])){
                //交集 加一
                res.add(nums2[i]);
                //出去nums1的基数
                set1.remove(nums2[i]);
            }
        }
        //将交集用数组方式返回
        int[] ints = new int[res.size()];
        for (int i = 0; i &lt; ints.length; i++) {
            ints[i] = res.get(i);
        }
        return ints;
    }
}
</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/24/gRpAdi9KjFLHcsG.png" alt="image-20231224204212552" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date><![CDATA[2023-12-24 20:43:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-24 12:43:59]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-25 16:13:04]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-25 08:13:04]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%93%88%e5%b8%8c%e8%a1%a8-%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="hash"><![CDATA[哈希表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Docker 镜像打包问题]]></title>
		<link>https://www.xiaomurui.cn/?p=136</link>
		<pubDate>Sun, 24 Dec 2023 14:10:05 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>Docker 镜像打包问题</strong></h3>

<blockquote>
  作者:小木蕊 2023年12月24日
</blockquote>

<strong>前置准备</strong>

<ol>
<li>Dockerfile 文件 ，里面编写镜像包含哪些部分</li>
</ol>

<pre><code class="language-apl line-numbers"># 基础镜像
FROM openjdk:8-jre-slim
# 作者
MAINTAINER xiaomurui
# 配置
ENV PARAMS=""
# 时区
ENV TZ=PRC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
# 添加应用 jar 包位置
ADD chatgpt-api.jar /chatgpt-api.jar
## 在镜像运行为容器后执行的命令
ENTRYPOINT ["sh","-c","java -jar $JAVA_OPTS /chatgpt-api.jar $PARAMS"]
</code></pre>

<ol start="2">
<li>镜像需要jar包</li>
</ol>

<pre><code class="language-shell line-numbers"># 也可以直接点击 maven插件
# maven 先清楚之前文件
mvn clean
# maven install
mvn install
</code></pre>

<img src="https://s2.loli.net/2023/12/24/8TneQdDJISq4fy5.png" alt="image-20231224214012498" style="zoom: 80%;" />

<strong>打包过程</strong>

<ol>
<li>本地是否安装了docker

<ul>
<li>本地安装了docker 之间将 Java项目打包 为jar文件，直接本地 运行docker 打包命令<code>docker build -f ./Dockerfile -t xiaomurui/chatgpt-api .</code></li>
<li>在windos无法安装docker的情况下，假如是在本地安装了虚拟机在虚拟机中安装的docker 最近简单的是将 jar包和Dockerfile 放在东一个目录下 执行</li>
</ul></li>
<li>在idea中好像是可以连接远程docker直接在idea中构建但是还为尝试搞定目前已知的步骤

<ol>
<li>idea中下载 docker 插件</p></li>
<li>配置docker远程连接端口

<pre><code class="language-text line-numbers">vi /usr/lib/systemd/system/docker.service
</code></pre></li>
<li>找到 ExecStart，在最后面添加 -H tcp://0.0.0.0:2375

<pre><code class="language-shell line-numbers">[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375  ##这里添加
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutSec=0
RestartSec=2
Restart=always
</code></pre></li>
<li>重启docker</p></li>
</ol>

<pre><code class="language-shell line-numbers">systemctl daemon-reload && systemctl start docker
</code></pre>

<ol start="5">
<li>开放端口和防火墙</li>
</ol>

<pre><code class="language-shell line-numbers">firewall-cmd --zone=public --add-port=2375/tcp --permanent
iptables -I INPUT -p tcp --dport 2375 -j ACCEPT
</code></pre>

<ol start="6">
<li>idea中的配置

<ol>
<li>添加docker service</li>
</ol>

<img src="https://s2.loli.net/2023/12/24/atQX9xF5TyYGrgc.png" alt="image-20231224215547339" style="zoom:80%;" />

<ol start="2">
<li>添加连接

<img src="https://s2.loli.net/2023/12/24/FcnNAylVp73OEXk.png" alt="image-20231224215811534" style="zoom:80%;" /></p></li>
<li><p>这样在Dockerfile文件中 可直接运行，但是很多配置项还没有搞定，导致之间build会有 报错 <strong>未来在研究好</strong>

<img src="https://s2.loli.net/2023/12/24/skAi9eFvHOwMW7G.png" alt="image-20231224215944855" style="zoom:80%;" /></p></li>
</ol></li>
</ol></li>
<li><p>打包命令</p></li>
</ol>

<pre><code class="language-shell line-numbers"># ./Dockerfile 文件路径 
# xiaomurui/chatgpt-api 打包镜像名称  
# . 当前路径 
docker build -f ./Dockerfile -t xiaomurui/chatgpt-api .
</code></pre>

<p><strong>运行打包的镜像</strong>

<pre><code class="language-shell line-numbers">#在windows 的cmd窗口下 不能换行需要 一行显示
docker run -p 8080:8080 \
--name chatgpt-api \
-d xiaomurui/chatgpt-api
</code></pre>

很多时候在无法运行镜像的时候可以先清理一遍之前的 <code>docker rm -f name</code>

<h6><strong>总结</strong></h6>

<ol>
<li>在windos中直接装有docker很方便 直接 在idea中运行Dockerfile即可</li>
<li>若没有尽量将 Dockerfile 传到 虚拟机的一个目录中和Jar文件放在一起使用<code>docker build -f ./Dockerfile -t xiaomurui/chatgpt-api .</code>，传入虚拟机中时可使用<a class="wp-editor-md-post-content-link" href="https://mobaxterm.mobatek.net/download.html">MobaXterm</a>等ssh工具直接可以将本地文件拖拽到虚拟机中</li>
<li>idea 可以连接远程的docker打包但是需要配置相应的参数较为困难暂时不会</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2023-12-24 22:10:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-24 14:10:05]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-%e9%95%9c%e5%83%8f%e6%89%93%e5%8c%85%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[139]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Docker 安装 Pointer踩坑]]></title>
		<link>https://www.xiaomurui.cn/?p=140</link>
		<pubDate>Sun, 24 Dec 2023 14:17:33 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>**Docker 安装 Pointer踩坑 **</h4>

<ol>
<li>踩坑1 访问9000无法访问

未在安全端口配置9000放行，宝塔面板不可靠，在宝塔面板中配置不生效

<img src="https://s2.loli.net/2023/12/22/4CRFYd9h1e3S5Oc.png" alt="image-20231222211058847" /></p></li>
</ol>

宝塔面版中并没有检测到端口的配置信息

<img src="https://s2.loli.net/2023/12/22/zpIhxM1XaquT6yZ.png" alt="image-20231222211210462"  />

<strong>结论</strong>

<ul>
<li>配置信息尽量去云服务器的官方控制台配置，不依赖宝塔面板</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date><![CDATA[2023-12-24 22:17:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-24 14:17:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 20:59:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 12:59:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[docker-%e5%ae%89%e8%a3%85-pointer%e8%b8%a9%e5%9d%91]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker%e5%ae%b9%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95"><![CDATA[docker合集]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Docker 学习笔记]]></title>
		<link>https://www.xiaomurui.cn/?p=144</link>
		<pubDate>Mon, 25 Dec 2023 06:51:41 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Docker 学习笔记</h3>

<blockquote>
  作者：小木蕊 2023年12月25日
</blockquote>

同学们，在前两天我们学习了Linux操作系统的常见命令以及如何在Linux上部署一个单体项目。大家想一想自己最大的感受是什么？

我相信，除了个别天赋异禀的同学以外，大多数同学都会有相同的感受，那就是麻烦。核心体现在三点：

<ul>
<li>命令太多了，记不住</li>
<li>软件安装包名字复杂，不知道去哪里找</li>
<li>安装和部署步骤复杂，容易出错</li>
</ul>

其实上述问题不仅仅是新手，即便是运维在安装、部署的时候一样会觉得麻烦、容易出错。

特别是我们即将进入微服务阶段学习，微服务项目动辄就是几十台、上百台服务需要部署，有些大型项目甚至达到数万台服务。而<strong>由于每台服务器的运行环境不同，你写好的安装流程、部署脚本并不一定在每个服务器都能正常运行</strong>，经常会出错。这就给系统的部署运维带来了很多困难。

那么，有没有一种技术能够避免部署对服务器环境的依赖，减少复杂的部署流程呢？

答案是肯定的，这就是我们今天要学习的<strong>Docker</strong>技术。你会发现，有了Docker以后项目的部署如丝般顺滑，大大减少了运维工作量。

即便你对Linux不熟悉，你也能<strong>轻松部署各种常见软件、Java项目</strong>。

通过今天的学习，希望大家能达成下面的学习目标：

<ul>
<li>能利用Docker部署常见软件</li>
<li>能利用Docker打包并部署Java应用</li>
<li>理解Docker数据卷的基本作用</li>
<li>能看懂DockerCompose文件</li>
</ul>

<h1>1.快速入门</h1>

要想让Docker帮我们安装和部署软件，肯定要保证你的机器上有Docker. 由于大家的操作系统各不相同，安装方式也不同。为了便于大家学习，我们统一在CentOS的虚拟机中安装Docker，统一学习环境。

注意：使用MacBook的同学也请利用 VMwareFusion来安装虚拟机，并在虚拟机中学习Docker使用。

安装方式参考文档：《安装Docker》

<h2>1.1.部署MySQL</h2>

首先，我们利用Docker来安装一个MySQL软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。

如果是利用传统方式部署MySQL，大概的步骤有：

<ul>
<li>搜索并下载MySQL安装包</li>
<li>上传至Linux环境</li>
<li>编译和配置环境</li>
<li>安装</li>
</ul>

而使用Docker安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用CV大法）：

<pre><code class="language-PowerShell line-numbers">docker run -d \
  --name mysql \
  -p 3306:3306 \
  -e TZ=Asia/Shanghai \
  -e MYSQL_ROOT_PASSWORD=123 \
  mysql
</code></pre>

运行效果如图：

<img src="https://s2.loli.net/2023/12/25/6KvGocahepmQgLs.png" alt="img" />

MySQL安装完毕！通过任意客户端工具即可连接到MySQL.

大家可以发现，当我们执行命令后，Docker做的第一件事情，是去自动搜索并下载了MySQL，然后会自动运行MySQL，我们完全不用插手，是不是非常方便。

而且，这种安装方式你完全不用考虑运行的操作系统环境，它不仅仅在CentOS系统是这样，在Ubuntu系统、macOS系统、甚至是装了WSL的Windows下，都可以使用这条命令来安装MySQL。

要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！

而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。

说明：

<ul>
<li>镜像：英文是image</li>
<li>容器：英文是container</li>
</ul>

<blockquote>
  因此，Docker安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。
</blockquote>

Docker会根据命令中的镜像名称自动搜索并下载镜像，那么问题来了，它是去哪里搜索和下载镜像的呢？这些镜像又是谁制作的呢？

Docker官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了Docker镜像交流的社区：

https://hub.docker.com/

基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。

像这种提供存储、管理Docker镜像的服务器，被称为DockerRegistry，可以翻译为镜像仓库。DockerHub网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。

官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。

总之，镜像的来源有两种：

<ul>
<li>基于官方基础镜像自己制作</li>
<li>直接去DockerRegistry下载</li>
</ul>

<strong>总结一下</strong>：

Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。

用一幅图标示如下：

暂时无法在飞书文档外展示此内容

<h2>1.2.命令解读</h2>

利用Docker快速的安装了MySQL，非常的方便，不过我们执行的命令到底是什么意思呢？

<pre><code class="language-PowerShell line-numbers">docker run -d \
  --name mysql \
  -p 3306:3306 \
  -e TZ=Asia/Shanghai \
  -e MYSQL_ROOT_PASSWORD=123 \
  mysql
</code></pre>

<blockquote>
  解读：
  
  <ul>
  <li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code>则是让容器以后台进程运行</li>
  <li><code>--name mysql</code> : 给容器起个名字叫<code>mysql</code>，你可以叫别的</li>
  <li><code>-p 3306:3306</code> : 设置端口映射。
  
  <ul>
  <li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将****宿主机****端口****映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li>
  <li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li>
  <li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li>
  </ul></li>
  <li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数
  
  <ul>
  <li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li>
  <li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li>
  </ul></li>
  <li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker会根据这个名字搜索并下载镜像
  
  <ul>
  <li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li>
  <li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li>
  </ul></li>
  </ul>
</blockquote>

镜像的名称不是随意的，而是要到DockerRegistry中寻找，镜像运行时的配置也不是随意的，要参考镜像的帮助文档，这些在DockerHub网站或者软件的官方网站中都能找到。

如果我们要安装其它软件，也可以到DockerRegistry中寻找对应的镜像名称和版本，阅读相关配置即可。

<h1>2.Docker基础</h1>

接下来，我们一起来学习Docker使用的一些基础知识，为将来部署项目打下基础。具体用法可以参考Docker官方文档：

https://docs.docker.com/

<h2>2.1.常见命令</h2>

首先我们来学习Docker中的常见命令，可以参考官方文档：

https://docs.docker.com/engine/reference/commandline/cli/

<h3>2.1.1.命令介绍</h3>

其中，比较常见的命令有：

<table>
<thead>
<tr>
  <th align="left"><strong>命令</strong></th>
  <th align="left"><strong>说明</strong></th>
  <th align="left"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">docker pull</td>
  <td align="left">拉取镜像</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td>
</tr>
<tr>
  <td align="left">docker push</td>
  <td align="left">推送镜像到DockerRegistry</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td>
</tr>
<tr>
  <td align="left">docker images</td>
  <td align="left">查看本地镜像</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td>
</tr>
<tr>
  <td align="left">docker rmi</td>
  <td align="left">删除本地镜像</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td>
</tr>
<tr>
  <td align="left">docker run</td>
  <td align="left">创建并运行容器（不能重复创建）</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td>
</tr>
<tr>
  <td align="left">docker stop</td>
  <td align="left">停止指定容器</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td>
</tr>
<tr>
  <td align="left">docker start</td>
  <td align="left">启动指定容器</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td>
</tr>
<tr>
  <td align="left">docker restart</td>
  <td align="left">重新启动容器</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td>
</tr>
<tr>
  <td align="left">docker rm</td>
  <td align="left">删除指定容器</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker ps</td>
  <td align="left">查看容器</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td>
</tr>
<tr>
  <td align="left">docker logs</td>
  <td align="left">查看容器运行日志</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td>
</tr>
<tr>
  <td align="left">docker exec</td>
  <td align="left">进入容器</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td>
</tr>
<tr>
  <td align="left">docker save</td>
  <td align="left">保存镜像到本地压缩文件</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td>
</tr>
<tr>
  <td align="left">docker load</td>
  <td align="left">加载本地压缩文件到镜像</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td>
</tr>
<tr>
  <td align="left">docker inspect</td>
  <td align="left">查看容器详细信息</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td>
</tr>
</tbody>
</table>

用一副图来表示这些命令的关系：

暂时无法在飞书文档外展示此内容

补充：

默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：

<pre><code class="language-PowerShell line-numbers"># Docker开机自启
systemctl enable docker

# Docker容器开机自启
docker update --restart=always [容器名/容器id]
</code></pre>

<h3>2.1.2.演示</h3>

教学环节说明：我们以Nginx为例给大家演示上述命令。

<pre><code class="language-PowerShell line-numbers"># 第1步，去DockerHub查看nginx镜像仓库及相关信息

# 第2步，拉取Nginx镜像
docker pull nginx

# 第3步，查看镜像
docker images
# 结果如下：
REPOSITORY   TAG       IMAGE ID       CREATED         SIZE
nginx        latest    605c77e624dd   16 months ago   141MB
mysql        latest    3218b38490ce   17 months ago   516MB

# 第4步，创建并允许Nginx容器
docker run -d --name nginx -p 80:80 nginx

# 第5步，查看运行中容器
docker ps
# 也可以加格式化方式访问，格式会更加清爽
docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}\t{{.Names}}"

# 第6步，访问网页，地址：http://虚拟机地址

# 第7步，停止容器
docker stop nginx

# 第8步，查看所有容器
docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}\t{{.Names}}"

# 第9步，再次启动nginx容器
docker start nginx

# 第10步，再次查看容器
docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}\t{{.Names}}"

# 第11步，查看容器详细信息
docker inspect nginx

# 第12步，进入容器,查看容器内目录
docker exec -it nginx bash
# 或者，可以进入MySQL
docker exec -it mysql mysql -uroot -p

# 第13步，删除容器
docker rm nginx
# 发现无法删除，因为容器运行中，强制删除容器
docker rm -f nginx
</code></pre>

<h3>2.1.3.命令别名</h3>

给常用Docker命令起别名，方便我们访问：

<pre><code class="language-PowerShell line-numbers"># 修改/root/.bashrc文件
vi /root/.bashrc
内容如下：
# .bashrc

# User specific aliases and functions

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias dps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}\t{{.Names}}"'
alias dis='docker images'

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi
</code></pre>

然后，执行命令使别名生效

<pre><code class="language-PowerShell line-numbers">source /root/.bashrc
</code></pre>

接下来，试试看新的命令吧。

<h2>2.2.数据卷</h2>

容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：

<ul>
<li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li>
<li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li>
<li>我想要让Nginx代理我的静态资源怎么办？</li>
</ul>

因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器****解耦</strong>。

<h3>2.2.1.什么是数据卷</h3>

<strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机****目录</strong>之间映射的桥梁。

以Nginx为例，我们知道Nginx中有两个关键的目录：

<ul>
<li><code>html</code>：放置一些静态资源</li>
<li><code>conf</code>：放置配置文件</li>
</ul>

如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。

但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：

暂时无法在飞书文档外展示此内容

在上图中：

<ul>
<li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li>
<li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li>
<li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li>
</ul>

这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。

<strong>小提示</strong>：

<code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code>。

<strong>为什么不让容器目录直接指向****宿主机****目录呢</strong>？

<ul>
<li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li>
<li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li>
</ul>

不过，我们通过由于数据卷目录比较深，不好寻找，通常我们也<strong>允许让容器直接与****宿主机****目录挂载而不使用数据卷</strong>，具体参考2.2.3小节。

<h3>2.2.2.数据卷命令</h3>

数据卷的相关命令有：

<table>
<thead>
<tr>
  <th align="left"><strong>命令</strong></th>
  <th align="left"><strong>说明</strong></th>
  <th align="left"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">docker volume create</td>
  <td align="left">创建数据卷</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td>
</tr>
<tr>
  <td align="left">docker volume ls</td>
  <td align="left">查看所有数据卷</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker volume rm</td>
  <td align="left">删除指定数据卷</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker volume inspect</td>
  <td align="left">查看某个数据卷的详情</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker volume prune</td>
  <td align="left">清除数据卷</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td>
</tr>
</tbody>
</table>

注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且<strong>创建容器的过程中，数据卷会自动创建</strong>。

教学<strong>演示环节</strong>：演示一下nginx的html目录挂载

<pre><code class="language-PowerShell line-numbers"># 1.首先创建容器并指定数据卷，注意通过 -v 参数来指定数据卷
docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx

# 2.然后查看数据卷
docker volume ls
# 结果
DRIVER    VOLUME NAME
local     29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f
local     html

# 3.查看数据卷详情
docker volume inspect html
# 结果
[
    {
        "CreatedAt": "2024-05-17T19:57:08+08:00",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/html/_data",
        "Name": "html",
        "Options": null,
        "Scope": "local"
    }
]

# 4.查看/var/lib/docker/volumes/html/_data目录
ll /var/lib/docker/volumes/html/_data
# 可以看到与nginx的html目录内容一样，结果如下：
总用量 8
-rw-r--r--. 1 root root 497 12月 28 2021 50x.html
-rw-r--r--. 1 root root 615 12月 28 2021 index.html

# 5.进入该目录，并随意修改index.html内容
cd /var/lib/docker/volumes/html/_data
vi index.html

# 6.打开页面，查看效果

# 7.进入容器内部，查看/usr/share/nginx/html目录内的文件是否变化
docker exec -it nginx bash
</code></pre>

教学<strong>演示环节</strong>：演示一下MySQL的匿名数据卷

<pre><code class="language-PowerShell line-numbers"># 1.查看MySQL容器详细信息
docker inspect mysql
# 关注其中.Config.Volumes部分和.Mounts部分
</code></pre>

我们关注两部分内容，第一是<code>.Config.Volumes</code>部分：

<pre><code class="language-JSON line-numbers">{
  "Config": {
    // ... 略
    "Volumes": {
      "/var/lib/mysql": {}
    }
    // ... 略
  }
}
</code></pre>

可以发现这个容器声明了一个本地目录，需要挂载数据卷，但是<strong>数据卷未定义</strong>。这就是匿名卷。

然后，我们再看结果中的<code>.Mounts</code>部分：

<pre><code class="language-JSON line-numbers">{
  "Mounts": [
    {
      "Type": "volume",
      "Name": "29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f",
      "Source": "/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data",
      "Destination": "/var/lib/mysql",
      "Driver": "local",
    }
  ]
}
</code></pre>

可以发现，其中有几个关键属性：

<ul>
<li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li>
<li>Source：宿主机目录</li>
<li>Destination : 容器内的目录</li>
</ul>

上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。

接下来，可以查看该目录下的MySQL的data文件：

<pre><code class="language-Bash line-numbers">ls -l /var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data
</code></pre>

注意：每一个不同的镜像，将来创建容器后内部有哪些目录可以挂载，可以参考DockerHub对应的页面

<h3>2.2.3.挂载本地目录或文件</h3>

可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：

<pre><code class="language-Bash line-numbers"># 挂载本地目录
-v 本地目录:容器内目录
# 挂载本地文件
-v 本地文件:容器内文件
</code></pre>

<strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。

例如：

<pre><code class="language-Bash line-numbers">-v mysql:/var/lib/mysql # 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷
-v ./mysql:/var/lib/mysql # 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录
</code></pre>

<strong>教学演示</strong>，删除并重新创建mysql容器，并完成本地目录挂载：

<ul>
<li>挂载<code>/root/mysql/data</code>到容器内的<code>/var/lib/mysql</code>目录</li>
<li>挂载<code>/root/mysql/init</code>到容器内的<code>/docker-entrypoint-initdb.d</code>目录（初始化的SQL脚本目录）</li>
<li>挂载<code>/root/mysql/conf</code>到容器内的<code>/etc/mysql/conf.d</code>目录（这个是MySQL配置文件目录）</li>
</ul>

在课前资料中已经准备好了mysql的<code>init</code>目录和<code>conf</code>目录：

<img src="https://s2.loli.net/2023/12/25/BKSn7ezX8AkmEij.png" alt="img" />

以及对应的初始化SQL脚本和配置文件：

<img src="https://s2.loli.net/2023/12/25/iKk3sTqJC5ln1aS.png" alt="img" />

<img src="https://s2.loli.net/2023/12/25/nFWUAw1ui7kTsM8.png" alt="img" />

其中，hm.cnf主要是配置了MySQL的默认编码，改为utf8mb4；而hmall.sql则是后面我们要用到的黑马商城项目的初始化SQL脚本。

我们直接将整个mysql目录上传至虚拟机的<code>/root</code>目录下：

<img src="https://s2.loli.net/2023/12/25/hkqIM56OFCJbP3n.png" alt="img" />

接下来，我们演示本地目录挂载：

<pre><code class="language-Bash line-numbers"># 1.删除原来的MySQL容器
docker rm -f mysql

# 2.进入root目录
cd ~

# 3.创建并运行新mysql容器，挂载本地目录
docker run -d \
  --name mysql \
  -p 3306:3306 \
  -e TZ=Asia/Shanghai \
  -e MYSQL_ROOT_PASSWORD=123 \
  -v ./mysql/data:/var/lib/mysql \
  -v ./mysql/conf:/etc/mysql/conf.d \
  -v ./mysql/init:/docker-entrypoint-initdb.d \
  mysql

# 4.查看root目录，可以发现~/mysql/data目录已经自动创建好了
ls -l mysql
# 结果：
总用量 4
drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf
drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data
drwxr-xr-x. 2 root    root   23 5月  19 15:11 init

# 查看data目录，会发现里面有大量数据库数据，说明数据库完成了初始化
ls -l data

# 5.查看MySQL容器内数据
# 5.1.进入MySQL
docker exec -it mysql mysql -uroot -p123
# 5.2.查看编码表
show variables like "%char%";
# 5.3.结果，发现编码是utf8mb4没有问题
+--------------------------+--------------------------------+
| Variable_name            | Value                          |
+--------------------------+--------------------------------+
| character_set_client     | utf8mb4                        |
| character_set_connection | utf8mb4                        |
| character_set_database   | utf8mb4                        |
| character_set_filesystem | binary                         |
| character_set_results    | utf8mb4                        |
| character_set_server     | utf8mb4                        |
| character_set_system     | utf8mb3                        |
| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |
+--------------------------+--------------------------------+

# 6.查看数据
# 6.1.查看数据库
show databases;
# 结果，hmall是黑马商城数据库
+--------------------+
| Database           |
+--------------------+
| hmall              |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)
# 6.2.切换到hmall数据库
use hmall;
# 6.3.查看表
show tables;
# 结果：
+-----------------+
| Tables_in_hmall |
+-----------------+
| address         |
| cart            |
| item            |
| order           |
| order_detail    |
| order_logistics |
| pay_order       |
| user            |
+-----------------+
# 6.4.查看address表数据
+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+
| id | user_id | province | city   | town     | mobile      | street        | contact   | is_default | notes |
+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+
| 59 |       1 | 北京     | 北京   | 朝阳区    | 13900112222 | 金燕龙办公楼   | 李佳诚    | 0          | NULL  |
| 60 |       1 | 北京     | 北京   | 朝阳区    | 13700221122 | 修正大厦       | 李佳红    | 0          | NULL  |
| 61 |       1 | 上海     | 上海   | 浦东新区  | 13301212233 | 航头镇航头路   | 李佳星    | 1          | NULL  |
| 63 |       1 | 广东     | 佛山   | 永春      | 13301212233 | 永春武馆       | 李晓龙    | 0          | NULL  |
+----+---------+----------+--------+----------+-------------+---------------+-----------+------------+-------+
4 rows in set (0.00 sec)
</code></pre>

<h2>2.3.镜像</h2>

前面我们一直在使用别人准备好的镜像，那如果我要部署一个Java项目，把它打包为一个镜像该怎么做呢？

<h3>2.3.1.镜像结构</h3>

要想自己构建镜像，必须先了解镜像的结构。

之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。

因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。

举个例子，我们要从0部署一个Java应用，大概流程是这样：

<ul>
<li>准备一个linux服务（CentOS或者Ubuntu均可）</li>
<li>安装并配置JDK</li>
<li>上传Jar包</li>
<li>运行jar包</li>
</ul>

那因此，我们打包镜像也是分成这么几步：

<ul>
<li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li>
<li>安装并配置JDK</li>
<li>拷贝jar包</li>
<li>配置启动脚本</li>
</ul>

上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。

但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。

例如，第一步中需要的Linux运行环境，通用性就很强，所以Docker官方就制作了这样的只包含Linux运行环境的镜像。我们在制作java镜像时，就无需重复制作，直接使用Docker官方提供的CentOS或Ubuntu镜像作为基础镜像。然后再搭建其它层即可，这样逐层搭建，最终整个Java项目的镜像结构如图所示：

<img src="https://s2.loli.net/2023/12/25/x8UNBc6tDl39iM2.png" alt="img" />

<h3>2.3.2.Dockerfile</h3>

由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。

而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：

https://docs.docker.com/engine/reference/builder/

其中的语法比较多，比较常用的有：

<table>
<thead>
<tr>
  <th align="left"><strong>指令</strong></th>
  <th align="left"><strong>说明</strong></th>
  <th align="left"><strong>示例</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left"><strong>FROM</strong></td>
  <td align="left">指定基础镜像</td>
  <td align="left"><code>FROM centos:6</code></td>
</tr>
<tr>
  <td align="left"><strong>ENV</strong></td>
  <td align="left">设置环境变量，可在后面指令使用</td>
  <td align="left"><code>ENV key value</code></td>
</tr>
<tr>
  <td align="left"><strong>COPY</strong></td>
  <td align="left">拷贝本地文件到镜像的指定目录</td>
  <td align="left"><code>COPY ./xx.jar /tmp/app.jar</code></td>
</tr>
<tr>
  <td align="left"><strong>RUN</strong></td>
  <td align="left">执行Linux的shell命令，一般是安装过程的命令</td>
  <td align="left"><code>RUN yum install gcc</code></td>
</tr>
<tr>
  <td align="left"><strong>EXPOSE</strong></td>
  <td align="left">指定容器运行时监听的端口，是给镜像使用者看的</td>
  <td align="left">EXPOSE 8080</td>
</tr>
<tr>
  <td align="left"><strong>ENTRYPOINT</strong></td>
  <td align="left">镜像中应用的启动命令，容器运行时调用</td>
  <td align="left">ENTRYPOINT java -jar xx.jar</td>
</tr>
</tbody>
</table>

例如，要基于Ubuntu镜像来构建一个Java应用，其Dockerfile内容如下：

<pre><code class="language-Dockerfile line-numbers"># 指定基础镜像
FROM ubuntu:16.04
# 配置环境变量，JDK的安装目录、容器内时区
ENV JAVA_DIR=/usr/local
ENV TZ=Asia/Shanghai
# 拷贝jdk和java项目的包
COPY ./jdk8.tar.gz $JAVA_DIR/
COPY ./docker-demo.jar /tmp/app.jar
# 设定时区
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
# 安装JDK
RUN cd $JAVA_DIR \
 && tar -xf ./jdk8.tar.gz \
 && mv ./jdk1.8.0_144 ./java8
# 配置环境变量
ENV JAVA_HOME=$JAVA_DIR/java8
ENV PATH=$PATH:$JAVA_HOME/bin
# 指定项目监听的端口
EXPOSE 8080
# 入口，java项目的启动命令
ENTRYPOINT ["java", "-jar", "/app.jar"]
</code></pre>

同学们思考一下：以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，是不是很麻烦。

所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：

<pre><code class="language-Dockerfile line-numbers"># 基础镜像
FROM openjdk:11.0-jre-buster
# 设定时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
# 拷贝jar包
COPY docker-demo.jar /app.jar
# 入口
ENTRYPOINT ["java", "-jar", "/app.jar"]
</code></pre>

是不是简单多了。

<h3>2.3.3.构建镜像</h3>

当Dockerfile文件写好以后，就可以利用命令来构建镜像了。

在课前资料中，我们准备好了一个demo项目及对应的Dockerfile：

<img src="https://s2.loli.net/2023/12/25/hE4b12DejkXyZs6.png" alt="img" />

首先，我们将课前资料提供的<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：

<img src="https://s2.loli.net/2023/12/25/bWQtesc2OCqJy34.png" alt="img" />

然后，执行命令，构建镜像：

<pre><code class="language-Bash line-numbers"># 进入镜像目录
cd /root/demo
# 开始构建
docker build -t docker-demo:1.0 .
</code></pre>

命令说明：

<ul>
<li><code>docker build</code>: 就是构建一个docker镜像</li>
<li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li>
<li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：

<ul>
<li>

<pre><code class="language-Bash line-numbers"># 直接指定Dockerfile目录
docker build -t docker-demo:1.0 /root/demo
</code></pre>


</li>
</ul></li>
</ul>

结果：

<img src="https://s2.loli.net/2023/12/25/BWrVF7HKe8qPtu3.png" alt="img" />

查看镜像列表：

<pre><code class="language-Bash line-numbers"># 查看镜像列表：
docker images
# 结果
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB
nginx         latest    605c77e624dd   16 months ago    141MB
mysql         latest    3218b38490ce   17 months ago    516MB
</code></pre>

然后尝试运行该镜像：

<pre><code class="language-Bash line-numbers"># 1.创建并运行容器
docker run -d --name dd -p 8090:8090 docker-demo:1.0
# 2.查看容器
dps
# 结果
CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES
78a000447b49   docker-demo:1.0   0.0.0.0:8080->8080/tcp, :::8090->8090/tcp              Up 2 seconds   dd
f63cfead8502   mysql             0.0.0.0:3306->3306/tcp, :::3306->3306/tcp, 33060/tcp   Up 2 hours     mysql

# 3.访问
curl localhost:8080/hello/count
# 结果：
<h5>欢迎访问黑马商城, 这是您第1次访问<h5>
</code></pre>

<h2>2.4.网络</h2>

上节课我们创建了一个Java项目的容器，而Java项目往往需要访问其它各种中间件，例如MySQL、Redis等。现在，我们的容器之间能否互相访问呢？我们来测试一下

首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：

<pre><code class="language-Bash line-numbers"># 1.用基本命令，寻找Networks.bridge.IPAddress属性
docker inspect mysql
# 也可以使用format过滤结果
docker inspect --format='{{range .NetworkSettings.Networks}}{{println .IPAddress}}{{end}}' mysql
# 得到IP地址如下：
172.17.0.2

# 2.然后通过命令进入dd容器
docker exec -it dd bash

# 3.在容器内，通过ping命令测试网络
ping 172.17.0.2
# 结果
PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.
64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms
64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms
64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms
</code></pre>

发现可以互联，没有问题。

但是，容器的网络IP其实是一个虚拟的IP，其值并不固定与某一个容器绑定，如果我们在开发时写死某个IP，而在部署时很可能MySQL容器的IP会发生变化，连接会失败。

所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：

https://docs.docker.com/engine/reference/commandline/network/

常见命令有：

<table>
<thead>
<tr>
  <th align="left"><strong>命令</strong></th>
  <th align="left"><strong>说明</strong></th>
  <th align="left"><strong>文档地址</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">docker network create</td>
  <td align="left">创建一个网络</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td>
</tr>
<tr>
  <td align="left">docker network ls</td>
  <td align="left">查看所有网络</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker network rm</td>
  <td align="left">删除指定网络</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker network prune</td>
  <td align="left">清除未使用的网络</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker network connect</td>
  <td align="left">使指定容器连接加入某网络</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td>
</tr>
<tr>
  <td align="left">docker network disconnect</td>
  <td align="left">使指定容器连接离开某网络</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td>
</tr>
<tr>
  <td align="left">docker network inspect</td>
  <td align="left">查看网络详细信息</td>
  <td align="left"><a class="wp-editor-md-post-content-link" href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td>
</tr>
</tbody>
</table>

教学演示：自定义网络

<pre><code class="language-Bash line-numbers"># 1.首先通过命令创建一个网络
docker network create hmall

# 2.然后查看网络
docker network ls
# 结果：
NETWORK ID     NAME      DRIVER    SCOPE
639bc44d0a87   bridge    bridge    local
403f16ec62a2   hmall     bridge    local
0dc0f72a0fbb   host      host      local
cd8d3e8df47b   none      null      local
# 其中，除了hmall以外，其它都是默认的网络

# 3.让dd和mysql都加入该网络，注意，在加入网络时可以通过--alias给容器起别名
# 这样该网络内的其它容器可以用别名互相访问！
# 3.1.mysql容器，指定别名为db，另外每一个容器都有一个别名是容器名
docker network connect hmall mysql --alias db
# 3.2.db容器，也就是我们的java项目
docker network connect hmall dd

# 4.进入dd容器，尝试利用别名访问db
# 4.1.进入容器
docker exec -it dd bash
# 4.2.用db别名访问
ping db
# 结果
PING db (172.18.0.2) 56(84) bytes of data.
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.070 ms
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.056 ms
# 4.3.用容器名访问
ping mysql
# 结果：
PING mysql (172.18.0.2) 56(84) bytes of data.
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=1 ttl=64 time=0.044 ms
64 bytes from mysql.hmall (172.18.0.2): icmp_seq=2 ttl=64 time=0.054 ms
</code></pre>

OK，现在无需记住IP地址也可以实现容器互联了。

<strong>总结</strong>：

<ul>
<li>在自定义网络中，可以给容器起多个别名，默认的别名是容器名本身</li>
<li>在同一个自定义网络中的容器，可以通过别名互相访问</li>
</ul>

<h1>3.项目部署</h1>

好了，我们已经熟悉了Docker的基本用法，接下来可以尝试部署项目了。

在课前资料中已经提供了一个黑马商城项目给大家，如图：

项目说明：

<ul>
<li>hmall：商城的后端代码</li>
<li>hmall-portal：商城用户端的前端代码</li>
<li>hmall-admin：商城管理端的前端代码</li>
</ul>

部署的容器及端口说明：

<table>
<thead>
<tr>
  <th align="left"><strong>项目</strong></th>
  <th align="left"><strong>容器名</strong></th>
  <th align="left"><strong>端口</strong></th>
  <th align="left"><strong>备注</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">hmall</td>
  <td align="left">hmall</td>
  <td align="left">8080</td>
  <td align="left">黑马商城后端API入口</td>
</tr>
<tr>
  <td align="left">hmall-portal</td>
  <td align="left">nginx</td>
  <td align="left">18080</td>
  <td align="left">黑马商城用户端入口</td>
</tr>
<tr>
  <td align="left">hmall-admin</td>
  <td align="left">18081</td>
  <td align="left">黑马商城管理端入口</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">mysql</td>
  <td align="left">mysql</td>
  <td align="left">3306</td>
  <td align="left">数据库</td>
</tr>
</tbody>
</table>

在正式部署前，我们先删除之前的nginx、dd两个容器：

<pre><code class="language-Bash line-numbers">docker rm -f nginx dd
</code></pre>

mysql容器中已经准备好了商城的数据，所以就不再删除了。

<h2>3.1.部署Java项目</h2>

<code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：

<img src="https://s2.loli.net/2023/12/25/lbsFx6Idq9kjV7h.png" alt="img" />

我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：

<img src="https://s2.loli.net/2023/12/25/zPmqa5c2SXYxMbh.png" alt="img" />

其中的<code>application-dev.yaml</code>是部署到开发环境的配置，<code>application-local.yaml</code>是本地运行时的配置。

查看application.yaml，你会发现其中的JDBC地址并未写死，而是读取变量：

<img src="https://s2.loli.net/2023/12/25/LkvDemVxrfod9GM.png" alt="img" />

这两个变量在<code>application-dev.yaml</code>和<code>application-local.yaml</code>中并不相同：

<img src="https://s2.loli.net/2023/12/25/XjGFnaZBu5s4oAK.png" alt="img" />

在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。

我们将项目打包：

<img src="https://s2.loli.net/2023/12/25/dfhbiQRHIVLko84.png" alt="img" />

结果：

<img src="https://s2.loli.net/2023/12/25/iLDpjdKQSC6ZzoP.png" alt="img" />

将<code>hm-service</code>目录下的<code>Dockerfile</code>和<code>hm-service/target</code>目录下的<code>hm-service.jar</code>一起上传到虚拟机的<code>root</code>目录：

<img src="https://s2.loli.net/2023/12/25/ClmFtZcYugbRAe4.png" alt="img" />

部署项目：

<pre><code class="language-Bash line-numbers"># 1.构建项目镜像，不指定tag，则默认为latest
docker build -t hmall .

# 2.查看镜像
docker images
# 结果
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
hmall         latest    0bb07b2c34b9   43 seconds ago   362MB
docker-demo   1.0       49743484da68   24 hours ago     327MB
nginx         latest    605c77e624dd   16 months ago    141MB
mysql         latest    3218b38490ce   17 months ago    516MB

# 3.创建并运行容器，并通过--network将其加入hmall网络，这样才能通过容器名访问mysql
docker run -d --name hmall --network hmall -p 8080:8080 hmall
</code></pre>

测试，通过浏览器访问：http://你的虚拟机地址:8080/search/list

<h2>3.2.部署前端</h2>

<code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。在课前资料中已经给大家提供了nginx的部署目录：

<img src="https://s2.loli.net/2023/12/25/sgXOlYBQRhvVnJF.png" alt="img" />

其中：

<ul>
<li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li>
<li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li>
</ul>

我们现在要做的就是把整个nginx目录上传到虚拟机的<code>/root</code>目录下：

<img src="https://s2.loli.net/2023/12/25/k12oManRAiyeDFp.png" alt="img" />

然后创建nginx容器并完成两个挂载：

<ul>
<li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/nginx.conf</code></li>
<li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li>
</ul>

由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：

<ul>
<li>18080：对应hmall-portal</li>
<li>18081：对应hmall-admin</li>
</ul>

命令如下：

<pre><code class="language-Bash line-numbers">docker run -d \
  --name nginx \
  -p 18080:18080 \
  -p 18081:18081 \
  -v /root/nginx/html:/usr/share/nginx/html \
  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \
  --network hmall \
  nginx
</code></pre>

测试，通过浏览器访问：http://你的虚拟机ip:18080

<img src="https://s2.loli.net/2023/12/25/yhWkMSu41LB3Gl6.png" alt="img" />

<h2>3.3.DockerCompose</h2>

大家可以看到，我们部署一个简单的java项目，其中包含3个容器：

<ul>
<li>MySQL</li>
<li>Nginx</li>
<li>Java项目</li>
</ul>

而稍微复杂的项目，其中还会有各种各样的其它中间件，需要部署的东西远不止3个。如果还像之前那样手动的逐一部署，就太麻烦了。

而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。

<h3>3.3.1.基本语法</h3>

docker-compose.yml文件的基本语法可以参考官方文档：

https://docs.docker.com/compose/compose-file/compose-file-v3/

docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。

举例来说，用docker run部署MySQL的命令如下：

<pre><code class="language-Bash line-numbers">docker run -d \
  --name mysql \
  -p 3306:3306 \
  -e TZ=Asia/Shanghai \
  -e MYSQL_ROOT_PASSWORD=123 \
  -v ./mysql/data:/var/lib/mysql \
  -v ./mysql/conf:/etc/mysql/conf.d \
  -v ./mysql/init:/docker-entrypoint-initdb.d \
  --network hmall
  mysql
</code></pre>

如果用<code>docker-compose.yml</code>文件来定义，就是这样：

<pre><code class="language-YAML line-numbers">version: "3.8"

services:
  mysql:
    image: mysql
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 123
    volumes:
      - "./mysql/conf:/etc/mysql/conf.d"
      - "./mysql/data:/var/lib/mysql"
    networks:
      - new
networks:
  new:
    name: hmall
</code></pre>

对比如下：

<table>
<thead>
<tr>
  <th align="left"><strong>docker run 参数</strong></th>
  <th align="left"><strong>docker compose 指令</strong></th>
  <th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">--name</td>
  <td align="left">container_name</td>
  <td align="left">容器名称</td>
</tr>
<tr>
  <td align="left">-p</td>
  <td align="left">ports</td>
  <td align="left">端口映射</td>
</tr>
<tr>
  <td align="left">-e</td>
  <td align="left">environment</td>
  <td align="left">环境变量</td>
</tr>
<tr>
  <td align="left">-v</td>
  <td align="left">volumes</td>
  <td align="left">数据卷配置</td>
</tr>
<tr>
  <td align="left">--network</td>
  <td align="left">networks</td>
  <td align="left">网络</td>
</tr>
</tbody>
</table>

明白了其中的对应关系，相信编写<code>docker-compose</code>文件应该难不倒大家。

黑马商城部署文件：

<pre><code class="language-YAML line-numbers">version: "3.8"

services:
  mysql:
    image: mysql
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 123
    volumes:
      - "./mysql/conf:/etc/mysql/conf.d"
      - "./mysql/data:/var/lib/mysql"
      - "./mysql/init:/docker-entrypoint-initdb.d"
    networks:
      - hm-net
  hmall:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: hmall
    ports:
      - "8080:8080"
    networks:
      - hm-net
    depends_on:
      - mysql
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - "18080:18080"
      - "18081:18081"
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
      - "./nginx/html:/usr/share/nginx/html"
    depends_on:
      - hmall
    networks:
      - hm-net
networks:
  hm-net:
    name: hmall
</code></pre>

<h3>3.3.2.基础命令</h3>

编写好docker-compose.yml文件，就可以部署项目了。常见的命令：

https://docs.docker.com/compose/reference/

基本语法如下：

<pre><code class="language-Bash line-numbers">docker compose [OPTIONS] [COMMAND]
</code></pre>

其中，OPTIONS和COMMAND都是可选参数，比较常见的有：

<table>
<thead>
<tr>
  <th align="left"><strong>类型</strong></th>
  <th align="left"><strong>参数或指令</strong></th>
  <th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">Options</td>
  <td align="left">-f</td>
  <td align="left">指定compose文件的路径和名称</td>
</tr>
<tr>
  <td align="left">-p</td>
  <td align="left">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">Commands</td>
  <td align="left">up</td>
  <td align="left">创建并启动所有service容器</td>
</tr>
<tr>
  <td align="left">down</td>
  <td align="left">停止并移除所有容器、网络</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">ps</td>
  <td align="left">列出所有启动的容器</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">logs</td>
  <td align="left">查看指定容器的日志</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">stop</td>
  <td align="left">停止容器</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">start</td>
  <td align="left">启动容器</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">restart</td>
  <td align="left">重启容器</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">top</td>
  <td align="left">查看运行的进程</td>
  <td align="left"></td>
</tr>
<tr>
  <td align="left">exec</td>
  <td align="left">在指定的运行中容器中执行命令</td>
  <td align="left"></td>
</tr>
</tbody>
</table>

教学演示：

<pre><code class="language-Bash line-numbers"># 1.进入root目录
cd /root

# 2.删除旧容器
docker rm -f $(docker ps -qa)

# 3.删除hmall镜像
docker rmi hmall

# 4.清空MySQL数据
rm -rf mysql/data

# 5.启动所有, -d 参数是后台启动
docker compose up -d
# 结果：
[+] Building 15.5s (8/8) FINISHED
 => [internal] load build definition from Dockerfile                                    0.0s
 => => transferring dockerfile: 358B                                                    0.0s
 => [internal] load .dockerignore                                                       0.0s
 => => transferring context: 2B                                                         0.0s
 => [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s
 => [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s
 => [internal] load build context                                                       0.0s
 => => transferring context: 98B                                                        0.0s
 => CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo   0.0s
 => CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s
 => exporting to image                                                                  0.0s
 => => exporting layers                                                                 0.0s
 => => writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s
 => => naming to docker.io/library/root-hmall                                           0.0s
[+] Running 4/4
 ✔ Network hmall    Created                                                             0.2s
 ✔ Container mysql  Started                                                             0.5s
 ✔ Container hmall  Started                                                             0.9s
 ✔ Container nginx  Started                                                             1.5s

# 6.查看镜像
docker compose images
# 结果
CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE
hmall               root-hmall          latest              32eebee16acd        362MB
mysql               mysql               latest              3218b38490ce        516MB
nginx               nginx               latest              605c77e624dd        141MB

# 7.查看容器
docker compose ps
# 结果
NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS
hmall               root-hmall          "java -jar /app.jar"     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080->8080/tcp, :::8080->8080/tcp
mysql               mysql               "docker-entrypoint.s…"   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306->3306/tcp, :::3306->3306/tcp, 33060/tcp
nginx               nginx               "/docker-entrypoint.…"   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081->18080-18081/tcp, :::18080-18081->18080-18081/tcp
</code></pre>

打开浏览器，访问：http://yourIp:8080]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2023-12-25 14:51:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-25 06:51:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 20:59:22]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 12:59:22]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[144]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker%e5%ae%b9%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95"><![CDATA[docker合集]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_78ec453da1c5e6a775ced9b4b77b88d7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d7205d20b6f87f4660828313451a2554]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_009c58cff9c1d5516a1fe410aa35e134]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_f70c40b28dc6c6b2bf53232329701a71]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d139454783209e1dc03d56cb6ed49764]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c641fe42d86cffe63e5dad8584f786f5]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0562d55d28b40bc91b2c43393e71e3a2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[哈希表.之力扣1两数之和]]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/25/147/</link>
		<pubDate>Mon, 25 Dec 2023 07:06:21 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/two-sum/">.力扣1两数之和</a></h3>

给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums = [3,2,4], target = 6
输出：[1,2]
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：nums = [3,3], target = 6
输出：[0,1]
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>

<strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？

<strong>分析</strong>

<ol>
<li>最容易想到的是暴力解法，直接两层for循环来处理可以解决但效率不高</li>
<li>在暴力的基础上想到，可以用哈希表来存储已经访问过的数据，哈希表的作用就是快速查找一个元素是否在哈希表中</li>
<li>将以及访问过的元素放在hashmap中</li>
</ol>

<img src="https://s2.loli.net/2023/12/25/bjqx1liC89ktAgd.png" alt="image-20231225150406076" style="zoom:50%;" />

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap&lt;Integer, Integer&gt; map = new HashMap();
        for (int i = 0; i &lt; nums.length; i++) {
            int dis = target - nums[i];
            if (!map.containsKey(dis)) {
                map.put(nums[i], i);
            } else {
                return new int[]{i, map.get(dis)};
            }
        }
        return null;
    }
}
</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/25/Kr1SHPqX8325myI.png" alt="image-20231225150505323" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date><![CDATA[2023-12-25 15:06:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-25 07:06:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-25 15:06:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-25 07:06:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%93%88%e5%b8%8c%e8%a1%a8-%e4%b9%8b%e5%8a%9b%e6%89%a31%e4%b8%a4%e6%95%b0%e4%b9%8b%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="hash"><![CDATA[哈希表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Maven之依赖管理]]></title>
		<link>https://www.xiaomurui.cn/?p=151</link>
		<pubDate>Tue, 26 Dec 2023 08:06:42 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=151</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>Maven</strong>之依赖管理</h3>

<blockquote>
  作者 ： 小木蕊 2023年 12月26日
</blockquote>

<strong>流程原理</strong>

<img src="https://s2.loli.net/2023/12/26/oeBvWC4FcGi2HlL.png" alt="image-20231226154418178" />

<strong>技巧说明</strong>

我们不仅可以从maven中心拉取别人的Jar包如<code>spring springBoot mybaties</code>等著名的框架，同样的我们自己写的Java程序也可以用mavne导入

<pre data-language=XML><code class="language-markup line-numbers"><!--Jar包名-->
<groupId>cn.bugstack</groupId>
<!--组件Id-->
<artifactId>chatglm-sdk-java</artifactId>
<!--版本号-->
<version>1.1</version>
</code></pre>

<ol>
<li>请求依赖

<img src="https://s2.loli.net/2023/12/26/EmQgn31ztvyOGDi.png" alt="image-20231226155844962" /></p></li>
<li>也就是我们在用maven构建项目时填写的，及导入</p></li>
</ol>

<img src="https://s2.loli.net/2023/12/26/5Qow93FTmvY8dKI.png" alt="image-20231226155033774" />

​     4.1. 打包到本地仓库

<img src="https://s2.loli.net/2023/12/26/vbTCZz8tlhGuBOx.png" alt="image-20231226155325389" />

<strong>注意事项</strong>

<blockquote>
  <ol>
  <li>需要使用同一个maven仓库</li>
  </ol>
  
  <img src="https://s2.loli.net/2023/12/26/T9fnKHU1tPxOQwG.png" alt="image-20231226155442609" />
  
  <ol start="2">
  <li>注意版本，需要正常的版本号才可</li>
  </ol>
  
  <img src="https://s2.loli.net/2023/12/26/KyQe3HtbWjOV9fa.png" alt="image-20231226155550269" />
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date><![CDATA[2023-12-26 16:06:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-26 08:06:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven%e4%b9%8b%e4%be%9d%e8%b5%96%e7%ae%a1%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[q(≧▽≦q)Hash表之力扣383. 赎金信]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/26/154/</link>
		<pubDate>Tue, 26 Dec 2023 11:01:32 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/ransom-note/">Hash表之力扣383. 赎金信</a></h3>

<blockquote>
  作者：小木蕊 2023年12月26日
</blockquote>

给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。

如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。

<code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：ransomNote = "a", magazine = "b"
输出：false
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：ransomNote = "aa", magazine = "ab"
输出：false
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：ransomNote = "aa", magazine = "aab"
输出：true
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= ransomNote.length, magazine.length &lt;= 105</code></li>
<li><code>ransomNote</code> 和 <code>magazine</code> 由小写英文字母组成</li>
</ul>

<strong>分析</strong>

<ol>
<li>本题很自然的就能想到问题的关键核心在于统计出<strong>每个字母出现的次数</strong>，便想到Hash表</li>
<li>再根据题目只由小写字母组成可联想到用数组来做Hash表即可</li>
<li>和 <a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a>思路上一致，是 先遍历一次<code>magzine</code>，填充hash表</li>
<li>再遍历另一个<code>ransomNote</code>更新Hash表</li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] Mmap = new int[26];
        for (int i = 0; i &lt; magazine.length(); i++) {
            // 'c' -'a' = 2 Mmap[2]++ 表示 c出现次数加一
            Mmap[magazine.charAt(i) - 'a']++;
        }

        for (int i = 0; i &lt; ransomNote.length(); i++) {
            int num = ransomNote.charAt(i) - 'a';
            Mmap[num]--;
            if (Mmap[num] &lt; 0) {
                return false;
            }
        }
        return true;
    }
}
</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/26/tHs8OhuBAjMdULl.png" alt="image-20231226185710089" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2023-12-26 19:01:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-26 11:01:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-26 19:01:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-26 11:01:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[q%e2%89%a7%e2%96%bd%e2%89%a6qhash%e8%a1%a8%e4%b9%8b%e5%8a%9b%e6%89%a3383-%e8%b5%8e%e9%87%91%e4%bf%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="hash"><![CDATA[Hash]]></category>
		<category domain="category" nicename="hash"><![CDATA[哈希表]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Git常用命令和操作]]></title>
		<link>https://www.xiaomurui.cn/?p=165</link>
		<pubDate>Thu, 28 Dec 2023 09:32:11 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Git常用命令和操作</h3>

<blockquote>
  作者：小木蕊 2023年12月28日
</blockquote>

<h6><strong>删除远程分支的代码</strong></h6>

<blockquote>
  执行这些步骤将会永久删除 远程仓库 分支中的文件，请谨慎操作。
</blockquote>

<ol>
<li>远程克隆分支代码

<p><img src="https://s2.loli.net/2023/12/28/l5mf6DezbGEnRQK.png" alt="image-20231228172111821" /></p></li>
<li><p>确保您处于 master 分支后，可以使用以下命令清空该分支中的文件：</p></li>
</ol>

<pre><code class="language-shell line-numbers"># 清除所有文件
git rm  -r .
</code></pre>

<ol start="3">
<li>接下来，需要提交这个变更，使其生效。使用以下命令：</li>
</ol>

<pre><code class="language-shell line-numbers">#提交
git commit -m "Remove all files from master branch"
</code></pre>

<ol start="4">
<li>这将把本地的 master 分支推送到名为 origin 的远程仓库。</li>
</ol>

<pre><code class="language-shell line-numbers">#提交到远程代码仓库
git push origin master:需要推送的分支
</code></pre>

<hr />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date><![CDATA[2023-12-28 17:32:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-28 09:32:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[git%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4%e5%92%8c%e6%93%8d%e4%bd%9c]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="git%e7%ac%94%e8%ae%b0"><![CDATA[Git笔记]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[`lombok`简化类的编写让你的实体类更加简洁]]></title>
		<link>https://www.xiaomurui.cn/?p=188</link>
		<pubDate>Mon, 12 Feb 2024 09:53:00 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><code>lombok</code>简化类的编写让你的实体类更加简洁</h1>

<blockquote>
  作者小木蕊 2024年 2月12 日
</blockquote>

Lombok 是一款用于简化 Java 代码的工具，通过注解的方式自动生成样板代码，减少冗余代码的编写。使用 Lombok 可以提高代码的可读性，减少样板代码的编写，同时降低了代码维护的成本。以下是 Lombok 的一些主要功能和常用注解：

<h3>1. 常用注解</h3>

<h4><code>@Getter</code> 和 <code>@Setter</code></h4>

自动生成字段的 Getter 和 Setter 方法。

<pre><code class="language-java line-numbers">import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class Example {
    private String name;
    private int age;
}
</code></pre>

<h4><code>@ToString</code></h4>

自动生成 <code>toString</code> 方法。

<pre><code class="language-java line-numbers">import lombok.ToString;

@ToString
public class Example {
    private String name;
    private int age;
}
</code></pre>

<h4><code>@NoArgsConstructor</code>、<code>@AllArgsConstructor</code> 和 <code>@RequiredArgsConstructor</code></h4>

自动生成无参构造方法、全参构造方法和基于必需字段的构造方法。

<pre><code class="language-java line-numbers">import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.RequiredArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@RequiredArgsConstructor
public class Example {
    private final String name;
    private int age;
}
</code></pre>

<h4><code>@EqualsAndHashCode</code></h4>

自动生成 <code>equals</code> 和 <code>hashCode</code> 方法。

<pre><code class="language-java line-numbers">import lombok.EqualsAndHashCode;

@EqualsAndHashCode
public class Example {
    private String name;
    private int age;
}
</code></pre>

<h4><code>@Data</code>经常使用</h4>

整合了 <code>@Getter</code>、<code>@Setter</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code> 和 <code>@RequiredArgsConstructor</code> 的功能。

<pre><code class="language-java line-numbers">import lombok.Data;

@Data
public class Example {
    private final String name;
    private int age;
}
</code></pre>

<h4><code>@Builder</code>经常使用</h4>

生成一个建造者模式的构造器。

<pre><code class="language-java line-numbers">import lombok.Builder;

@Builder
public class Example {
    private String name;
    private int age;
}
</code></pre>

<h3>2. 安装和使用</h3>

在使用 Lombok 之前，需要在项目中添加 Lombok 的依赖。在 Maven 项目中，可以通过以下方式添加：

<pre data-language=XML><code class="language-markup line-numbers"><dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.22</version> <!-- 查看最新版本 -->
    <scope>provided</scope>
</dependency>
</code></pre>

对于非 Maven 项目，你需要在 IDE 中安装 Lombok 插件，以便在编译时正确处理 Lombok 注解。

实体类

<pre><code class="language-java line-numbers">import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * @author 小木蕊 xiaomurui@126.com
 * @version 1.0.0
 * @caeateDate 2024/2/12
 * @description
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class TestEntity {
    private String name;
    private int age;
}
</code></pre>

测试用例

<pre><code class="language-java line-numbers">import lombok.extern.slf4j.Slf4j;

/**
 * @author 小木蕊 xiaomurui@126.com
 * @version 1.0.0
 * @caeateDate 2024/2/12
 * @description
 */
@Slf4j
public class Test {
    @org.junit.jupiter.api.Test
    public void TestBuilder() {
        TestEntity entity = TestEntity.builder()
                .age(10)
                .name("tony")
                .build();
        log.info("entity初始值{}", entity);
    }
}
</code></pre>

如此搭配使用代码将会变得相当简洁

<h3>3. 使用建议</h3>

尽管 Lombok 提供了很多方便的注解，但在使用时需要注意一些使用建议：

<ul>
<li><p>避免在公共 API 中过度使用 Lombok 注解，因为不同的 IDE 和构建工具可能对 Lombok 的支持有差异。</p></li>
<li><p>在使用 Lombok 时，要确保开发团队了解和掌握 Lombok 注解的使用方式，以避免潜在的问题。</p></li>
<li><p>谨慎使用 <code>@EqualsAndHashCode</code> 注解，确保理解它的行为，以免引入不必要的问题。</p></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date><![CDATA[2024-02-12 17:53:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-12 09:53:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:10:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:10:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lombok%e7%ae%80%e5%8c%96%e7%b1%bb%e7%9a%84%e7%bc%96%e5%86%99%e8%ae%a9%e4%bd%a0%e7%9a%84%e5%ae%9e%e4%bd%93%e7%b1%bb%e6%9b%b4%e5%8a%a0%e7%ae%80%e6%b4%81]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[2024春招投递记录]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/19/248/</link>
		<pubDate>Tue, 19 Mar 2024 03:17:52 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>2024春招投递记录</h1>

<h3>已发简历-实习</h3>

<table>
<thead>
<tr>
  <th>公司名称</th>
  <th>地点</th>
  <th>公司简介</th>
  <th>备注</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Shopee</td>
  <td>北京</td>
  <td></td>
  <td>需要英语水平</td>
</tr>
<tr>
  <td>中科软科技股份</td>
  <td>北京</td>
  <td></td>
  <td></td>
</tr>
<tr>
  <td>JD京东</td>
  <td>北京</td>
  <td></td>
  <td></td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date><![CDATA[2024-03-19 11:17:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-19 03:17:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-19 11:17:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-19 03:17:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[2024%e6%98%a5%e6%8b%9b%e6%8a%95%e9%80%92%e8%ae%b0%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="zaoping"><![CDATA[招聘]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Docker 安装 Pointer踩坑]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/02/27/138/</link>
		<pubDate>Tue, 27 Feb 2024 07:59:32 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[**Docker 安装 Pointer踩坑 **
<a class="wp-editor-md-post-content-link" href="http://www.xiaomurui.cn/wp-content/uploads/2023/12/wp_editor_md_927b7cc23bd11516f076c22668443281.jpg"><img src="http://www.xiaomurui.cn/wp-content/uploads/2023/12/wp_editor_md_927b7cc23bd11516f076c22668443281.jpg" alt="" /></a>
1. 踩坑1 访问9000无法访问

<pre><code>未在安全端口配置9000放行，宝塔面板不可靠，在宝塔面板中配置不生效

![image-20231222211058847](https://s2.loli.net/2023/12/22/4CRFYd9h1e3S5Oc.png)
</code></pre>

宝塔面版中并没有检测到端口的配置信息

<img src="https://s2.loli.net/2023/12/22/zpIhxM1XaquT6yZ.png" alt="image-20231222211210462"  />

<strong>结论</strong>

<ul>
<li>配置信息尽量去云服务器的官方控制台配置，不依赖宝塔面板</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2024-02-27 15:59:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-27 07:59:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-27 16:29:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-27 08:29:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[__trashed]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="docker%e5%ae%b9%e5%99%a8%e7%9a%84%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95"><![CDATA[docker合集]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[(‾◡◝)双指针之多数之和(三数，四数)]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/26/157/</link>
		<pubDate>Tue, 26 Dec 2023 12:00:08 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>双指针之多数之和(三数，四数)</h2>

<h3><a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/3sum/">双指针去重之15. 三数之和</a></h3>

<blockquote>
  作者：小木蕊 2023年12月26日 最后一次修改 2024年1月10日
</blockquote>

给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请

你返回所有和为 <code>0</code> 且不重复的三元组。

<strong>注意：</strong>答案中不可以包含重复的三元组。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
解释：
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
注意，输出的顺序和三元组的顺序并不重要。
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums = [0,1,1]
输出：[]
解释：唯一可能的三元组和不为 0 。
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：nums = [0,0,0]
输出：[[0,0,0]]
解释：唯一可能的三元组和为 0 。
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>3 &lt;= nums.length &lt;= 3000</code></li>
<li><code>-105 &lt;= nums[i] &lt;= 105</code></li>
</ul>

<strong>分析</strong>

<ol>
<li>先将数组排序</li>
<li>再遍历数组 使用双指针 letf = i+1，right =len -1 ,left 和right逐渐向中间靠拢在这个区间收集结果直到 right &lt;= left</li>
<li>如果 nums[i] + nums[left] + nums[right] > 0 <code>right--</code></li>
<li>nums[i] + nums[left] + nums[right] &lt; 0 <code>left++</code></li>
<li>本题最重要的也就是去重重复组

<ol>
<li>i去重 nums[i]<span class="text-highlighted-inline" style="background-color: #fffd38;">nums[i-1] <code>continue</code></span></li>
<li>left 去重 nums[left] <span class="text-highlighted-inline" style="background-color: #fffd38;"> nums[left+1]  <code>left++</code></span></li>
<li>right 去重 nums[right] <span class="text-highlighted-inline" style="background-color: #fffd38;"> nums[right-1] <code>right--</code></span></li>
</ol></li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {
        int len = nums.length;
        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();
        if (len &lt; 3 || nums == null) {
            return res;
        }
        Arrays.sort(nums);
        //i代表从此处开始使用头尾指针
        for (int i = 0; i &lt; len; i++) {
            //nums[i]&gt;0结束循环不可能再有三元组
            if (nums[i] &gt; 0)
                break;
            //去重 i&gt; 0保证开始时i-1不会溢出 
            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1])
                continue;
            int L = i + 1, R = len - 1;
            //不能在此处去重 不然 [00000] 会没有收集到结果
            while (L &lt; R) {
                int sum = nums[i] + nums[L] + nums[R];
                if (sum == 0) {
                    res.add(Arrays.asList(nums[i], nums[L], nums[R]));
                    //去重
                    while (L &lt; R &amp;&amp; nums[L] == nums[L + 1]) L++;
                    //去重
                    while (L &lt; R &amp;&amp; nums[R] == nums[R - 1]) R--;
                    L++;
                    R--;
                } else if (sum &lt; 0) {
                    L++;
                } else if (sum &gt; 0) {
                    R--;
                }
            }
        }
        return res;
    }
}

</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/26/rTm1xZQ3XzDb4MC.png" alt="image-20231226195813069" />

<h3>相似题目</h3>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/4sum/">18. 四数之和</a>

中等

给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：

<ul>
<li><code>0 &lt;= a, b, c, d &lt; n</code></li>
<li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>

你可以按 <strong>任意顺序</strong> 返回答案 。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums = [1,0,-1,0,-2,2], target = 0
输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums = [2,2,2,2,2], target = 8
输出：[[2,2,2,2]]
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= nums.length &lt;= 200</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
</ul>

<strong>分析</strong>

同样的思路区别在与一些去重的细节上，和数据溢出问题

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public List&lt;List&lt;Integer&gt;&gt; fourSum(int[] nums, int target) {
        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;List&lt;Integer&gt;&gt;();
        Arrays.sort(nums);
        int len = nums.length;
        for (int k = 0; k &lt; len; k++) {
            //对k进行剪枝
            if (nums[k] &gt; 0 &amp;&amp; nums[k] &gt; target &amp;&amp; target &gt; 0) {
                break;
            }

            //对k去重
            if (k &gt; 0 &amp;&amp; nums[k] == nums[k - 1]) {
                continue;
            }
            for (int i = k + 1; i &lt; len; i++) {
                //对i进行剪枝
                if (nums[i] &gt; 0 &amp;&amp; nums[i] &gt; target &amp;&amp; target &gt; 0) {
                    break;
                }

                //对i去重
                if (i &gt; k + 1 &amp;&amp; nums[i] == nums[i - 1]) {
                    continue;
                }

                //双指针
                int L = i + 1;
                int R = len - 1;
                while (L &lt; R) {
                    //int 会数据的溢出
                    long sum = (long) nums[k] + nums[i] + nums[L] + nums[R];
                    //收割结果集
                    if (sum == target) {
                        res.add(Arrays.asList(nums[k], nums[i], nums[L], nums[R]));

                        //对左指针去重
                        while (L &lt; R &amp;&amp; nums[L] == nums[L + 1]) L++;
                        //对右指针去重
                        while (L &lt; R &amp;&amp; nums[R] == nums[R - 1]) R--;
                        L++;
                        R--;
                    } else if (sum &gt; target) {
                        R--;
                    } else if (sum &lt; target) {
                        L++;
                    }
                }
            }
        }
        return res;
    }
}

</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2024/01/10/bLEJQtxnBau21P9.png" alt="image-20240110213237750" />

<h5><strong>总结</strong></h5>

<ul>
<li>在处理此类多数之和时，都可以使用双指针去代替双重for循环，来提升时间效率</li>
<li>但是需要根据题目经行相应的<strong>剪枝、去重</strong>，故是此类题目需要注意的要点</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date><![CDATA[2023-12-26 20:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-26 12:00:08]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-10 21:39:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-10 13:39:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e2%80%be%e2%97%a1%e2%97%9d%e5%8f%8c%e6%8c%87%e9%92%88%e5%8e%bb%e9%87%8d%e4%b9%8b15-%e4%b8%89%e6%95%b0%e4%b9%8b%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="shuangzhizheng"><![CDATA[双指针]]></category>
		<category domain="post_tag" nicename="%e5%8f%8c%e6%8c%87%e9%92%88"><![CDATA[双指针]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[( •̀ ω •́ )✧541. 反转字符串 II]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2023/12/27/160/</link>
		<pubDate>Wed, 27 Dec 2023 14:08:09 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/reverse-string-ii/">541. 反转字符串 II</a></h3>

<blockquote>
  作者：小木蕊 2023年12月27日
</blockquote>

给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。

<ul>
<li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li>
<li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li>
</ul>

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：s = "abcdefg", k = 2
输出："bacdfeg"
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：s = "abcd", k = 2
输出："bacd"
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= s.length &lt;= 104</code></li>
<li><code>s</code> 仅由小写英文组成</li>
<li><code>1 &lt;= k &lt;= 104</code></li>
</ul>

<strong>分析</strong>

<ol>
<li>惯性思维老是for循环是单步的跳跃，可以多段跳跃，特别是需要一段一段的处理问题</li>
<li>Java中不方便对字符串处理，可以用<code>char[]</code>来处理，对象传递，无需返回值</li>
<li>反转函数尽量遵循左闭右开</li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public void reverseString(char[] array, int index, int end) {

        while (index &lt; end) {
            char temp = array[index];
            array[index] = array[end];
            array[end] = temp;
            index++;
            end--;
        }
    }

    public String reverseStr(String s, int k) {
        char[] array = s.toCharArray();
        for (int i = 0; i &lt; s.length(); i += 2 * k) {
            //每次处理k段 跳跃2k段
            if (i + k &lt;= s.length()) {
                //注意取不到右端点
                reverseString(array, i, i + k - 1);
                continue;
            }
            //将最后一段 小于 k部分 在此处理
            //注意取不到右端点
            reverseString(array, i, s.length() - 1);
        }
        return new String(array);
    }
}

</code></pre>

<strong>结果</strong>

<img src="https://s2.loli.net/2023/12/27/QacrXdS2hMHTm4p.png" alt="image-20231227220736214" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date><![CDATA[2023-12-27 22:08:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-27 14:08:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-27 22:09:58]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-27 14:09:58]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%cf%89-%e2%9c%a7541-%e5%8f%8d%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2-ii]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%ad%97%e7%ac%a6%e4%b8%b2"><![CDATA[字符串]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[双指针之 力扣151. 反转字符串中的单词]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/01/06/169/</link>
		<pubDate>Sat, 06 Jan 2024 12:38:41 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=169</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>[]~(￣▽￣)~*双指针之 力扣151. 反转字符串中的单词</h3>

<blockquote>
  作者：小木蕊 2024年1月6日
</blockquote>

给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。

<strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。

返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。

<strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：s = "the sky is blue"
输出："blue is sky the"
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：s = "  hello world  "
输出："world hello"
解释：反转后的字符串中不能存在前导空格和尾随空格。
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：s = "a good   example"
输出："example good a"
解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。
</code></pre>

<strong>分析</strong>

<ol>
<li>去除多余空格

<pre><code class="language-java line-numbers">//" hello  world   " -&gt; "hello world"
</code></pre></li>
<li>反转整个字符串

<pre><code class="language-java line-numbers">//"dlorw olleh"
</code></pre></li>
<li>反转单个单词

<pre><code class="language-java line-numbers">//"world hello" 
</code></pre></li>
</ol>

<strong>代码</strong>

<pre><code class="language-java line-numbers">class Solution {
    public String reverseWords(String s) {
        //1去除空格
        char[] chars = s.toCharArray();
        //chars[0,n] 去掉空格的字符数组
        int n = removeSpace(chars);

        //2反转整个字符串 反转时end 不能取到需要减一
        reverseStr(chars, 0, n - 1);

        int start = 0;
        for (int i = 0; i &lt; n; i++) {
            if (chars[i] == ' ') {
                reverseStr(chars, start, i-1);
                start = i + 1;
            }
        }
        reverseStr(chars, start, n - 1);

        return new String(chars, 0, n);
    }

    public void reverseStr(char[] chars, int start, int end) {

        while (start &lt; end) {
            char temp = chars[start];
            chars[start] = chars[end];
            chars[end] = temp;
            start++;
            end--;
        }
    }

    public int removeSpace(char[] chars) {
        int start = 0;
        int end = chars.length - 1;
        //去除首部连续空格
        while (chars[start] == ' ') start++;
        //去除尾部空格
        while (chars[end] == ' ') end--;

        //去除中间多余空格
        int slow = 0;
        //需要取等号防止极端情况 “F R  I   E    N     D      S        ”
        for (int fast = start; fast &lt;= end; fast++) {
            if (chars[fast] != ' ') {
                //不是第一个 则需要保留一个空格
                if (slow != 0) chars[slow++] = ' ';
                //直到匹配下一个空格 该单词结束
                while (fast &lt; chars.length &amp;&amp; chars[fast] != ' ') {
                    chars[slow++] = chars[fast++];
                }
            }
        }
        return slow;
    }

}

</code></pre>

<strong>小细节</strong>

<ul>
<li>反转字符串的时候，需传入 end - 1 不能到 end</li>
<li>去除空格时需要取等号，防止 特殊情况</li>
</ul>

时间复杂度O(n) 空间复杂度 O(n)

<strong>结果</strong>

<img src="https://s2.loli.net/2024/01/06/otAquFOwg71LVZ3.png" alt="image-20240106203425803" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>169</wp:post_id>
		<wp:post_date><![CDATA[2024-01-06 20:38:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-06 12:38:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-01-06 20:38:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-01-06 12:38:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%8c%e6%8c%87%e9%92%88%e4%b9%8b-%e5%8a%9b%e6%89%a3151-%e5%8f%8d%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%ad%e7%9a%84%e5%8d%95%e8%af%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="shuangzhizheng"><![CDATA[双指针]]></category>
		<category domain="category" nicename="%e5%ad%97%e7%ac%a6%e4%b8%b2"><![CDATA[字符串]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[队列与栈算法基础]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/01/29/179/</link>
		<pubDate>Mon, 29 Jan 2024 12:54:47 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>栈和队列</h1>

<blockquote>
  作者小木蕊 2024年1月29日
</blockquote>

<ul>
<li>什么是队列什么是栈</li>
</ul>

<blockquote>
  <strong>栈</strong>是一种<strong>先进后出</strong>的数据结构，<strong>队列</strong>是一种<strong>先进先出</strong>的数据结构。
  栈（Stack）和队列（Queue）是两种常见的数据结构，它们在算法和程序设计中有着广泛的应用。以下是对栈和队列的基本介绍：
</blockquote>

<h3>栈（Stack）：</h3>

<ol>
<li><strong>定义：</strong> 栈是一种后进先出（Last In, First Out，LIFO）的数据结构，即最后入栈的元素最先被取出。</p></li>
<li><p><strong>基本操作：</strong>

<ul>
<li><strong>Push（入栈）：</strong> 将元素压入栈的顶部。</li>
<li><strong>Pop（出栈）：</strong> 从栈的顶部移除元素。</li>
<li><strong>Top/Peek：</strong> 获取栈顶元素的值而不移除它。</li>
<li><strong>isEmpty：</strong> 检查栈是否为空。</li>
</ul></li>
<li><strong>应用场景：</strong>

<ul>
<li>递归函数调用的内存管理。</li>
<li>表达式求值（后缀表达式）。</li>
<li>浏览器的前进和后退功能（浏览历史）。</li>
</ul></li>
</ol>

<h3>队列（Queue）：</h3>

<ol>
<li><strong>定义：</strong> 队列是一种先进先出（First In, First Out，FIFO）的数据结构，即最先入队的元素最先被取出。</p></li>
<li><p><strong>基本操作：</strong>

<ul>
<li><strong>Enqueue（入队）：</strong> 将元素加入队列的尾部。</li>
<li><strong>Dequeue（出队）：</strong> 从队列的头部移除元素。</li>
<li><strong>Front/Peek：</strong> 获取队列头部元素的值而不移除它。</li>
<li><strong>isEmpty：</strong> 检查队列是否为空。</li>
</ul></li>
<li><strong>应用场景：</strong>

<ul>
<li>任务调度（如打印任务队列）。</li>
<li>缓冲区管理。</li>
<li>广度优先搜索（BFS）算法。</li>
</ul></li>
</ol>

<h3>比较：</h3>

<ul>
<li><strong>共同点：</strong> 栈和队列都是线性数据结构，支持添加和删除操作。</li>
<li><strong>不同点：</strong> 栈是LIFO，而队列是FIFO。</li>
</ul>

<h3>实现方式：</h3>

<ul>
<li><strong>栈的实现：</strong>

<ul>
<li>数组实现：使用数组结构，通过索引进行操作。</li>
<li>链表实现：通过链表节点之间的指针进行操作。</li>
</ul></li>
<li><strong>队列的实现：</strong>

<ul>
<li>数组实现：使用数组结构，通过头尾指针进行操作。</li>
<li>链表实现：通过链表节点之间的指针进行操作。</li>
</ul></li>
</ul>

在算法和数据结构中，栈和队列是基础的工具，了解它们的特性和应用有助于更好地设计和理解算法。

<h3>队列和栈在<code>Java</code>中是<strong>容器</strong>有以下常用的方法</h3>

<pre><code class="language-java line-numbers">//输入数据
Queue.push(2); 

//返回队首/栈首
Queue.peek(); 

//队尾/栈底弹出
Queue.pop(); 

//是否为空 true空 
Queue.isEmpty(); // return false
</code></pre>

<h2>题目推荐</h2>

<h3><a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h3>

<blockquote>
  这是一道经典的熟悉栈和队列的基本定义和方法的题目不包含什么算法.
</blockquote>

请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：

实现 <code>MyQueue</code> 类：

<ul>
<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>
<li><code>int pop()</code> 从队列的开头移除并返回元素</li>
<li><code>int peek()</code> 返回队列开头的元素</li>
<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>
</ul>

<strong>说明：</strong>

<ul>
<li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
</ul>

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
输出：
[null, null, null, 1, 1, false]

解释：
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= x &lt;= 9</code></li>
<li>最多调用 <code>100</code> 次 <code>push</code>、<code>pop</code>、<code>peek</code> 和 <code>empty</code></li>
<li>假设所有操作都是有效的 （例如，一个空的队列不会调用 <code>pop</code> 或者 <code>peek</code> 操作）</li>
</ul>

<strong>分析</strong>

用两个栈来模拟队列,一个做输出栈一个输入栈即可

<strong>代码</strong>

<pre><code class="language-java line-numbers">class MyQueue {

    private Stack stackIn;
    private Stack stackOut;

    public MyQueue() {
        stackIn = new Stack&lt;Integer&gt;();
        stackOut = new Stack&lt;Integer&gt;();
    }

    public void push(int x) {
        stackIn.push(x);
    }

    public int pop() {
        dumpstackIn();
        return (int) stackOut.pop();
    }

    public int peek() {
        dumpstackIn();
        return (int) stackOut.peek();
    }

    public boolean empty() {
        return stackOut.isEmpty() &amp;&amp; stackIn.isEmpty();
    }

    // 如果stackOut为空，那么将stackIn中的元素全部放到stackOut中
    private void dumpstackIn() {
        if (!stackOut.isEmpty()) return;
        while (!stackIn.isEmpty()) {
            stackOut.push(stackIn.pop());
        }
    }
}
</code></pre>

<strong>运行结果</strong>

<img src="https://s2.loli.net/2024/01/29/h1wP4mBsUpcu8Tt.png" alt="image-20240129205010034" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date><![CDATA[2024-01-29 20:54:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-01-29 12:54:47]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-02-10 18:15:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-02-10 10:15:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%98%9f%e5%88%97%e4%b8%8e%e6%a0%88%e7%ae%97%e6%b3%95%e5%9f%ba%e7%a1%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%a0%88%e5%92%8c%e9%98%9f%e5%88%97"><![CDATA[栈和队列]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[规则过虑设计]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/02/225/</link>
		<pubDate>Sat, 02 Mar 2024 09:01:10 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>规则过虑设计</h1>

<blockquote>
  作者：小木蕊 2024年3月2日
</blockquote>

<strong>大致框架图</strong>

<img src="https://s2.loli.net/2024/03/02/nsE2USxyVeTGtlI.png" alt="image-20240302161007575" style="zoom:80%;" />

1 <code>Filter</code>接口设计

<pre><code class="language-java line-numbers">package cn.xiaomurui.chatglm.data.openai.service.rule;

import cn.xiaomurui.chatglm.data.openai.model.aggregates.ChatProcessAggregate;
import cn.xiaomurui.chatglm.data.openai.model.entity.RuleLogicEntity;

/**
 * @author 小木蕊
 * @version 1.0.0
 * @address xiaomurui@163.com
 * @createDate 2024/2/28
 * @description 规则接口
 */
public interface ILogicFilter {
    RuleLogicEntity&lt;ChatProcessAggregate&gt; filter(ChatProcessAggregate chatProcess) throws Exception;
}
</code></pre>

<blockquote>
  遵循设计原则，使用专一接口，使用不同实现
</blockquote>

2 接口实现

在这里目前先实现两个接口

<ol>
<li><code>AccessLimitFilter</code>服务次数限制接口</li>
<li><code>SenstitiveWordFilter</code>,敏感词检测接口</li>
</ol>

<h2><code>AccessLimitFilter</code></h2>

<h3>白名单处理</h3>

<pre><code class="language-java line-numbers">@Value("${app.config.white-list}")
private String whiteListStr;

@Override
public RuleLogicEntity&lt;ChatProcessAggregate&gt; filter(ChatProcessAggregate chatProcess) throws Exception {

    //白名单用户不做敏感词处理
    if (chatProcess.isWhiteList(whiteListStr)) {
        return RuleLogicEntity.&lt;ChatProcessAggregate&gt;builder()
                .type(LogicCheckTypeVO.SUCCESS)
                .data(chatProcess)
                .build();
    }
</code></pre>

<h3>服务次数处理</h3>

<pre><code class="language-java line-numbers">  String openid = chatProcess.getOpenid();
        //2访问次数
        int visitCount = visitCache.get(openid, () -&gt; 0);
        if (visitCount &lt; limitCount) {
            visitCache.put(openid, visitCount + 1);
            return RuleLogicEntity.&lt;ChatProcessAggregate&gt;builder()
                    .type(LogicCheckTypeVO.SUCCESS)
                    .data(chatProcess)
                    .build();
        }

        return RuleLogicEntity.&lt;ChatProcessAggregate&gt;builder()
                .info("您今日的免费次数" + limitCount + "次，已耗尽！")
                .type(LogicCheckTypeVO.REFUSE)
                .data(chatProcess)
                .build();
    }
</code></pre>

今日已使用的次数使用 <code>Guava</code>工具包中 <code>Cache</code>类来做一个内存中的缓存类似于 <code>Redis</code>

<h2><code>SensitiveWordFilter</code></h2>

敏感词我们使用 开源工具<code>SensitiveWord</code>来处理

<h3><strong>白名单的处理</strong></h3>

<pre><code class="language-java line-numbers">@Value("${app.config.white-list}")
private String whiteListStr;

@Override
public RuleLogicEntity&lt;ChatProcessAggregate&gt; filter(ChatProcessAggregate chatProcess) throws Exception {

    //白名单用户不做敏感词处理
    if (chatProcess.isWhiteList(whiteListStr)) {
        return RuleLogicEntity.&lt;ChatProcessAggregate&gt;builder()
                .type(LogicCheckTypeVO.SUCCESS)
                .data(chatProcess)
                .build();
    }
</code></pre>

<h3><strong>封装<code>ChatProcessAggregate</code>请求参数</strong></h3>

Fillter的处理方式都是将原始的<code>Request</code>做一次封装，将其处理结果封装为一个新的<code>request</code>，也就是Data部分不动新添加一个字段type

<pre><code class="language-java line-numbers">ChatProcessAggregate newChatProcessAggregate = new ChatProcessAggregate();
newChatProcessAggregate.setOpenid(chatProcess.getOpenid());
newChatProcessAggregate.setModel(chatProcess.getModel());

List&lt;MessageEntity&gt; newMessages = chatProcess.getMessages().stream()
        .map(messageEntity -&gt; {
            String content = messageEntity.getContent();
            String replace = wordBs.replace(content);
            return MessageEntity.builder()
                    .role(messageEntity.getRole())
                    .name(messageEntity.getName())
                    .content(replace)
                    .build();
        })
        .collect(Collectors.toList());

newChatProcessAggregate.setMessages(newMessages);
return RuleLogicEntity.&lt;ChatProcessAggregate&gt;builder()
                .type(LogicCheckTypeVO.SUCCESS)
                .data(newChatProcessAggregate)
                .build();
</code></pre>

<ol start="3">
<li><code>FilterFactory</code>工厂模式的设定

<pre><code class="language-java line-numbers">package cn.xiaomurui.chatglm.data.openai.service.rule.factory;

import cn.xiaomurui.chatglm.data.openai.annotation.LogicStrategy;
import cn.xiaomurui.chatglm.data.openai.service.rule.ILogicFilter;
import com.alibaba.fastjson2.util.AnnotationUtils;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author 小木蕊
 * @version 1.0.0
 * @address xiaomurui@163.com
 * @createDate 2024/2/29
 * @description
 */
@Service
public class DefaultLogicFactory {

    public Map&lt;String, ILogicFilter&gt; logicFilterMap = new ConcurrentHashMap&lt;&gt;();

    public DefaultLogicFactory(List&lt;ILogicFilter&gt; logicFilters) {
        logicFilters.forEach(logic -&gt; {
            LogicStrategy strategy = AnnotationUtils.findAnnotation(logic.getClass(), LogicStrategy.class);
            if (null != strategy) {
                logicFilterMap.put(strategy.logicMode().getCode(), logic);
            }
        });
    }

    public Map&lt;String, ILogicFilter&gt; openLogicFilter() {
        return logicFilterMap;
    }

    public enum LogicModel {
        ACCESS_LIMIT("ACCESS_LIMIT", "访问次数过滤"),
        SENSITIVE_WORD("SENSITIVE_WORD", "敏感词过虑"),
        ;

        private String code;
        private String info;

        LogicModel(String code, String info) {
            this.code = code;
            this.info = info;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public String getInfo() {
            return info;
        }

        public void setInfo(String info) {
            this.info = info;
        }
    }
}
</code></pre></li>
<li>开启工厂使用<code>Filter</code>

<pre><code class="language-java line-numbers"> Map&lt;String, ILogicFilter&gt; logicFilterMap = logicFactory.openLogicFilter();
        RuleLogicEntity&lt;ChatProcessAggregate&gt; entity = null;
        for (String code:logics) {
            entity = logicFilterMap.get(code).filter(chatProcess);
            if (!LogicCheckTypeVO.SUCCESS.equals(entity.getType())) return  entity;
        }

        return entity != null ? entity : RuleLogicEntity.&lt;ChatProcessAggregate&gt;builder()
                .type(LogicCheckTypeVO.SUCCESS)
                .data(chatProcess)
                .build();
</code></pre></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2024-03-02 17:01:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-02 09:01:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-02 17:01:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-02 09:01:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%84%e5%88%99%e8%bf%87%e8%99%91%e8%ae%be%e8%ae%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Java集合框架、List、Set、Map、队列]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/06/228/</link>
		<pubDate>Wed, 06 Mar 2024 05:23:26 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=228</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Java集合框架、List、Set、Map、队列</h1>

<blockquote>
  作者：小木蕊
</blockquote>

在Java编程语言中，集合（Collections）是一组对象的容器，用于存储、检索和操作数据。Java集合框架提供了一系列接口和类，用于表示和操作不同类型的集合数据。以下是一些Java集合框架的核心接口和类：

<ol>
<li><strong>Collection接口：</strong>

<ul>
<li><code>java.util.Collection</code>是所有集合框架的根接口，它定义了一些通用的方法，如<code>add()</code>, <code>remove()</code>, <code>size()</code>, <code>isEmpty()</code>等。</li>
</ul></li>
<li><strong>List接口：</strong>

<ul>
<li><code>java.util.List</code>表示有序的集合，可以包含重复的元素。常见的实现类有<code>ArrayList</code>和<code>LinkedList</code>。</li>
</ul></li>
<li><strong>Set接口：</strong>

<ul>
<li><code>java.util.Set</code>表示不包含重复元素的无序集合。常见的实现类有<code>HashSet</code>，<code>LinkedHashSet</code>和<code>TreeSet</code>。</li>
</ul></li>
<li><strong>Map接口：</strong>

<ul>
<li><code>java.util.Map</code>表示键值对的集合，每个键映射到一个值。常见的实现类有<code>HashMap</code>，<code>LinkedHashMap</code>，<code>TreeMap</code>。</li>
</ul></li>
<li><strong>Queue接口：</strong>

<ul>
<li><code>java.util.Queue</code>表示先进先出（FIFO）的队列。常见的实现类有<code>LinkedList</code>和<code>PriorityQueue</code>。</li>
</ul></li>
<li><strong>Deque接口：</strong>

<ul>
<li><code>java.util.Deque</code>表示一个双端队列，可以在两端进行插入和删除。常见的实现类有<code>ArrayDeque</code>。</li>
</ul></li>
<li><strong>Iterator接口：</strong>

<ul>
<li><code>java.util.Iterator</code>用于迭代集合中的元素，它定义了<code>hasNext()</code>和<code>next()</code>等方法。</li>
</ul></li>
<li><strong>Collections工具类：</strong>

<ul>
<li><code>java.util.Collections</code>类提供了一些静态方法，用于对集合进行排序、反转、查找等操作。</li>
</ul></li>
</ol>

在使用集合框架时，可以根据具体需求选择合适的接口和实现类。例如，如果需要有序且允许重复的集合，可以选择<code>List</code>接口的实现类；如果需要无序且不允许重复的集合，可以选择<code>Set</code>接口的实现类。 Java集合框架提供了丰富的功能，使得在处理数据时更加灵活和高效。

<h2>集合类图</h2>

<img src="https://s2.loli.net/2024/03/06/6oyrYeFkqIEUl9M.png" alt="img" />

简单介绍一下，Java 集合框架可以分为两条大的支线

<ul>
<li>Collection，主要由 List、Set、Queue 组成，List 代表有序、可重复的集合，典型代表就是封装了动态数组的 ArrayList 和封装了链表的 LinkedList；Set 代表无序、不可重复的集合，典型代表就是 HashSet 和 TreeSet；Queue 代表队列，典型代表就是双端队列 ArrayDeque，以及优先级队列 PriorityQueue。</li>
<li>Map，代表键值对的集合，典型代表就是 HashMap。</li>
</ul>

<h3>01、List</h3>

List 的特点是存取有序，可以存放重复的元素，可以用下标对元素进行操作。

<h4><strong>1ArrayList</strong></h4>

先来一段 ArrayList 的增删改查，学会用。

<pre><code class="language-java line-numbers">// 创建一个集合
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
// 添加元素
list.add("小木蕊");
list.add("萌新");
list.add("学习Java");

// 遍历集合 for 循环
for (int i = 0; i &lt; list.size(); i++) {
    String s = list.get(i);
    System.out.println(s);
}
// 遍历集合 for each
for (String s : list) {
    System.out.println(s);
}

// 删除元素
list.remove(1);
// 遍历集合
for (String s : list) {
    System.out.println(s);
}

// 修改元素
list.set(1, "小木蕊狗");
// 遍历集合
for (String s : list) {
    System.out.println(s);
}
</code></pre>

简单介绍一下 ArrayList 的特征

<ul>
<li>ArrayList 是由数组实现的，支持随机存取，也就是可以通过下标直接存取元素；</li>
<li>从尾部插入和删除元素会比较快捷，从中间插入和删除元素会比较低效，因为涉及到数组元素的复制和移动；</li>
<li>如果内部数组的容量不足时会自动扩容，因此当元素非常庞大的时候，效率会比较低。</li>
</ul>

<h4><strong>2LinkedList</strong></h4>

同样先来一段 LinkedList 的增删改查，和 ArrayList 几乎没什么差别。

<pre><code class="language-java line-numbers">// 创建一个集合
LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();
// 添加元素
list.add("小木蕊");
list.add("萌新");
list.add("学习Java");

// 遍历集合 for 循环
for (int i = 0; i &lt; list.size(); i++) {
    String s = list.get(i);
    System.out.println(s);
}
// 遍历集合 for each
for (String s : list) {
    System.out.println(s);
}

// 删除元素
list.remove(1);
// 遍历集合
for (String s : list) {
    System.out.println(s);
}

// 修改元素
list.set(1, "小木蕊狗");
// 遍历集合
for (String s : list) {
    System.out.println(s);
}
</code></pre>

不过，LinkedList 和 ArrayList 仍然有较大的不同，[后面也会详细地讲linkedlist.html)。

<ul>
<li>LinkedList 是由双向链表实现的，不支持随机存取，只能从一端开始遍历，直到找到需要的元素后返回；</li>
<li>任意位置插入和删除元素都很方便，因为只需要改变前一个节点和后一个节点的引用即可，不像 ArrayList 那样需要复制和移动数组元素；</li>
<li>因为每个元素都存储了前一个和后一个节点的引用，所以相对来说，占用的内存空间会比 ArrayList 多一些。</li>
</ul>

<h4><strong>3Vector 和 Stack</strong></h4>

List 的实现类还有一个 Vector，是一个元老级的类，比 ArrayList 出现得更早。ArrayList 和 Vector 非常相似，只不过 Vector 是线程安全的，像 get、set、add 这些方法都加了 <code>synchronized</code> 关键字，就导致执行效率会比较低，所以现在已经很少用了。

我就不写太多代码了，只看一下 add 方法的源码就明白了。

<pre><code class="language-java line-numbers">public synchronized boolean add(E e) {
    elementData[elementCount++] = e;
    return true;
}
</code></pre>

这种加了同步方法的类，注定会被淘汰掉，就像StringBuilder 取代 StringBuffer那样。JDK 源码也说了：

<blockquote>
  如果不需要线程安全，建议使用 ArrayList 代替 Vector。
</blockquote>

<img src="https://s2.loli.net/2024/03/06/Aym1VPuL5NoSqj9.png" alt="img" />

Stack 是 Vector 的一个子类，本质上也是由动态数组实现的，只不过还实现了先进后出的功能（在 get、set、add 方法的基础上追加了 pop「返回并移除栈顶的元素」、peek「只返回栈顶元素」等方法），所以叫栈。

下面是这两个方法的源码，增删改查我就不写了，和 ArrayList 和 LinkedList 几乎一样。

<pre><code class="language-java line-numbers">public synchronized E pop() {
    E       obj;
    int     len = size();

    obj = peek();
    removeElementAt(len - 1);

    return obj;
}

public synchronized E peek() {
    int     len = size();

    if (len == 0)
        throw new EmptyStackException();
    return elementAt(len - 1);
}
</code></pre>

不过，由于 Stack 执行效率比较低（方法上同样加了 synchronized 关键字），就被双端队列 ArrayDeque 取代了（下面会介绍）。

<h3>02、Set</h3>

Set 的特点是存取无序，不可以存放重复的元素，不可以用下标对元素进行操作，和 List 有很多不同。

<h4>1HashSet</h4>

HashSet 其实是由 HashMap 实现的，只不过值由一个固定的 Object 对象填充，而键用于操作。来简单看一下它的源码。

<pre><code class="language-java line-numbers">public class HashSet&lt;E&gt;
    extends AbstractSet&lt;E&gt;
    implements Set&lt;E&gt;, Cloneable, java.io.Serializable
{
    private transient HashMap&lt;E,Object&gt; map;

    // Dummy value to associate with an Object in the backing Map
    private static final Object PRESENT = new Object();

    public HashSet() {
        map = new HashMap&lt;&gt;();
    }

    public boolean add(E e) {
        return map.put(e, PRESENT)==null;
    }

    public boolean remove(Object o) {
        return map.remove(o)==PRESENT;
    }
}
</code></pre>

实际开发中，HashSet 并不常用，比如，如果我们需要按照顺序存储一组元素，那么 ArrayList 和 LinkedList 可能更适合；如果我们需要存储键值对并根据键进行查找，那么 HashMap 可能更适合。

来一段增删改查体验一下：

<pre><code class="language-java line-numbers">// 创建一个新的HashSet
HashSet&lt;String&gt; set = new HashSet&lt;&gt;();

// 添加元素
set.add("萌新");
set.add("小木蕊");
set.add("学习Java");

// 输出HashSet的元素个数
System.out.println("HashSet size: " + set.size()); // output: 3

// 判断元素是否存在于HashSet中
boolean containsWanger = set.contains("小木蕊");
System.out.println("Does set contain '小木蕊'? " + containsWanger); // output: true

// 删除元素
boolean removeWanger = set.remove("小木蕊");
System.out.println("Removed '小木蕊'? " + removeWanger); // output: true

// 修改元素，需要先删除后添加
boolean removeChenmo = set.remove("萌新");
boolean addBuChenmo = set.add("不萌新");
System.out.println("Modified set? " + (removeChenmo &amp;&amp; addBuChenmo)); // output: true

// 输出修改后的HashSet
System.out.println("HashSet after modification: " + set); // output: [学习Java, 不萌新]
</code></pre>

HashSet 主要用于去重，比如，我们需要统计一篇文章中有多少个不重复的单词，就可以使用 HashSet 来实现。

<pre><code class="language-java line-numbers">// 创建一个 HashSet 对象
HashSet&lt;String&gt; set = new HashSet&lt;&gt;();

// 添加元素
set.add("萌新");
set.add("小木蕊");
set.add("学习Java");
set.add("萌新");

// 输出 HashSet 的元素个数
System.out.println("HashSet size: " + set.size()); // output: 3

// 遍历 HashSet
for (String s : set) {
    System.out.println(s);
}
</code></pre>

从上面的例子可以看得出，HashSet 会自动去重，因为它是用 HashMap 实现的，HashMap 的键是唯一的（哈希值），相同键的值会覆盖掉原来的值，于是第二次 <code>set.add("萌新")</code> 的时候就覆盖了第一次的 <code>set.add("萌新")</code>。

<h4>2LinkedHashSet</h4>

LinkedHashSet 虽然继承自 HashSet，其实是由 [LinkedHashMaplinkedhashmap.html) 实现的。

这是 LinkedHashSet 的无参构造方法：

<pre><code class="language-java line-numbers">public LinkedHashSet() {
    super(16, .75f, true);
}
</code></pre>

super的意思是它将调用父类的 HashSet 的一个有参构造方法：

<pre><code class="language-java line-numbers">HashSet(int initialCapacity, float loadFactor, boolean dummy) {
    map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);
}
</code></pre>

看到 [LinkedHashMap]了吧，这个我们后面会去讲。

好吧，来看一段 LinkedHashSet 的增删改查吧。

<pre><code class="language-java line-numbers">LinkedHashSet&lt;String&gt; set = new LinkedHashSet&lt;&gt;();

// 添加元素
set.add("萌新");
set.add("小木蕊");
set.add("学习Java");

// 删除元素
set.remove("小木蕊");

// 修改元素
set.remove("萌新");
set.add("萌新的力量");

// 查找元素
boolean hasChenQingYang = set.contains("学习Java");
System.out.println("set包含学习Java吗？" + hasChenQingYang);
</code></pre>

在以上代码中，我们首先创建了一个 LinkedHashSet 对象，然后使用 add 方法依次添加了三个元素：萌新、小木蕊和学习Java。接着，我们使用 remove 方法删除了小木蕊这个元素，并使用 remove 和 add 方法修改了萌新这个元素。最后，我们使用 contains 方法查找了学习Java这个元素是否存在于 set 中，并打印了结果。

LinkedHashSet 是一种基于哈希表实现的 Set 接口，它继承自 HashSet，并且使用链表维护了元素的插入顺序。因此，它既具有 HashSet 的快速查找、插入和删除操作的优点，又可以维护元素的插入顺序。

<h4>_3-treeset)3）TreeSet</h4>

TreeSet 是由 [TreeMap（后面会讲）实现的，只不过同样操作的键位，值由一个固定的 Object 对象填充。

是的，与 TreeMap 相似，TreeSet 是一种基于红黑树实现的有序集合，它实现了 SortedSet 接口，可以自动对集合中的元素进行排序。按照键的自然顺序或指定的比较器顺序进行排序。

<pre><code class="language-java line-numbers">// 创建一个 TreeSet 对象
TreeSet&lt;String&gt; set = new TreeSet&lt;&gt;();

// 添加元素
set.add("萌新");
set.add("小木蕊");
set.add("学习Java");
System.out.println(set); // 输出 [沉默, 小木蕊, 学习Java]

// 删除元素
set.remove("小木蕊");
System.out.println(set); // 输出 [沉默, 学习Java]

// 修改元素：TreeSet 中的元素不支持直接修改，需要先删除再添加
set.remove("学习Java");
set.add("陈青阳");
System.out.println(set); // 输出 [沉默, 陈青阳]

// 查找元素
System.out.println(set.contains("萌新")); // 输出 true
System.out.println(set.contains("小木蕊")); // 输出 false
</code></pre>

需要注意的是，TreeSet 不允许插入 null 元素，否则会抛出 NullPointerException 异常。总体上来说，Set 集合不是关注的重点，因为底层都是由 Map 实现的，为什么要用 Map 实现呢?

因为 Map 的键不允许重复、无序

<h3>03、Queue</h3>

Queue，也就是队列，通常遵循先进先出（FIFO）的原则，新元素插入到队列的尾部，访问元素返回队列的头部。

<h4>1 ArrayDeque</h4>

从名字上可以看得出，ArrayDeque 是一个基于数组实现的双端队列，为了满足可以同时在数组两端插入或删除元素的需求，数组必须是循环的，也就是说数组的任何一点都可以被看作是起点或者终点。

这是一个包含了 4 个元素的双端队列，和一个包含了 5 个元素的双端队列。

<img src="https://s2.loli.net/2024/03/06/pUtyQ63BvrPXLdf.png" alt="img" />

head 指向队首的第一个有效的元素，tail 指向队尾第一个可以插入元素的空位，因为是循环数组，所以 head 不一定从是从 0 开始，tail 也不一定总是比 head 大。

来一段 ArrayDeque 的增删改查吧。

<pre><code class="language-java line-numbers">// 创建一个ArrayDeque
ArrayDeque&lt;String&gt; deque = new ArrayDeque&lt;&gt;();

// 添加元素
deque.add("萌新");
deque.add("小木蕊");
deque.add("学习Java");

// 删除元素
deque.remove("小木蕊");

// 修改元素
deque.remove("萌新");
deque.add("萌新的力量");

// 查找元素
boolean hasChenQingYang = deque.contains("学习Java");
System.out.println("deque包含学习Java吗？" + hasChenQingYang);
</code></pre>

<h4>2 LinkedList</h4>

LinkedList 一般应该归在 List 下，只不过，它也实现了 Deque 接口，可以作为队列来使用。等于说，LinkedList 同时实现了 Stack、Queue、PriorityQueue 的所有功能。

<pre><code class="language-java line-numbers">public class LinkedList&lt;E&gt;
    extends AbstractSequentialList&lt;E&gt;
    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable
{}
</code></pre>

换句话说，LinkedList 和 ArrayDeque 都是 Java 集合框架中的双向队列（deque），它们都支持在队列的两端进行元素的插入和删除操作。不过，LinkedList 和 ArrayDeque 在实现上有一些不同：

<ul>
<li>底层实现方式不同：LinkedList 是基于链表实现的，而 ArrayDeque 是基于数组实现的。</li>
<li>随机访问的效率不同：由于底层实现方式的不同，LinkedList 对于随机访问的效率较低，时间复杂度为 O(n)，而 ArrayDeque 可以通过下标随机访问元素，时间复杂度为 O(1)。</li>
<li>迭代器的效率不同：LinkedList 对于迭代器的效率比较低，因为需要通过链表进行遍历，时间复杂度为 O(n)，而 ArrayDeque 的迭代器效率比较高，因为可以直接访问数组中的元素，时间复杂度为 O(1)。</li>
<li>内存占用不同：由于 LinkedList 是基于链表实现的，它在存储元素时需要额外的空间来存储链表节点，因此内存占用相对较高，而 ArrayDeque 是基于数组实现的，内存占用相对较低。</li>
</ul>

因此，在选择使用 LinkedList 还是 ArrayDeque 时，需要根据具体的业务场景和需求来选择。如果需要在双向队列的两端进行频繁的插入和删除操作，并且需要随机访问元素，可以考虑使用 ArrayDeque；如果需要在队列中间进行频繁的插入和删除操作，可以考虑使用 LinkedList。

来一段 LinkedList 作为队列时候的增删改查吧，注意和它作为 List 的时候有很大的不同。

<pre><code class="language-java line-numbers">// 创建一个 LinkedList 对象
LinkedList&lt;String&gt; queue = new LinkedList&lt;&gt;();

// 添加元素
queue.offer("萌新");
queue.offer("小木蕊");
queue.offer("学习Java");
System.out.println(queue); // 输出 [萌新, 小木蕊, 学习Java]

// 删除元素
queue.poll();
System.out.println(queue); // 输出 [萌新, 学习Java]

// 修改元素：LinkedList 中的元素不支持直接修改，需要先删除再添加
String first = queue.poll();
queue.offer("小木蕊");
System.out.println(queue); // 输出 [学习Java, 小木蕊]

// 查找元素：LinkedList 中的元素可以使用 get() 方法进行查找
System.out.println(queue.get(0)); // 输出 学习Java
System.out.println(queue.contains("萌新")); // 输出 false

// 查找元素：使用迭代器的方式查找学习Java
// 使用迭代器依次遍历元素并查找
Iterator&lt;String&gt; iterator = queue.iterator();
while (iterator.hasNext()) {
    String element = iterator.next();
    if (element.equals("学习Java")) {
        System.out.println("找到了：" + element);
        break;
    }
}
</code></pre>

在使用 LinkedList 作为队列时，可以使用 offer() 方法将元素添加到队列的末尾，使用 poll() 方法从队列的头部删除元素。另外，由于 LinkedList 是链表结构，不支持随机访问元素，因此不能使用下标访问元素，需要使用迭代器或者 poll() 方法依次遍历元素。

<h4>3 PriorityQueue</h4>

PriorityQueue 是一种优先级队列，它的出队顺序与元素的优先级有关，执行 remove 或者 poll 方法，返回的总是优先级最高的元素。

<pre><code class="language-java line-numbers">// 创建一个 PriorityQueue 对象
PriorityQueue&lt;String&gt; queue = new PriorityQueue&lt;&gt;();

// 添加元素
queue.offer("萌新");
queue.offer("小木蕊");
queue.offer("学习Java");
System.out.println(queue); // 输出 [萌新, 小木蕊, 学习Java]

// 删除元素
queue.poll();
System.out.println(queue); // 输出 [小木蕊, 学习Java]

// 修改元素：PriorityQueue 不支持直接修改元素，需要先删除再添加
String first = queue.poll();
queue.offer("张三");
System.out.println(queue); // 输出 [张三, 学习Java]

// 查找元素：PriorityQueue 不支持随机访问元素，只能访问队首元素
System.out.println(queue.peek()); // 输出 张三
System.out.println(queue.contains("学习Java")); // 输出 true

// 通过 for 循环的方式查找学习Java
for (String element : queue) {
    if (element.equals("学习Java")) {
        System.out.println("找到了：" + element);
        break;
    }
}
</code></pre>

要想有优先级，元素就需要实现 [Comparable 接口或者 Comparator 接口（我们后面会讲）。

这里先来一段通过实现 Comparator 接口按照年龄姓名排序的优先级队列吧。

<pre><code class="language-java line-numbers">import java.util.Comparator;
import java.util.PriorityQueue;

class Student {
    private String name;
    private int chineseScore;
    private int mathScore;

    public Student(String name, int chineseScore, int mathScore) {
        this.name = name;
        this.chineseScore = chineseScore;
        this.mathScore = mathScore;
    }

    public String getName() {
        return name;
    }

    public int getChineseScore() {
        return chineseScore;
    }

    public int getMathScore() {
        return mathScore;
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                ", 总成绩=" + (chineseScore + mathScore) +
                '}';
    }
}

class StudentComparator implements Comparator&lt;Student&gt; {
    @Override
    public int compare(Student s1, Student s2) {
        // 比较总成绩
        return Integer.compare(s2.getChineseScore() + s2.getMathScore(),
                s1.getChineseScore() + s1.getMathScore());
    }
}

public class PriorityQueueComparatorExample {

    public static void main(String[] args) {
        // 创建一个按照总成绩排序的优先级队列
        PriorityQueue&lt;Student&gt; queue = new PriorityQueue&lt;&gt;(new StudentComparator());

        // 添加元素
        queue.offer(new Student("小木蕊", 80, 90));
        System.out.println(queue);
        queue.offer(new Student("学习Java", 95, 95));
        System.out.println(queue);
        queue.offer(new Student("小驼铃", 90, 95));
        System.out.println(queue);
        queue.offer(new Student("萌新", 90, 80));
        while (!queue.isEmpty()) {
            System.out.print(queue.poll() + " ");
        }
    }
}
</code></pre>

Student 是一个学生对象，包含姓名、语文成绩和数学成绩。

StudentComparator 实现了 Comparator 接口，对总成绩做了一个排序。

PriorityQueue 是一个优先级队列，参数为 StudentComparator，然后我们添加了 4 个学生对象进去。

来看一下输出结果：

<pre><code class="language-text line-numbers">[Student{name='小木蕊', 总成绩=170}]
[Student{name='学习Java', 总成绩=190}, Student{name='小木蕊', 总成绩=170}]
[Student{name='学习Java', 总成绩=190}, Student{name='小木蕊', 总成绩=170}, Student{name='小驼铃', 总成绩=185}]
Student{name='学习Java', 总成绩=190} Student{name='小驼铃', 总成绩=185} Student{name='萌新', 总成绩=170} Student{name='小木蕊', 总成绩=170}
</code></pre>

我们使用 offer 方法添加元素，最后用 while 循环遍历元素（通过 poll 方法取出元素），从结果可以看得出，[PriorityQueue]按照学生的总成绩由高到低进行了排序。

<h3>04、map)04、Map</h3>

Map 保存的是键值对，键要求保持唯一性，值可以重复。

<h4>1 HashMap</h4>

HashMap 实现了 Map 接口，可以根据键快速地查找对应的值——通过哈希函数将键映射到哈希表中的一个索引位置，从而实现快速访问。[后面会详细聊到hashmap.html)。

这里先大致了解一下 HashMap 的特点：

<ul>
<li>HashMap 中的键和值都可以为 null。如果键为 null，则将该键映射到哈希表的第一个位置。</li>
<li>可以使用迭代器或者 forEach 方法遍历 HashMap 中的键值对。</li>
<li>HashMap 有一个初始容量和一个负载因子。初始容量是指哈希表的初始大小，负载因子是指哈希表在扩容之前可以存储的键值对数量与哈希表大小的比率。默认的初始容量是 16，负载因子是 0.75。</li>
</ul>

来个简单的增删改查吧。

<pre><code class="language-java line-numbers">// 创建一个 HashMap 对象
HashMap&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();

// 添加键值对
hashMap.put("萌新", "cenzhong");
hashMap.put("小木蕊", "wanger");
hashMap.put("学习Java", "chenqingyang");

// 获取指定键的值
String value1 = hashMap.get("萌新");
System.out.println("萌新对应的值为：" + value1);

// 修改键对应的值
hashMap.put("萌新", "chenmo");
String value2 = hashMap.get("萌新");
System.out.println("修改后萌新对应的值为：" + value2);

// 删除指定键的键值对
hashMap.remove("小木蕊");

// 遍历 HashMap
for (String key : hashMap.keySet()) {
    String value = hashMap.get(key);
    System.out.println(key + " 对应的值为：" + value);
}
</code></pre>

<h4>2 LinkedHashMap</h4>

HashMap 已经非常强大了，但它是无序的。如果我们需要一个有序的 Map，就要用到 [LinkedHashMaplinkedhashmap.html)。LinkedHashMap 是 HashMap 的子类，它使用链表来记录插入/访问元素的顺序。

LinkedHashMap 可以看作是 HashMap + LinkedList 的合体，它使用了哈希表来存储数据，又用了双向链表来维持顺序。

来一个简单的例子。

<pre><code class="language-java line-numbers">// 创建一个 LinkedHashMap，插入的键值对为 萌新 小木蕊 学习Java
LinkedHashMap&lt;String, String&gt; linkedHashMap = new LinkedHashMap&lt;&gt;();
linkedHashMap.put("萌新", "cenzhong");
linkedHashMap.put("小木蕊", "wanger");
linkedHashMap.put("学习Java", "chenqingyang");

// 遍历 LinkedHashMap
for (String key : linkedHashMap.keySet()) {
    String value = linkedHashMap.get(key);
    System.out.println(key + " 对应的值为：" + value);
}
</code></pre>

来看输出结果：

<pre><code class="language-text line-numbers">萌新 对应的值为：cenzhong
小木蕊 对应的值为：wanger
学习Java 对应的值为：chenqingyang
</code></pre>

从结果中可以看得出来，LinkedHashMap 维持了键值对的插入顺序，对吧？为了和 LinkedHashMap 做对比，我们用同样的数据试验一下 HashMap。

<pre><code class="language-java line-numbers">// 创建一个HashMap，插入的键值对为 萌新 小木蕊 学习Java
HashMap&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();
hashMap.put("萌新", "cenzhong");
hashMap.put("小木蕊", "wanger");
hashMap.put("学习Java", "chenqingyang");

// 遍历 HashMap
for (String key : hashMap.keySet()) {
    String value = hashMap.get(key);
    System.out.println(key + " 对应的值为：" + value);
}
</code></pre>

来看输出结果：

<pre><code class="language-text line-numbers">萌新 对应的值为：cenzhong
学习Java 对应的值为：chenqingyang
小木蕊 对应的值为：wanger
</code></pre>

HashMap 没有维持键值对的插入顺序，对吧？

<h4>3 TreeMap</h4>

[TreeMap] 实现了 SortedMap 接口，可以自动将键按照自然顺序或指定的比较器顺序排序，并保证其元素的顺序。内部使用红黑树来实现键的排序和查找。

同样来一个增删改查的 demo：

<pre><code class="language-java line-numbers">// 创建一个 TreeMap 对象
Map&lt;String, String&gt; treeMap = new TreeMap&lt;&gt;();

// 向 TreeMap 中添加键值对
treeMap.put("萌新", "cenzhong");
treeMap.put("小木蕊", "wanger");
treeMap.put("学习Java", "chenqingyang");

// 查找键值对
String name = "萌新";
if (treeMap.containsKey(name)) {
    System.out.println("找到了 " + name + ": " + treeMap.get(name));
} else {
    System.out.println("没有找到 " + name);
}

// 修改键值对
name = "小木蕊";
if (treeMap.containsKey(name)) {
    System.out.println("修改前的 " + name + ": " + treeMap.get(name));
    treeMap.put(name, "newWanger");
    System.out.println("修改后的 " + name + ": " + treeMap.get(name));
} else {
    System.out.println("没有找到 " + name);
}

// 删除键值对
name = "学习Java";
if (treeMap.containsKey(name)) {
    System.out.println("删除前的 " + name + ": " + treeMap.get(name));
    treeMap.remove(name);
    System.out.println("删除后的 " + name + ": " + treeMap.get(name));
} else {
    System.out.println("没有找到 " + name);
}

// 遍历 TreeMap
for (Map.Entry&lt;String, String&gt; entry : treeMap.entrySet()) {
    System.out.println(entry.getKey() + ": " + entry.getValue());
}
</code></pre>

与 HashMap 不同的是，TreeMap 会按照键的顺序来进行排序。

<pre><code class="language-java line-numbers">// 创建一个 TreeMap 对象
Map&lt;String, String&gt; treeMap = new TreeMap&lt;&gt;();

// 向 TreeMap 中添加键值对
treeMap.put("c", "cat");
treeMap.put("a", "apple");
treeMap.put("b", "banana");

// 遍历 TreeMap
for (Map.Entry&lt;String, String&gt; entry : treeMap.entrySet()) {
    System.out.println(entry.getKey() + ": " + entry.getValue());
}
</code></pre>

来看输出结果：

<pre><code class="language-text line-numbers">a: apple
b: banana
c: cat
</code></pre>

默认情况下，已经按照键的自然顺序排过了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date><![CDATA[2024-03-06 13:23:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-06 05:23:26]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-06 13:23:26]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-06 05:23:26]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[java%e9%9b%86%e5%90%88%e6%a1%86%e6%9e%b6%e3%80%81list%e3%80%81set%e3%80%81map%e3%80%81%e9%98%9f%e5%88%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="category" nicename="zaoping"><![CDATA[招聘]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[解密队列的魔法：优先队列与单调队列的奇妙之旅]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/07/235/</link>
		<pubDate>Thu, 07 Mar 2024 07:57:02 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><strong>解密队列的魔法：优先队列与单调队列的奇妙之旅</strong></h1>

<blockquote>
  作者： 小木蕊 2024年3月7日
</blockquote>

队列，这个计算机科学中常见的数据结构，以其先进先出（FIFO）的特性在算法中扮演着重要的角色。然而，在队列的世界中，还隐藏着两个神奇的变种：优先队列和单调队列。本文将带领读者一起揭开它们的神秘面纱，探索它们在算法领域的奇妙之旅。

<h2>优先队列：让任务有序排队</h2>

优先队列是一种特殊的队列，其中每个元素都被赋予不同的优先级。这个优先级规定了元素在队列中的处理顺序，高优先级的元素将会在低优先级的元素之前被处理。典型的应用场景包括任务调度、图算法中的Dijkstra算法等。

<h4>实现方式：堆的魔法</h4>

通常，优先队列的实现采用堆这一神奇的数据结构。堆是一种特殊的树状数据结构，其中每个节点的值都小于等于（或大于等于）其子节点的值。这使得在堆中，根节点的值具有最高（或最低）优先级，从而方便了优先队列的实现。

<img src="https://s2.loli.net/2024/03/07/yStgD65PC89XsZd.png" alt="优先队列.drawio" />

<h3><strong>Java实现</strong></h3>

<pre><code class="language-java line-numbers">//优先级队列中一个元素为int[k,v] k为元素，v为出现次数
//根据 v排序 v1 - v2 按照从小到大 （小顶堆） 反之
PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;((pair1, pair2) -&gt; pair1[1] - pair2[1]);
//弹出最小值 4
pq.poll();
</code></pre>

<h3><strong>练手题目</strong></h3>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a>

中等

给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。

<strong>示例 1:</strong>

<pre><code class="line-numbers">输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
</code></pre>

<strong>示例 2:</strong>

<pre><code class="line-numbers">输入: nums = [1], k = 1
输出: [1]
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>k</code> 的取值范围是 <code>[1, 数组中不相同的元素的个数]</code></li>
<li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code> 个高频元素的集合是唯一的</li>
</ul>

<strong>进阶：</strong>你所设计算法的时间复杂度 <strong>必须</strong> 优于 <code>O(n log n)</code> ，其中 <code>n</code> 是数组大小。

<h4>思路分析</h4>

<ul>
<li>优先队列就适合这种 一堆数据中让你求出 频率最高最低的问题</li>
<li>将所有的数据统计到<code>map中 k = nums[i] v = 出现次数</code></li>
<li>使用优先队列进行排序 并维护 k个元素即可</li>
<li>收集最的元素</li>
</ul>

<h4>代码实现</h4>

<pre><code class="language-java line-numbers">class Solution {
    public static void main(String[] args) {
        new Solution().topKFrequent(new int[]{1, 1, 1, 2, 2, 3}, 2);
    }

    public int[] topKFrequent(int[] nums, int k) {
        HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();
        //统计次数放入map
        for (int i = 0; i &lt; nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }

        //优先级队列中一个元素为int[k,v] k为元素，v为出现次数
        //根据 v排序 v1 - v2 按照从小到大 （小顶堆） 反之
        PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;((pair1, pair2) -&gt; pair1[1] - pair2[1]);
        for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {
            //不满k个 直接加入
            if (pq.size() &lt; k) {
                pq.add(new int[]{entry.getKey(), entry.getValue()});
            } else {
                //大于堆顶 做更新操作
                if (entry.getValue() &gt; pq.peek()[1]) {
                    pq.poll();
                    pq.add(new int[]{entry.getKey(), entry.getValue()});
                }
            }
        }

        int ans[] = new int[k];
        for (int i = k - 1; i &gt;= 0; i--) {
            //结果集 根元素为最小元素&lt;左孩子&lt;右孩子
            ans[i] = pq.poll()[0];
        }
        return ans;
    }
}
</code></pre>

<h4>运行结果</h4>

<img src="https://s2.loli.net/2024/03/07/h7duGe58wXktNDi.png" alt="image-20240307154515028" style="zoom:80%;" />

<h3>单调队列：滑窗问题的得力助手</h3>

单调队列则是在队列的基础上，引入了单调性的概念。队列中的元素按照一定的单调递增或递减顺序排列，为解决一些需要维护滑动窗口或连续子数组/子序列的问题提供了高效的解决方案。

<h2>实现方式：双端队列的魔法</h2>

为了实现单调队列，我们借助了双端队列（Deque）这一数据结构。通过在队列两端灵活添加和删除元素，我们可以维护队列的单调性，使其在O(1)的时间内获取当前队列中的最大或最小元素，为解决特定问题提供了高效的途径。

<h3>奇妙的算法场景</h3>

这两种队列的神奇之处在于它们能够解决一系列复杂的算法问题，从最基础的任务调度到图算法中的最短路径查找，再到滑动窗口问题的高效求解，它们都发挥着不可替代的作用。

<h4>练手题目</h4>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a>

困难

给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。

返回 <em>滑动窗口中的最大值</em> 。

<strong>示例 1：</strong>

<pre><code class="line-numbers">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
</code></pre>

<strong>示例 2：</strong>

<pre><code class="line-numbers">输入：nums = [1], k = 1
输出：[1]
</code></pre>

<strong>提示：</strong>

<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
<li><code>1 &lt;= k &lt;= nums.length</code></li>
</ul>

<h4>思路分析</h4>

<ul>
<li>使用单调对列将最大值维护到队列的出口处，然后实现好 <code>poll() add、getMax()</code>函数即可</li>
</ul>

<h4>代码实现</h4>

<pre><code class="language-java line-numbers">class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 1) {
            return nums;
        }
        int len = nums.length - k + 1;
        //结果集
        int res[] = new int[len];
        int num = 0;
        MyQueue myQueue = new MyQueue();
        for (int i = 0; i &lt; k; i++) {
            myQueue.add(nums[i]);
        }
        res[num++] = myQueue.peek();
        for (int i = k; i &lt; nums.length; i++) {
            //移除滑动窗口左边的元素
            myQueue.poll(nums[i - k]);
            //加入滑动窗口右边的元素
            myQueue.add(nums[i]);
            res[num++] = myQueue.peek();
        }
        return res;
    }
}


//自定义单调队列
class MyQueue {


    Deque&lt;Integer&gt; deque;

    public MyQueue() {
        deque = new LinkedList&lt;&gt;();
    }

    //弹出
    void poll(int val) {
        //但前弹出元素为最大值
        if (!deque.isEmpty() &amp;&amp; val == deque.peekFirst()) {
            deque.pollFirst();
        }
    }


    //添加
    void add(int val) {
        //加入元素时保证其之前没有比起更小的元素
        while (!deque.isEmpty() &amp;&amp; val &gt; deque.getLast()) {
            deque.removeLast();
        }
        deque.addLast(val);
    }

    //前端/出口处为最大值
    int peek() {
        return deque.peekFirst();
    }
}
</code></pre>

<h4>运行结果</h4>

<img src="https://s2.loli.net/2024/03/07/aJImkvNpucxGTUz.png" alt="image-20240307155050332" />

<h3>结语</h3>

在这篇博客中，我们一起探索了优先队列和单调队列这两个队列的神奇变种。它们的实现方式和应用场景让我们对队列的应用有了更深层次的理解。在算法和数据结构的大舞台上，这两个队列以其独特的魔法，为我们解决各种问题提供了强大的工具。通过深入了解它们，我们或许能够在编程的旅途中发现更多的奇迹。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date><![CDATA[2024-03-07 15:57:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-07 07:57:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-07 15:57:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-07 07:57:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%a3%e5%af%86%e9%98%9f%e5%88%97%e7%9a%84%e9%ad%94%e6%b3%95%ef%bc%9a%e4%bc%98%e5%85%88%e9%98%9f%e5%88%97%e4%b8%8e%e5%8d%95%e8%b0%83%e9%98%9f%e5%88%97%e7%9a%84%e5%a5%87%e5%a6%99%e4%b9%8b%e6%97%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e6%a0%88%e5%92%8c%e9%98%9f%e5%88%97"><![CDATA[栈和队列]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[236]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[DTO 数据传输对象 简化数据传输]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/17/240/</link>
		<pubDate>Sun, 17 Mar 2024 06:05:02 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=240</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>DTO 数据传输对象 简化数据传输</h1>

<blockquote>
  作者: 小木蕊 2024年3月17日
</blockquote>

<strong>内容简介</strong>

<ol>
<li><a class="wp-editor-md-post-content-link" href="#dto是什么">DTO是什么</a></li>
<li><a class="wp-editor-md-post-content-link" href="#前后端解耦示例">前后端解耦示例</a></li>
<li><a class="wp-editor-md-post-content-link" href="#dto-vs-vo-vs-po-区别与联系">DTO与VO、PO区别与联系</a></li>
</ol>

<h3>DTO是什么</h3>

DTO是数据传输对象（Data Transfer Object）的缩写，是一种设计模式，用于在不同层之间传输数据。DTO通常用于解耦应用程序的不同部分，例如在前端和后端之间，或者在应用程序的不同层（如服务层和持久层）之间。它们的主要目的是简化数据的传输，并在不同层之间定义清晰的数据模型。

DTO通常是一个简单的类或结构，包含需要在不同层之间传输的数据字段。它们不应该包含业务逻辑，而只是用于携带数据。在一些情况下，DTO也可能包含数据验证逻辑，以确保传输的数据的有效性。

使用DTO有助于降低耦合度，提高代码的可维护性和可扩展性。通过定义清晰的数据传输对象，可以更容易地对应用程序进行修改和扩展，而不会影响其他部分的代码。

<h3>前后端解耦示例</h3>

让我们以一个简单的Web应用程序为例来说明前端和后端解耦的情况。
假设我们有一个简单的博客系统，其中包含文章的展示和管理功能。在这个应用程序中，我们可以使用前端（通常是JavaScript和HTML）与后端（通常是服务器端的应用程序，如Node.js、Java Spring等）进行交互。为了解耦前端和后端，我们可以使用DTO来定义前端和后端之间的数据传输。

下面是一个示例：

假设我们有一个博客文章的数据模型：

<strong>后端为Java</strong>

<pre><code class="language-java line-numbers">// BlogPost.java (后端)
public class BlogPost {
    private Long id;
    private String title;
    private String content;
    private Date createdDate;
    // Getters and setters
}
</code></pre>

我们可以创建一个用于在前端和后端之间传输博客文章数据的DTO：

<pre><code class="language-java line-numbers">// BlogPostDTO.java (共享)
public class BlogPostDTO {
    private Long id;
    private String title;
    private String content;
    // Getters and setters
}
</code></pre>

在后端，我们可以使用Spring MVC（或其他类似框架）将博客文章数据转换为DTO，并将其返回给前端：

<pre><code class="language-java line-numbers">// BlogController.java (后端)
@RestController
public class BlogController {

    @Autowired
    private BlogPostService blogPostService;

    @GetMapping("/blogposts/{id}")
    public ResponseEntity&lt;BlogPostDTO&gt; getBlogPostById(@PathVariable Long id) {
        BlogPost blogPost = blogPostService.getBlogPostById(id);
        BlogPostDTO blogPostDTO = convertToDTO(blogPost);
        return ResponseEntity.ok(blogPostDTO);
    }

    private BlogPostDTO convertToDTO(BlogPost blogPost) {
        BlogPostDTO dto = new BlogPostDTO();
        dto.setId(blogPost.getId());
        dto.setTitle(blogPost.getTitle());
        dto.setContent(blogPost.getContent());
        return dto;
    }
}
</code></pre>

在前端，我们可以使用JavaScript（或其他前端框架）来调用后端API，并接收DTO对象作为响应：

<pre><code class="language-javascript line-numbers">// Frontend JavaScript
fetch('/blogposts/1')
    .then(response =&gt; response.json())
    .then(data =&gt; {
        // 使用从后端获取的数据对象进行前端操作
        console.log(data.title);
        console.log(data.content);
    });
</code></pre>

通过使用DTO，我们在前端和后端之间定义了一个清晰的数据传输模型，使得两者之间的交互更加简单和清晰，同时也使得前端和后端的开发团队可以更加独立地开发和测试他们的代码。

<h3>DTO vs VO vs PO 区别与联系</h3>

DTO（数据传输对象）、VO（值对象）和PO（持久化对象）是软件开发中常见的三种对象模型，它们在设计和使用上有一些区别与联系。

<ol>
<li><strong>DTO（Data Transfer Object）</strong>：

<ul>
<li><strong>定义</strong>：DTO是用于在不同层之间传输数据的对象模型，通常用于解耦应用程序的不同部分。</li>
<li><strong>特点</strong>：DTO通常是轻量级的，只包含数据字段和对应的访问方法（getter和setter），不包含业务逻辑。</li>
<li><strong>用途</strong>：主要用于在不同层之间传输数据，例如在前端和后端之间、在服务层和持久层之间等。</li>
</ul></li>
<li><strong>VO（Value Object）</strong>：

<ul>
<li><strong>定义</strong>：VO是用于表示领域模型中的值的对象，通常用于封装一组相关的数据，作为领域对象的属性。</li>
<li><strong>特点</strong>：VO通常包含一组相关联的数据字段，表示领域模型中的一个值或值的集合。它们可能包含一些简单的业务逻辑。</li>
<li><strong>用途</strong>：主要用于表示领域模型中的值，例如在领域驱动设计（DDD）中。</li>
</ul></li>
<li><strong>PO（Persistence Object）</strong>：

<ul>
<li><strong>定义</strong>：PO是用于表示持久化数据的对象，通常与数据库表或其他持久化存储相关联。</li>
<li><strong>特点</strong>：PO通常与数据库表的结构相对应，包含持久化数据的字段，以及对应的数据库操作方法。</li>
<li><strong>用途</strong>：主要用于将数据从内存持久化到数据库中，或者从数据库中检索数据到内存中。</li>
</ul></li>
</ol>

区别与联系：

<ul>
<li>区别：

<ul>
<li>DTO主要用于在不同层之间传输数据，而VO和PO通常用于表示领域模型中的值或持久化数据。</li>
<li>DTO通常不包含业务逻辑，而VO和PO可能包含一些简单的业务逻辑。</li>
<li>VO主要用于表示领域模型中的值，而PO主要用于表示持久化数据，二者用途不同。</li>
</ul></li>
<li>联系：

<ul>
<li>DTO、VO和PO都是用于封装数据的对象模型，它们都可以包含一组数据字段和对应的访问方法。</li>
<li>在一些场景中，DTO、VO和PO可能会有重叠，例如一个对象可能既是DTO又是VO，或者一个对象既是VO又是PO，但它们的主要目的和使用场景不同。</li>
</ul></li>
</ul>

在实际开发中，根据具体的需求和设计原则，可以灵活地选择和使用DTO、VO和PO，以便实现更清晰、更灵活的代码结构。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date><![CDATA[2024-03-17 14:05:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-17 06:05:02]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-18 22:10:53]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-18 14:10:53]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dto-%e6%95%b0%e6%8d%ae%e4%bc%a0%e8%be%93%e5%af%b9%e8%b1%a1-%e7%ae%80%e5%8c%96%e6%95%b0%e6%8d%ae%e4%bc%a0%e8%be%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[244]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[volatile关键字使用极其原理讲解]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/19/251/</link>
		<pubDate>Tue, 19 Mar 2024 14:12:13 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>volatile关键字使用极其原理讲解</h1>

<blockquote>
  作者：小木蕊 2024年3月19日
</blockquote>

<h2>1.作用</h2>

在Java中，volatile关键字有特殊的内存语义。volatile主要有以下两个功能：

<ul>
<li>保证变量的<strong>内存可见性</strong></li>
<li>禁止volatile变量与普通变量<strong>重排序</strong>（JSR133提出，Java 5 开始才有这个“增强的volatile内存语义”）</li>
</ul>

<h3>1.1内存可见性</h3>

在代码中的具体体现为如果用<code>volatile</code>关键字声明了一个变量，在一个线程里面改变了这个变量的值，那其它线程是立马可见更改后的值的

线程A和线程B来交替打印变量的值：

<pre><code class="language-java line-numbers">public class Signal {
    private static volatile int signal = 0;

    static class ThreadA implements Runnable {
        @Override
        public void run() {
            while (signal &lt; 5) {
                if (signal % 2 == 0) {
                    System.out.println("threadA: " + signal);
                    signal++;
                }
            }
        }
    }

    static class ThreadB implements Runnable {
        @Override
        public void run() {
            while (signal &lt; 5) {
                if (signal % 2 == 1) {
                    System.out.println("threadB: " + signal);
                    signal = signal + 1;
                }
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        new Thread(new ThreadA()).start();
        Thread.sleep(1000);
        new Thread(new ThreadB()).start();
    }
}

// 输出：
threadA: 0
threadB: 1
threadA: 2
threadB: 3
threadA: 4
</code></pre>

因为 <code>sginal</code>被 <code>volatile</code>修饰所以线程A修改后线程B立刻就得到了最新的值，这就是保证变量的<strong>内存可见性</strong>带来的好处

<h3>1.2禁止volatile变量与普通变量<strong>重排序</strong></h3>

下面是<strong>单例模式</strong>的其中一种<strong>(双重检查法)</strong>

<pre><code class="language-java line-numbers">public class Singleton {

    private volatile static Singleton instance; // 假设不使用volatile关键字

    // 双重锁检验
    public  static Singleton getInstance() {
        if (instance == null) { // 第7行
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton(); // 第10行
                }
            }
        }
        return instance;
    }
}
</code></pre>

我们将以下代码拆解

<pre><code class="language-java line-numbers">instance = new Singleton(); // 第10行

// 可以分解为以下三个步骤
1 memory=allocate();// 分配内存 相当于c的malloc
2 ctorInstanc(memory) //初始化对象
3 s=memory //设置s指向刚分配的地址

// 上述三个步骤可能会被重排序为 1-3-2，也就是：
1 memory=allocate();// 分配内存 相当于c的malloc
3 s=memory //设置s指向刚分配的地址
2 ctorInstanc(memory) //初始化对象
</code></pre>

而一旦假设发生了这样的重排序，比如线程A在第10行执行了步骤1和步骤3，但是步骤2还没有执行完。这个时候另一个线程B执行到了第7行，它会判定instance不为空，然后直接返回了一个未初始化完成的instance！

volatile的禁止重排序功能还是非常有用的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date><![CDATA[2024-03-19 22:12:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-19 14:12:13]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-19 22:12:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-19 14:12:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[volatile%e5%85%b3%e9%94%ae%e5%ad%97%e4%bd%bf%e7%94%a8%e6%9e%81%e5%85%b6%e5%8e%9f%e7%90%86%e8%ae%b2%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[253]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Maven初始化之C盘错误]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/23/255/</link>
		<pubDate>Sat, 23 Mar 2024 15:07:43 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Maven初始化之C盘错误</h1>

<blockquote>
  作者 小木蕊 2024年3月23日
</blockquote>

<h3>问题描述</h3>

有这么一种情况,当我们的电脑只有一个逻辑盘C盘的时候,在设置maven仓库的时候,我们将仓库设置到某些位置的时候,将会发生一种情况我们在打包或则拉取jar包的时候就会出现无法写入的问题.导致<code>maven</code>无法使用,无法拉取<code>jar</code>包.

<h3><strong>位置设置错误示范</strong></h3>

<img src="https://s2.loli.net/2024/03/23/S6tVYdFDW2XfR3s.png" alt="image-20240323225343392" />

<h3><strong>原因分析</strong></h3>

目前这个目录下<strong>maven是没有权限去写</strong>内容的,我们手动去创建都需要系统授予管理员权限

<h3>个人建议</h3>

<img src="https://s2.loli.net/2024/03/23/brxuelzs3IQZAJg.png" alt="image-20240323225956973" />

放在自己的用户目录下这个目录是有权利的,这样就可以正常使用了.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date><![CDATA[2024-03-23 23:07:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-23 15:07:43]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-23 23:08:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-23 15:08:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven%e5%88%9d%e5%a7%8b%e5%8c%96%e4%b9%8bc%e7%9b%98%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0%ef%bc%8c%e5%b0%8f%e6%9c%a8%e8%95%8a%e6%89%80%e9%81%87%e5%88%b0%e7%9a%84%e6%89%80%e6%9c%89%e7%9a%84bug%e5%90%88%e9%9b%86"><![CDATA[Bug记录]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[256]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[拿捏递归之法]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/24/260/</link>
		<pubDate>Sun, 24 Mar 2024 14:54:07 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>拿捏递归之法</h2>

<blockquote>
  作者：小木蕊 2024年3月24日
</blockquote>

递归（Recursion）是计算机科学中的一个重要概念，它指的是一个函数在其定义中直接或间接调用自身的方法。递归通常用于解决那些可以分解为更小、更简单的同类子问题的问题。递归的基本思想是将问题分解为更小的子问题，子问题再分解为更小的子问题，直到问题可以直接解决或达到某个终止条件。

思想讲起来很简单，就是<strong>自己调用自己</strong>，但是写起代码来全看感觉，能不能运行全靠运气。我想这是许多和我一样的小白的感受，那么怎么来解决这一问题呢。

其实很多东西都是有技巧，有方法的。我们只需要遵循其基本的方法论。系统的训练，小白也可以掌握递归。

<h3>递归步骤</h3>

我们将递归的思路拆分为三步

<ol>
<li><h6>确定递归函数的返回值和参数</h6></li>
<li><h6>确定递归结束条件</h6></li>
<li><h6>思考单层递归函数逻辑</h6></li>
</ol>

我们每次写递归函数时都刻意去这样思考

<h4>举个例子理解一下</h4>

<a class="wp-editor-md-post-content-link" href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a>

给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。

<strong>示例 1：</strong>

<img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" alt="img" />

<pre><code class="line-numbers">输入：root = [4,2,7,1,3,6,9]
输出：[4,7,2,9,6,3,1]
</code></pre>

<strong>示例 2：</strong>

<img src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg" alt="img" />

<pre><code class="line-numbers">输入：root = [2,1,3]
输出：[2,3,1]
</code></pre>

<strong>示例 3：</strong>

<pre><code class="line-numbers">输入：root = []
输出：[]
</code></pre>

带入上面的方法论来分析代码

<ol>
<li><strong>确定递归函数的返回值和参数</strong>

<pre><code class="language-java line-numbers">void invert(TreeNode node) {}
</code></pre></li>
<li><h6>确定递归结束条件</h6>

<pre><code class="language-java line-numbers">if (node.left == null &amp;&amp; node.right == null) return;
</code></pre></li>
<li><h6>思考单层递归函数逻辑</h6>

<pre><code class="language-java line-numbers">TreeNode temp = node.left;
node.left = node.right;
node.right = temp;
if (node.left != null)
   invert(node.left);
if (node.right != null)
   invert(node.right);
</code></pre></li>
</ol>

按照这样的步骤分析代码将会变得清晰明了

完整的代码

<pre><code class="language-java line-numbers">class Solution {
    public TreeNode invertTree(TreeNode root) {
        //
        if (root == null) {
            return null;
        }
        invert(root);
        return root;
    }

    //1 确定返回值和参数
    void invert(TreeNode node) {
        //2确定终止条件
        //3思考单层递归逻辑
        if (node.left == null &amp;&amp; node.right == null) return;
        TreeNode temp = node.left;
        node.left = node.right;
        node.right = temp;
        if (node.left != null)
            invert(node.left);
        if (node.right != null)
            invert(node.right);

    }
}
</code></pre>

<strong>天赋决定的是一个人的上限，而下限是由努力和刻意练习决定的</strong>,这句话大家一起共勉]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date><![CDATA[2024-03-24 22:54:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-24 14:54:07]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 20:58:40]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 12:58:40]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8b%bf%e6%8d%8f%e9%80%92%e5%bd%92%e4%b9%8b%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="erchashu"><![CDATA[二叉树]]></category>
		<category domain="category" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[262]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[MySQL行锁]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/25/265/</link>
		<pubDate>Mon, 25 Mar 2024 14:09:11 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>MySQL行锁</h3>

<blockquote>
  作者：小木蕊 2024年3月25
</blockquote>

MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁

<h4>两阶段锁</h4>

<strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</strong>

<h4>例子：</h4>

事务A、B都对t中的数据更新

<img src="https://s2.loli.net/2024/03/25/GY4qOsdPztWIfS7.png" alt="image-20240325211559920"  />

在事务A中并不是开始时持有两个行锁，而是分别执行update语句时才持有相应的行锁，但<strong>直到事务结束才释放所有的锁</strong>

<h4>结论：如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放</h4>

也就是将上述的<code>update t set k=k+1 where id = 1</code>放到最后

<h3>死锁和死锁检测</h3>

在尽可能的避免长时间的等待的情况下，还有另一种威胁，也就是<strong>死锁</strong>。

死锁的形成条件

<ol>
<li>互斥条件（资源的竞争）（Mutual Exclusion）：至少有一个资源被标记为独占资源，即一次只能被一个进程使用。当一个进程占用了该资源时，其他进程不能同时占用，只能等待该资源释放。</li>
<li>请求和保持条件（占有且等待）（Hold and Wait）：一个进程在等待其他进程释放资源的同时，继续持有已分配到的资源。换句话说，进程在请求新的资源时不会释放已经持有的资源。</li>
<li>不可剥夺条件（No Preemption）：已经分配给一个进程的资源不能被强制性地剥夺，只能由进程自己释放。</li>
<li>循环等待条件（Circular Wait）：存在一个进程等待序列，其中每个进程都在等待下一个进程所持有的资源，形成一个环路。即进程1等待进程2所持有的资源，进程2等待进程3所持有的资源，...，最后进程n等待进程1所持有的资源。</li>
</ol>

<strong>死锁例子</strong>

<img src="https://s2.loli.net/2024/03/25/leEvdDLC5gmxiG9.png" alt="image-20240325215333625" />

<strong>处理机制</strong>

<ul>
<li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 <code>innodb_lock_wait_timeout</code> 来设置。</li>
<li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 <code>innodb_deadlock_detect 设置为 on</code>，表示开启这个逻辑。</li>
</ul>

推荐使用第二种机制，原因如下：

在 InnoDB 中，innodb_lock_wait_timeout 的默认值是 50s，意味着如果采用第一个策略，当出现死锁以后，第一个被锁住的线程要过 50s 才会超时退出，然后其他线程才有可能继续执行。对于在线服务来说，这个等待时间往往是无法接受的。

但是，我们又不可能直接把这个时间设置成一个很小的值，比如 1s。这样当出现死锁的时候，确实很快就可以解开，但如果不是死锁，而是简单的锁等待呢？所以，超时时间设置太短的话，会出现很多误伤。

<blockquote>
  innodb_deadlock_detect 的默认值本身就是 on
</blockquote>

<h3>怎么解决由热点行更新导致的性能问题</h3>

<ol>
<li>将死锁检测机制关掉</li>
<li><strong>另一个思路是控制并发度</strong></li>
</ol>

#####控制并发度思路

<ol>
<li>客户端控制</li>
<li>中间件控制</li>
<li>MySQL控制</li>
</ol>

推荐第2、3种，第一种，即使限制一个客户端5个线程，假设有600个客户端照样会有3000个线程，第二种对中间件经行限制，第三种修改 MySQL 源码的人，也可以做在 MySQL 里面。基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。

<h5>表结构做出优化</h5>

以影院账户为例，可以考虑放在多条记录上，比如 10 个记录，影院的账户总额等于这 10 个记录的值的总和。这样每次要给影院账户加金额的时候，随机选其中一条记录来加。这样每次冲突概率变成原来的 1/10，可以减少锁等待个数，也就减少了死锁检测的 CPU 消耗。

这个方案看上去是无损的，但其实这类方案需要根据业务逻辑做详细设计。如果账户余额可能会减少，比如退票逻辑，那么这时候就需要考虑当一部分行记录变成 0 的时候，代码要有特殊处理。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date><![CDATA[2024-03-25 22:09:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-25 14:09:11]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-25 22:09:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-25 14:09:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e8%a1%8c%e9%94%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[266]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Mybatis：resultMap（结果映射)和resultType（结果类型）区别与联系]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/26/270/</link>
		<pubDate>Tue, 26 Mar 2024 13:41:35 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Mybatis-parameterType（参数类型）、resultMap（结果映射)和resultType（结果类型）区别与联系</h3>

<blockquote>
  作者：小木蕊 2024年3月26日
</blockquote>

MyBatis是一种用于Java的持久层框架，用于将数据库操作与Java对象之间的映射进行管理。在MyBatis中，有三个重要的概念：<code>parameterType</code>
（参数类型）、<code>resultMap</code>（结果映射）和<code>resultType</code>（结果类型），它们之间有以下区别：

<ol>
<li><code>parameterType</code>（参数类型）：<code>parameterType</code>
用于指定传递给SQL语句的参数类型。它定义了在执行SQL语句时传递给数据库的参数的类型和结构。参数可以是一个简单的Java基本类型（如整数、字符串等），也可以是一个自定义的Java对象。在SQL语句中，可以使用<code>#{}</code>
占位符来引用参数。

例如，如果有一个名为<code>User</code>的Java对象，其中包含<code>id</code>和<code>name</code>属性，那么可以将<code>parameterType</code>设置为<code>User</code>
，并在SQL语句中使用<code>#{id}</code>和<code>#{name}</code>来引用对象的属性。</p></li>
<li><p><code>resultMap</code>（结果映射）：<code>resultMap</code>用于定义将SQL查询结果映射到Java对象的规则。通过<code>resultMap</code>
，可以指定如何将数据库中的列映射到Java对象的属性。<code>resultMap</code>可以定义复杂的映射关系，包括处理继承关系、关联关系等。

例如，如果有一个名为<code>User</code>的Java对象，其中包含<code>id</code>和<code>name</code>属性，并且数据库表中有相应的<code>id</code>和<code>name</code>列，可以使用<code>resultMap</code>
来指定将查询结果映射到<code>User</code>对象。</p></li>
<li><p><code>resultType</code>（结果类型）：<code>resultType</code>
用于指定查询结果的类型。它可以是一个简单的Java基本类型（如整数、字符串等），也可以是一个自定义的Java对象。当查询结果只包含一个列时，可以使用<code>resultType</code>
来指定结果的类型。

例如，如果执行一个查询，只需要返回一个整数值作为结果，可以将<code>resultType</code>设置为<code>int</code>。</p></li>
</ol>

<p><strong>结论</strong>：
<code>parameterType</code>用于指定传递给SQL语句的参数类型，<code>resultMap</code>用于定义将查询结果映射到Java对象的规则，而<code>resultType</code>
用于指定查询结果的类型。它们各自在MyBatis中扮演着不同的角色，用于处理参数和结果的映射关系。

<strong>注意事项</strong>
parameterType和resultMap是用于不同目的的配置选项，它们通常不会同时在同一个SQL语句中使用

<h3>resultMap 处理关联关系和继承关系</h3>

<ol>
<li>处理关联关系：</li>
</ol>

假设有两个表：<code>users</code>和<code>orders</code>，其中<code>users</code>表包含用户信息，<code>orders</code>
表包含订单信息，并且每个订单都关联到一个用户。下面是一个使用<code>resultMap</code>处理关联关系的示例：

<pre data-language=XML><code class="language-markup line-numbers">&lt;resultMap id="userResultMap" type="User"&gt;
    &lt;id property="id" column="user_id"/&gt;
    &lt;result property="name" column="user_name"/&gt;
    &lt;collection property="orders" ofType="Order"&gt;
        &lt;id property="id" column="order_id"/&gt;
        &lt;result property="amount" column="order_amount"/&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
</code></pre>

在上面的示例中，定义了一个名为<code>userResultMap</code>的<code>resultMap</code>，用于将查询结果映射到<code>User</code>对象。<code>User</code>对象包含<code>id</code>、<code>name</code>
和<code>orders</code>属性，其中<code>orders</code>属性是一个包含<code>Order</code>对象的集合。

<ol start="2">
<li>处理继承关系：</li>
</ol>

假设有一个基类<code>Vehicle</code>，有两个子类<code>Car</code>和<code>Motorcycle</code>，它们分别对应数据库中的不同表。下面是一个使用<code>resultMap</code>处理继承关系的示例：

<pre data-language=XML><code class="language-markup line-numbers">&lt;resultMap id="vehicleResultMap" type="Vehicle" discriminator="type"&gt;
    &lt;id property="id" column="vehicle_id"/&gt;
    &lt;result property="manufacturer" column="manufacturer"/&gt;
    &lt;discriminator javaType="String" column="vehicle_type"&gt;
        &lt;case value="car" resultMap="carResultMap"/&gt;
        &lt;case value="motorcycle" resultMap="motorcycleResultMap"/&gt;
    &lt;/discriminator&gt;
&lt;/resultMap&gt;

&lt;resultMap id="carResultMap" type="Car" extends="vehicleResultMap"&gt;
&lt;result property="numberOfDoors" column="number_of_doors"/&gt;
&lt;/resultMap&gt;

&lt;resultMap id="motorcycleResultMap" type="Motorcycle" extends="vehicleResultMap"&gt;
&lt;result property="engineDisplacement" column="engine_displacement"/&gt;
&lt;/resultMap&gt;
</code></pre>

在上面的示例中，定义了一个名为<code>vehicleResultMap</code>的基本<code>resultMap</code>，用于将查询结果映射到<code>Vehicle</code>对象。使用<code>discriminator</code>
标签指定了一个类型列<code>vehicle_type</code>，根据不同的类型值，选择不同的<code>resultMap</code>进行映射。

然后，定义了<code>carResultMap</code>和<code>motorcycleResultMap</code>，它们分别用于将查询结果映射到<code>Car</code>和<code>Motorcycle</code>对象，并通过<code>extends</code>
属性继承了<code>vehicleResultMap</code>的配置。

通过以上的<code>resultMap</code>配置，可以实现将关联关系和继承关系映射到Java对象中，从而提供更复杂的数据处理能力。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date><![CDATA[2024-03-26 21:41:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-26 13:41:35]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-26 21:41:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-26 13:41:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mybatis%ef%bc%9aresultmap%ef%bc%88%e7%bb%93%e6%9e%9c%e6%98%a0%e5%b0%84%e5%92%8cresulttype%ef%bc%88%e7%bb%93%e6%9e%9c%e7%b1%bb%e5%9e%8b%ef%bc%89%e5%8c%ba%e5%88%ab%e4%b8%8e%e8%81%94%e7%b3%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[111]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[二叉树之 左叶子之和]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/03/28/273/</link>
		<pubDate>Thu, 28 Mar 2024 09:05:33 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=273</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>二叉树之 左叶子之和</h3>

<blockquote>
  作者：小木蕊 2024年3月28日
</blockquote>

<h4>问题描述</h4>

给定二叉树的根节点 <code>root</code> ，返回所有左叶子之和。

<strong>示例 1：</strong>

<img src="https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg" alt="img" />

<pre><code class="line-numbers">输入: root = [3,9,20,null,null,15,7] 
输出: 24 
解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24
</code></pre>

<h4>任务</h4>

计算出左叶子节点的和

<h4><strong>解决方案</strong></h4>

<ol>
<li>搞清楚什么是左叶子节点

<ul>
<li>首先必须是叶子节点</li>
<li>必须是左孩子</li>
</ul>

<img src="https://s2.loli.net/2024/03/28/LwQvIUguap9y6tK.png" alt="image-20240328165212311" /></p></li>
<li><p>根据关系，选择后续遍历，因为需要先求出左孩子和右孩子的值才能够报备给根节点</p></li>
<li>根据递归三部曲写出递归代码

<ol>
<li>参数类型和返回值</li>
<li>递归终止条件</li>
<li>单层递归逻辑</li>
</ol></li>
</ol>

<h4>结果</h4>

<pre><code class="language-java line-numbers">class Solution {
    //1参数类型，返回值
    public int sumOfLeftLeaves(TreeNode root) {
        //递归法，后续遍历
        //2递归终止条件
        if (root == null)
            return 0;
        if (root.left == null &amp;&amp; root.right == null)
            return 0;
        //3单层逻辑处理
        int leftValue = sumOfLeftLeaves(root.left);
        //左叶子节点判断，只能在父节点上判断
        if (root.left != null &amp;&amp; root.left.left == null &amp;&amp; root.left.right == null) {
            leftValue = root.left.val;
        }
        int rightValue = sumOfLeftLeaves(root.right);
        return leftValue + rightValue;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    public TreeNode() {
    }

    public TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
</code></pre>

<p><img src="https://s2.loli.net/2024/03/28/3PbS7kMFdYJDK6p.png" alt="image-20240328165805974" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date><![CDATA[2024-03-28 17:05:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-28 09:05:33]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-28 17:06:25]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-28 09:06:25]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b9%8b-%e5%b7%a6%e5%8f%b6%e5%ad%90%e4%b9%8b%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="erchashu"><![CDATA[二叉树]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[274]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[支付发货场景解决方案]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/05/277/</link>
		<pubDate>Fri, 05 Apr 2024 14:30:04 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=277</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>支付设计——接入支付宝沙箱</h2>

<blockquote>
  作者：小木蕊 2024年4月5日
</blockquote>

<h3>1. 情景</h3>

前端使用<code>react</code>开发，后端使用<code>Java</code>，需要设计一个支付流程，前端下单后，后端保存到数据库如下面的流程，react无法直接使用支付宝沙箱支付的PayURL

<img src="https://s2.loli.net/2024/04/05/WQkzoPcRZJnjbaX.png" alt="image-20240405215404009" />

<h3>2. 任务</h3>

完成整个支付流程发回路

细节分析

<ol>
<li>支付宝沙箱返回的是一个<code>&lt;from&gt;</code>表单不是直接可以跳转的连接</p></li>
<li><p>前端使用的是<code>react</code>,而支付宝的PayURL使用的是<code>script</code>脚本操作document,react里不会执行跳转

<pre data-language=HTML><code class="language-markup line-numbers">&lt;form name="punchout_form" method="post" action="https://openapi-sandbox.dl.alipaydev.com/gateway.do?charset=utf-8&amp;method=alipay.trade.page.pay&amp;sign=YsWCMdLcIiJyo6K6AAQEEjJRzPYF6MpYDc65pPlIRZ6MIpAoQPzu6H6Z6u1q5PAIvf%2BkHIFzaTrjmd2dNOohYSFKcqpM%2FGKokaHs6MvQTlZaniow9rTvp0oW%2B54HnlFQhomCd6ayIwducJXMcG04fZHUnnETbNiaAGXwQPaLNQ8jS0Ttmt0vveAuzFBmWe%2F7LWT7pvcLpPDeZtV0RCO8TkCaZwxnJezoTeWbWNbtDU4puJnO7umvsoyAF35XQla2Ra6AipLEqJLte%2FMzisAqPoJdotSDoDUfC7bfNNdevVsBS83yRLXduqazvtWritSEdWsF2nvddJAvvTETthGPbQ%3D%3D&amp;return_url=https%3A%2F%2Fwww.xiaomurui.cn&amp;notify_url=https%3A%2F%2Fl793i66153.goho.co%2Fapi%2Fv1%2Fsale%2Fpay_notify&amp;version=1.0&amp;app_id=9021000135687750&amp;sign_type=RSA2&amp;timestamp=2024-04-05+20%3A00%3A45&amp;alipay_sdk=alipay-sdk-java-4.38.157.ALL&amp;format=json"&gt;
&lt;input type="hidden" name="biz_content" value="{"out_trade_no":"662878651673","total_amount":"0.01","subject":"OpenAi 测试商品(3.5)","product_code":"FAST_INSTANT_TRADE_PAY"}"&gt;
&lt;input type="submit" value="立即支付" style="display:none" &gt;
&lt;/form&gt;
&lt;script&gt;document.forms[0].submit();&lt;/script&gt;
</code></pre></li>
</ol>

<h3>3. 行动</h3>

<ol>
<li>将原有的<code>&lt;QRCode/&gt;</code>组件替换调使用<code>dangerouslySetInnerHTML={{__html: payUrl}}</code>直接更新原有标签的内容

<pre><code class="language-tsx line-numbers">&lt;div className={styles["product-pay-url"]} dangerouslySetInnerHTML={{__html: payUrl}}&gt;
                       {/*&lt;QRCode value={payUrl}/&gt;*/}
&lt;/div&gt;
</code></pre></li>
<li>手动用react的函数执行 <code>document.forms[0].submit()</code>操作代替失效的<code>script</code>脚本，同时加入一个定时器，在1s后执行，因为最开始的dom是没有from表单的

<pre><code class="language-tsx line-numbers">const handleButtonClick = () =&gt; {
       setShowModal(true);
       setTimeout(function () {
           console.log(document.forms[0])
           document.forms[0].submit()
       }, 1000)
 };
</code></pre></li>
</ol>

<h3>4. 结果</h3>

通过使用react支持的方式实现下单支付跳转

<img src="https://s2.loli.net/2024/04/05/gaZMFsGxQjt6eTu.png" alt="image-20240405222357959" style="zoom:50%;" />

<img src="https://s2.loli.net/2024/04/05/vOSuC1BcAi9r8gQ.png" alt="image-20240405222235089" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date><![CDATA[2024-04-05 22:30:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-05 14:30:04]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-11 20:57:20]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-11 12:57:20]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[pay]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[278]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[277]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Redis实现单点登录]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/13/286/</link>
		<pubDate>Sat, 13 Apr 2024 13:49:29 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Redis单点登录</h3>

<blockquote>
  作者：小木蕊 2024年4月13日
</blockquote>

<h4>1.情景</h4>

在用户登录的时候往往很讨厌频繁的登录，希望在一个系统登录后，无需再二次输入账号密码登录。普通session无法满足，多台服务器之间的session是无法共享的，或则说很难实现共享session数据。迫切需要一个技术来解决。

<h4>2.任务</h4>

<ul>
<li>需要实现用户单点登录，实现在一个系统登录，在有效期内无需在进行二次登录</li>
<li>用户登录信息在多个服务器之间共享</li>
</ul>

<h4>3. 解决方案（行动）</h4>

使用<code>Redis</code>，实现多服务器的共享用户信息。本身redis就是支持多个用户端去连接。

<img src="https://s2.loli.net/2024/04/13/MkXlvjVR3EKduoL.png" alt="image-20240413212531137" />

<strong>RefreshTokenInterceptor</strong>刷新token有效期拦截器

<pre><code class="language-java line-numbers">public class RefreshTokenInterceptor implements HandlerInterceptor {

    private StringRedisTemplate stringRedisTemplate;

    public RefreshTokenInterceptor(StringRedisTemplate stringRedisTemplate) {
        this.stringRedisTemplate = stringRedisTemplate;
    }

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // 1.获取请求头中的token
        String token = request.getHeader("authorization");
        if (StrUtil.isBlank(token)) {
            return true;
        }
        // 2.基于TOKEN获取redis中的用户
        String key  = LOGIN_USER_KEY + token;
        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);
        // 3.判断用户是否存在
        if (userMap.isEmpty()) {
            return true;
        }
        // 5.将查询到的hash数据转为UserDTO
        UserDTO userDTO = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);
        // 6.存在，保存用户信息到 ThreadLocal
        UserHolder.saveUser(userDTO);
        // 7.刷新token有效期
        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);
        // 8.放行
        return true;
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        // 移除用户
        UserHolder.removeUser();
    }
}

</code></pre>

<strong>LoginInterceptor</strong>登录拦截器

<pre><code class="language-java line-numbers">public class LoginInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        // 1.判断是否需要拦截（ThreadLocal中是否有用户）
        if (UserHolder.getUser() == null) {
            // 没有，需要拦截，设置状态码
            response.setStatus(401);
            // 拦截
            return false;
        }
        // 有用户，则放行
        return true;
    }
}
</code></pre>

<strong>Redis key的设计</strong>

<img src="https://s2.loli.net/2024/04/13/k2sbKaZd1mRWHMT.png" alt="image-20240413213430415" />

最终我们选择<code>Hash</code>

根据验证码登录

<strong>生成验证码</strong>

<pre><code class="language-java line-numbers">    public Result sendCode(String phone, HttpSession session) {
        // 1.校验手机号
        if (RegexUtils.isPhoneInvalid(phone)) {
            // 2.如果不符合，返回错误信息
            return Result.fail("手机号格式错误！");
        }
        // 3.符合，生成验证码
        String code = RandomUtil.randomNumbers(6);
        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);

        log.debug("验证码以生成：" + code);
        return Result.ok(code);
    }
</code></pre>

<strong>生成用户Token</strong>

<pre><code class="language-java line-numbers">public Result login(LoginFormDTO loginForm, HttpSession session) {

        String phone = loginForm.getPhone();
        if (RegexUtils.isPhoneInvalid(phone)) {
            // 2.如果不符合，返回错误信息
            return Result.fail("手机号格式错误！");
        }

        // 3.从redis获取验证码并校验
        String cacheCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);
        String code = loginForm.getCode();
        if (cacheCode == null || !cacheCode.equals(code)) {
            // 不一致，报错
            return Result.fail("验证码错误");
        }

        // 4.一致，根据手机号查询用户 select * from tb_user where phone = ?
        User user = query().eq("phone", phone).one();

//         5.判断用户是否存在
        if (user == null) {
            // 6.不存在，创建新用户并保存
            user = createUserWithPhone(phone);
        }

        String token = UUID.randomUUID().toString();
        // 7.2.将User对象转为HashMap存储
        UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);
        Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, new HashMap&lt;&gt;(),
                CopyOptions.create()
                        .setIgnoreNullValue(true)
                        .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));

        String tokenKey = LOGIN_USER_KEY + token;
        stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);
        stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);
        return Result.ok(tokenKey);
    }
</code></pre>

<h4>4.结果</h4>

<ul>
<li>用户只要在token设置的有效期内，登录一次就会继续刷新登录有效期，实现无需再次输入账号密码</li>
<li>在一个服务器上登录，即可在其其它服务器使用，单点登录</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2024-04-13 21:49:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-13 13:49:29]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-13 21:59:24]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-13 13:59:24]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[redis%e5%ae%9e%e7%8e%b0%e5%8d%95%e7%82%b9%e7%99%bb%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="redis"><![CDATA[Redis]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e7%99%bb%e5%bd%95"><![CDATA[登录]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[290]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[45]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[SpringBoot启动时打印yml文件配置信息日志]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/13/288/</link>
		<pubDate>Sat, 13 Apr 2024 13:50:55 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>SpringBoot启动时打印yml文件配置信息日志</h3>

<h3>1.情景</h3>

docker打包镜像十分的缓慢，在本地调试修改<code>application.yml</code>文件后有时候修改了配置文件，但是不知道是否生效。本地调试后，将地址设置为线上后不知是否修改成功

<h3>2.任务</h3>

镜像启动的时候打印配置<code>applicaton.yml</code>内容

<h3>3.方案</h3>

在SpringBoot启动时打印日志

<h4>3.1. 实现<code>CommandLineRunner</code>接口的<code>run</code>方法</h4>

<pre><code>~~~java
 @Override
 public void run(String... args) throws Exception {}
~~~

实现该方法后，在启动类启动后会自动执行该方法一次
</code></pre>

<h4>3.2.实现 <code>EnvironmentAware</code>接口，可以获取到配置文件的存储内容</h4>

<pre><code class="language-java line-numbers"> private Environment environment;

    @Autowired
    public void setEnvironment(Environment environment) {
        this.environment = environment;
    }
</code></pre>

<h4>3.3. 利用反射机制获取到属性名和属性值并打印</h4>

<pre><code class="language-java line-numbers">package cn.xiaomurui.chatglm.data;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.EnvironmentAware;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.Environment;
import org.springframework.core.env.PropertySource;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * @author 小木蕊 xiaomurui@126.com
 * @version 1.0.0
 * @caeateDate 2024/1/26
 * @description 程序启动入口
 */
@Slf4j
@SpringBootApplication
@Configurable
@EnableScheduling
public class Application implements CommandLineRunner, EnvironmentAware {

    private Environment environment;

    @Autowired
    public void setEnvironment(Environment environment) {
        this.environment = environment;
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class);
    }

    @Override
    public void run(String... args) throws Exception {
        log.info("服务启动系统配置如下：");
        if (environment instanceof ConfigurableEnvironment) {
            ConfigurableEnvironment configurableEnvironment = (ConfigurableEnvironment) environment;
            for (PropertySource&lt;?&gt; propertySource : configurableEnvironment.getPropertySources()) {
                Object source = propertySource.getSource();
                if (source.getClass().getSimpleName().equals("UnmodifiableMap")) {
                    Map configMap = (Map)source;
                    log.info("---------------------------------------");
                    for (Object key:configMap.keySet()){
                        log.info("{}，{}",key,configMap.get(key));
                    }
                }
            }
        }
    }
}

</code></pre>

<h3>4.结果</h3>

在打包为镜像后可以直接看日志文件看配置的地址是否为生产环境

<img src="https://s2.loli.net/2024/04/07/9m1Ou5JVGDzpQS6.png" alt="image-20240407224454803" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date><![CDATA[2024-04-13 21:50:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-13 13:50:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-13 21:58:46]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-13 13:58:46]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[springboot%e5%90%af%e5%8a%a8%e6%97%b6%e6%89%93%e5%8d%b0yml%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e4%bf%a1%e6%81%af%e6%97%a5%e5%bf%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="springboot"><![CDATA[SpringBoot]]></category>
		<category domain="post_tag" nicename="yml"><![CDATA[yml]]></category>
		<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[291]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[工厂模式+策略模式  = 规则引擎]]></title>
		<link>https://www.xiaomurui.cn/index.php/ll/2024/04/24/297/</link>
		<pubDate>Wed, 24 Apr 2024 05:01:45 +0000</pubDate>
		<dc:creator><![CDATA[ll]]></dc:creator>
		<guid isPermaLink="false">https://www.xiaomurui.cn/?p=297</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>工厂模式+策略模式  = 规则引擎</h3>

<blockquote>
  作者：小木蕊 2024年4月24日
</blockquote>

[toc]

<h4>一、前言</h4>

在抽奖系统、电商系统等项目中，存在一些相功能需求，设计一组规则过滤人群、设计一些支付优惠方式促销。不可避免的需要设计出规则引擎。通过一系列的规则过滤，最终得到最后的结果。

<h4><img src="https://s2.loli.net/2024/04/23/EbH51CVwWL8Ponm.png" alt="image-20240423161915566"  /></h4>

<h4>二、前期准备</h4>

需要设计一个灵活的设计规则引擎方便以后的规则增加和减少。

<h5>2.1 导入Maven依赖</h5>

需要的核心依赖有<code>SpringBoot、lombok、sl4fj、junit</code>，结合SpringBoot来构建规则引擎，更加方便的投入使用

<pre data-language=XML><code class="language-markup line-numbers">    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
            &lt;version&gt;2.7.18&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;
            &lt;version&gt;2.7.18&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;!-- LOGGING begin --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
            &lt;version&gt;1.7.5&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
            &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;
            &lt;version&gt;1.7.5&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;
            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;
            &lt;version&gt;1.0.9&lt;/version&gt;
            &lt;exclusions&gt;
                &lt;exclusion&gt;
                    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
                    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
                &lt;/exclusion&gt;
            &lt;/exclusions&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.13.2&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
            &lt;version&gt;5.3.31&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;version&gt;1.18.32&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

</code></pre>

<h5>2.2 模块结构</h5>

<img src="https://s2.loli.net/2024/04/23/6FuCsEVN5mfyLZ9.png" alt="image-20240423163908830" />

自定义注解、规则工厂、规则接口、规则实现，这四部分是最核心的部分。

假设我们现在的需求为：用户在下单的时候，经过规则引擎，减免商品的金额，其中有，满减优惠、直接减少优惠，打折优惠、N元购优惠，各种优惠叠加，最终生成用户的结算金额。

<h4>三、引擎实现</h4>

<h5>3.1 建立统一的优惠接口</h5>

<pre><code class="language-java line-numbers">public interface ICouponDiscount&lt;T&gt; {
    /**
     * 优惠券金额计算
     * @param couponInfo 券折扣信息；直减、满减、折扣、N元购
     * @param skuPrice   sku金额
     * @return           优惠后金额
     */
    BigDecimal discountAmount(T couponInfo, BigDecimal skuPrice);
}
</code></pre>

使用泛型，应为在不同的优惠规则下，数据类型是不同的，所以需要泛型来支持。

<h5>3.2 定义标记注解</h5>

为什么需要自定义注解呢？这样在每一个优惠规则的实现类上都用改注释标记，来区分不同的规则，同时也是规则工厂将其注入的根据。

<pre><code class="language-java line-numbers">/**
 * @author xiaomurui@163.com
 * @version 1.0.0
 * @date 2024/4/22 18:19
 * @description 优惠自定义注解
 */
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface CouponDiscount {
    // 规则工厂中定义的枚举类
    DefaultCouponDiscountFactory.CouponDiscountModel couponDiscountModel();
}
</code></pre>

<h5>3.3分别实现优惠接口</h5>

满减

<pre><code class="language-java line-numbers">@Slf4j
@Component
@CouponDiscount(couponDiscountModel = DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_MJ) //用自定义注解标记
public class MJCouponDiscount implements ICouponDiscount&lt;Map&lt;String, String&gt;&gt; {
    @Override
    public BigDecimal discountAmount(Map&lt;String, String&gt; couponInfo, BigDecimal skuPrice) {
        String x = couponInfo.get("x");
        String o = couponInfo.get("n");

        // 小于商品金额条件的，直接返回商品原价
        if (skuPrice.compareTo(new BigDecimal(x)) &lt; 0) return skuPrice;
        // 减去优惠金额判断
        BigDecimal discountAmount = skuPrice.subtract(new BigDecimal(o));
        if (discountAmount.compareTo(BigDecimal.ZERO) &lt; 1) return BigDecimal.ONE;

        log.info("满减开始计算 满减前：{}，满减后：{}", skuPrice, discountAmount);
        return discountAmount;
    }
}
</code></pre>

N元购

<pre><code class="language-java line-numbers">@Slf4j
@Component
@CouponDiscount(couponDiscountModel = DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_NYG)
public class NYGCouponDiscount implements ICouponDiscount&lt;Double&gt; {

    /**
     * n元购购买
     * 1. 无论原价多少钱都固定金额购买
     */
    public BigDecimal discountAmount(Double couponInfo, BigDecimal skuPrice) {
        log.info("n元购开始计算 n元购前：{}，n元购后：{}", skuPrice, couponInfo);
        return new BigDecimal(couponInfo);
    }
}
</code></pre>

直减

<pre><code class="language-java line-numbers">@Slf4j
@Component
@CouponDiscount(couponDiscountModel = DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_ZJ)
public class ZJCouponDiscount implements ICouponDiscount&lt;Double&gt; {

    /**
     * 直减计算
     * 1. 使用商品价格减去优惠价格
     * 2. 最低支付金额1元
     */
    public BigDecimal discountAmount(Double couponInfo, BigDecimal skuPrice) {
        BigDecimal discountAmount = skuPrice.subtract(new BigDecimal(couponInfo));
        if (discountAmount.compareTo(BigDecimal.ZERO) &lt; 1) return BigDecimal.ONE;
        log.info("直减开始计算 优惠前：{}，直减后：{}", skuPrice, discountAmount);
        return discountAmount;
    }
}
</code></pre>

折扣

<pre><code class="language-java line-numbers">@Component
@Slf4j
@CouponDiscount(couponDiscountModel = DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_ZK)
public class ZKCouponDiscount implements ICouponDiscount&lt;Double&gt; {

    /**
     * 折扣计算
     * 1. 使用商品价格乘以折扣比例，为最后支付金额
     * 2. 保留两位小数
     * 3. 最低支付金额1元
     */
    public BigDecimal discountAmount(Double couponInfo, BigDecimal skuPrice) {
        BigDecimal discountAmount = skuPrice.multiply(new BigDecimal(couponInfo)).setScale(2, BigDecimal.ROUND_HALF_UP);
        if (discountAmount.compareTo(BigDecimal.ZERO) &lt; 1) return BigDecimal.ONE;
        log.info("折扣开始计算 优惠前：{}，折扣后：{}", skuPrice, discountAmount);
        return discountAmount;
    }
}
</code></pre>

<h5>3.4规则工厂创建规则实例</h5>

<pre><code class="language-java line-numbers">@Service
public class DefaultCouponDiscountFactory {
    public Map&lt;String, ICouponDiscount&lt;?&gt;&gt; couponDiscountMap = new ConcurrentHashMap&lt;&gt;();
    //ICouponDiscount 的实现类都有comment注解，spring会帮我们自动注入
    public DefaultCouponDiscountFactory(List&lt;ICouponDiscount&gt; couponDiscounts) {
        for (ICouponDiscount couponDiscount : couponDiscounts) {
            CouponDiscount discount = AnnotationUtils.findAnnotation(couponDiscount.getClass(), CouponDiscount.class);
            if (null != discount) {
                couponDiscountMap.put(discount.couponDiscountModel().getCode(), couponDiscount);
            }
        }
    }


    public Map&lt;String, ICouponDiscount&lt;?&gt;&gt; openCouponDiscount() {
        return couponDiscountMap;
    }

    @Getter
    @AllArgsConstructor
    public enum CouponDiscountModel {
        CouponDiscount_MJ("CouponDiscount_MJ", "满减"),
        CouponDiscount_NYG("CouponDiscount_NYG", "n元购物"),
        CouponDiscount_ZJ("CouponDiscount_ZJ", "优惠"),
        CouponDiscount_ZK("CouponDiscount_ZK", "折扣"),
        ;
        private final String code;
        private final String info;

    }
}
</code></pre>

经过这么四步，一个规则Map就创建好了。

<h4>四、测试</h4>

这里我们模拟一个业务用户使用优惠方式减免。用户先用直接减免->满减->折扣->N元购

<pre><code class="language-java line-numbers">@SpringBootTest
@RunWith(SpringRunner.class)
public class ApiTest {
     @Resource
    private DefaultCouponDiscountFactory discountFactory;

    @Test
    public void test_demo03() {

        BigDecimal price = new BigDecimal(1000);
        logger.info("初始价格为：{}", price);
        Map&lt;String, ICouponDiscount&lt;?&gt;&gt; couponDiscountMap = discountFactory.openCouponDiscount();
        //直减
        ICouponDiscount&lt;Double&gt; ZJ = (ICouponDiscount&lt;Double&gt;) couponDiscountMap.get(DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_ZJ.getCode());
        price = ZJ.discountAmount(10D, price);


        // 满减
        ICouponDiscount&lt;Map&lt;String, String&gt;&gt; MJ = (ICouponDiscount&lt;Map&lt;String, String&gt;&gt;) couponDiscountMap.get(DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_MJ.getCode());
        Map&lt;String, String&gt; mapReq = new HashMap&lt;String, String&gt;();
        mapReq.put("x", "100");
        mapReq.put("n", "10");
        price = MJ.discountAmount(mapReq, price);

        //折扣
        ICouponDiscount&lt;Double&gt; ZK = (ICouponDiscount&lt;Double&gt;) couponDiscountMap.get(DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_ZK.getCode());
        price = ZK.discountAmount(0.9D, price);

        //N元够购物
        ICouponDiscount&lt;Double&gt; NY = (ICouponDiscount&lt;Double&gt;) couponDiscountMap.get(DefaultCouponDiscountFactory.CouponDiscountModel.CouponDiscount_NYG.getCode());
        price = NY.discountAmount(9.9D, price);
        logger.info("最终结果为：{}", price);
    }
}
</code></pre>

运行结果

<pre><code class="line-numbers">2024-04-24 12:46:33.959  INFO 29416 --- [           main] c.x.d.D.StrategyPatterns.ApiTest         : 初始价格为：1000
2024-04-24 12:46:33.960  INFO 29416 --- [           main] c.x.d.D.S.demo03.impl.ZJCouponDiscount   : 直减开始计算 优惠前：1000，直减后：990
2024-04-24 12:46:33.960  INFO 29416 --- [           main] c.x.d.D.S.demo03.impl.MJCouponDiscount   : 满减开始计算 满减前：990，满减后：980
2024-04-24 12:46:33.960  INFO 29416 --- [           main] c.x.d.D.S.demo03.impl.ZKCouponDiscount   : 折扣开始计算 优惠前：980，折扣后：882.00
2024-04-24 12:46:33.961  INFO 29416 --- [           main] c.x.d.D.S.demo03.impl.NYGCouponDiscount  : n元购开始计算 n元购前：882.00，n元购后：9.9
2024-04-24 12:46:33.961  INFO 29416 --- [           main] c.x.d.D.StrategyPatterns.ApiTest         : 最终结果为：9.9000000000000003552713678800500929355621337890625

</code></pre>

<h5>总结</h5>

<ul>
<li>这么一个规则工厂使用到的技巧 <strong>工厂模式、策略模式、自定义注解</strong>，搭配上Spring来管理对象，算是一个比较优雅的写法。</li>
<li>好处：我们需要在增加一个规则的时候，只需要增加对应的实现类即可，需要使用，直接在规则Map中调用即可</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date><![CDATA[2024-04-24 13:01:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-04-24 05:01:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-04-27 18:24:17]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-04-27 10:24:17]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8f-%e8%a7%84%e5%88%99%e5%bc%95%e6%93%8e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="%e5%b0%86%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae%e6%8b%86%e8%a7%a3%e4%b8%80%e4%b8%aa%e5%8f%88%e4%b8%80%e4%b8%aa%e7%9a%84%e5%b0%8fdemo%e6%8a%80%e6%9c%af%ef%bc%8c%e6%96%b9%e4%be%bf%e5%ad%a6"><![CDATA[技术小demo]]></category>
		<category domain="post_tag" nicename="%e6%a8%a1%e5%9d%97%e8%ae%be%e8%ae%a1"><![CDATA[模块设计]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpcom_is_markdown]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[298]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[views]]></wp:meta_key>
		<wp:meta_value><![CDATA[50]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[specs_zan]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[show database;]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[123@123.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[221.238.231.143]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2024-04-26 18:56:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2024-04-26 10:56:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<pre><code class="language-html">123
</code></pre>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[new_field_qq]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[mail_notify]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
				</channel>
</rss>
	